[{"id":1,"title":"Deploying YugabyteDB on Google Kubernetes Engine with OpenEBS\r","author":"OPENEBS\r","author_info":"No author information","date":"05-04-2021\r","tags":["OpenEBS"," OpenSource"," Yugabyte"," Cloud Native Gke"],"excerpt":"In this blog post, we’ll walk you through the necessary steps to get a 3 node YugabyteDB cluster running on top of GKE, backed by OpenEBS.\r","content":"\r\n[OpenEBS](https://www.openebs.io/) is a CNCF project backed by [MayaData](https://mayadata.io/) that provides cloud-native, open source container attached storage (CAS). OpenEBS delivers persistent block storage and other capabilities such as integrated back-up, management of local and cloud disks, and more. For enterprise cloud-native applications, OpenEBS provides storage functionality that is idiomatic with cloud-native development environments, with granular storage policies and isolation that enable cloud developers and architects to optimize storage for specific workloads.\r\n\r\nBecause [YugabyteDB](https://www.yugabyte.com/) is a cloud-native, distributed SQL database that runs in Kubernetes environments, it can interoperate with OpenEBS and many other CNCF projects.\r\n\r\n**Wait, what is YugabyteDB?** _It is an open source, and high-performance distributed SQL database built on a scalable and fault-tolerant design inspired by Google Spanner. Yugabyte’s YSQL API is PostgreSQL wire compatible._\r\n\r\nIn this blog post we’ll walk you through the necessary steps to get a 3 node YugabyteDB cluster running on top of GKE, backed by OpenEBS.\r\n\r\n[![Deploying YugabyteDB on Google Kubernetes Engine with OpenEBS](/images/blog/deploying-yugabytedb-on-google-kubernetes-engine-with-openebs-video-preview.png)](https://player.vimeo.com/video/530995643?app_id=122963)\r\n\r\n\r\n**Why OpenEBS and YugabyteDB?**  \r\nBecause YugabyteDB is a transactional database often used as a system of record, it needs to be deployed as a StatefulSet on Kubernetes and requires persistent storage. OpenEBS can be used for backing YugabyteDB local disks, allowing the provisioning of large-scale persistent volumes. \r\n\r\nHere are a few of the advantages of using OpenEBS in conjunction with a YugabyteDB database cluster:\r\n\r\n- There’s no need to manage the local disks as OpenEBS manages them.\r\n- OpenEBS and YugabyteDB can provision large size persistent volumes.\r\n- With OpenEBS persistent volumes, capacity can be thin provisioned, and disks can be added to OpenEBS on the fly without disruption of service. When this capability is combined with YugabyteDB, which already supports multi-TB data density per node, this can prove to be[ massive cost savings on storage.](https://docs.openebs.io/features.html#reduced-storage-tco-upto-50)\r\n- Both OpenEBS and YugabyteDB support multi-cloud deployments [helping organizations avoid cloud lock-in.](https://docs.openebs.io/docs/next/features.html#truely-cloud-native-storage-for-kubernetes)\r\n- Both OpenEBS and YugabyteDB integrate with another CNCF project, [Prometheus](https://prometheus.io/). This makes it easy to [monitor both storage and the database](https://docs.openebs.io/docs/next/features.html#prometheus-metrics-for-workload-tuning) from a single system.\r\n\r\nAdditionally, OpenEBS can do [synchronous replication](https://docs.openebs.io/docs/next/features.html#synchronous-replication) inside a geographic region. In a scenario where YugabyteDB is deployed across regions, and a node in any one region fails, YugaByteDB would have to rebuild this node with data from another region. This would incur cross-region traffic, which is more expensive and lower in performance. But, with OpenEBS, this rebuilding of a node can be done seamlessly because OpenEBS is replicating locally inside the region. This means YugabyteDB does not end up having to copy data from another region, which ends up being less expensive and higher in performance. In this deployment setup, only if the entire region failed, YugabyteDB would need to do a cross-region node rebuild. Additional detailed descriptions of OpenEBS enabled use cases can be found [here.](https://docs.openebs.io/docs/next/usecases.html)\r\n\r\nOk, let’s get started!\r\n\r\n**Prerequisites**  \r\n\r\n![Yugabyte work flow](/images/blog/yugabyte-work-flow.png)\r\n\r\nUsing the latest and greatest versions of the available software (as of this blog’s writing), below is the environment which we’ll use to run a YugabyteDB cluster on top of a Google Kubernetes Engine (GKE) cluster backed by OpenEBS\r\n\r\n1. YugabyteDB - [Version 2.5.3.1](https://docs.yugabyte.com/latest/quick-start/install/)\r\n2. OpenEBS - [Version 2.7.0](https://github.com/openebs/openebs)\r\n3. A [Google Cloud Platform](https://cloud.google.com/gcp/) account\r\n\r\n**Step 1: Setting Up a Cluster on GKE**  \r\nTo deploy YugabyteDB on the Google Cloud Platform (GCP), we first have to set up a cluster using Ubuntu as our base node image.\r\n\r\n**Note**: _GKE’s Container-Optimized OS does not come with an iSCSI client pre-installed and does not allow the installation of an iSCSI client. Therefore, we’ll be using the Ubuntu with Docker image type for our nodes._\r\n\r\nFor the purposes of this demo, I used the Google Cloud Console to configure my Kubernetes cluster. Aside from the typical defaults, here’s the options under the* Node Pools > default-pool > Nodes*  I selected\r\n\r\n- **Image Type:** Ubuntu with Docker\r\n- **Series:** N1\r\n- **Machine Type:** n1-standard-4 (4 vCPU, 15 GB memory)\r\n\r\n![Yugabyte nodes](/images/blog/yugabyte-nodes.png)\r\n\r\nClick _Create_ and wait for the Kubernetes cluster to come online.\r\n\r\n**Step 2: Configure iSCSI**  \r\nThe iSCSI client is a prerequisite for provisioning cStor and Jiva volumes. However, it is recommended that the iSCSI client is setup and *iscsid* service is running on worker nodes before proceeding with the OpenEBS installation. In order to set up iSCSI, we’ll first need to determine the names of the nodes in our cluster\r\n\r\n    $ kubectl get nodes\r\n\r\n    NAME                                       \tSTATUS   ROLES    \tAGE   \tVERSION\r\n    gke-cluster-1-default-pool-be95f6dd-5x65  \tReady    <none>   \t18h   \tv1.18.15-gke.1501\r\n    gke-cluster-1-default-pool-be95f6dd-rs6c  \tReady    <none>   \t18h \tv1.18.15-gke.1501\r\n    gke-cluster-1-default-pool-be95f6dd-t4cp  \tReady    <none> \t18h  \tv1.18.15-gke.1501\r\n\r\n    Now that we have the names of our nodes, we’ll want to log into each node and enable the iSCSI service.\r\n\r\n    $ gcloud compute ssh <node name>\r\n    $ sudo systemctl enable iscsid && sudo systemctl start iscsid\r\n\r\n    You can check the status of the iSCSI service using the following command:\r\n\r\n    $ systemctl status iscsid\r\n\r\n    iscsid.service - iSCSI initiator daemon (iscsid)\r\n       Loaded: loaded (/lib/systemd/system/iscsid.service; enabled; vendor preset: enabled)\r\n       Active: active (running) since Fri 2021-03-26 02:25:42 UTC; 18h ago\r\n         Docs: man:iscsid(8)\r\n      Process: 10052 ExecStart=/sbin/iscsid (code=exited, status=0/SUCCESS)\r\n      Process: 10038 ExecStartPre=/lib/open-iscsi/startup-checks.sh (code=exited, status=0/SUCCESS)\r\n     Main PID: 10059 (iscsid)\r\n        Tasks: 2 (limit: 4915)\r\n       CGroup: /system.slice/iscsid.service\r\n               ├─10057 /sbin/iscsid\r\n               └─10059 /sbin/iscsid\r\n    Mar 26 02:25:42 gke-cluster-1-default-pool-be95f6dd-5x65 systemd[1]: Starting iSCSI initiator daemon (iscsid)...\r\n    Mar 26 02:25:42 gke-cluster-1-default-pool-be95f6dd-5x65 iscsid[10052]: iSCSI logger with pid=10057 started!\r\n    Mar 26 02:25:42 gke-cluster-1-default-pool-be95f6dd-5x65 systemd[1]: Started iSCSI initiator daemon (iscsid).\r\n\r\n**Step 3: Install OpenEBS**  \r\nNext, let’s install OpenEBS. I’ve found that the OpenEBS Operator is one of the simplest ways to get the software up and running.\r\n\r\n    $ kubectl apply -f https://openebs.github.io/charts/openebs-operator.yaml\r\n\r\nOnce the installation is completed, check and verify the status of the pods. You should something similar to this:\r\n\r\n    $ kubectl get pods -n openebs\r\n\r\n    NAME                                            READY   STATUS\r\n    maya-apiserver-dd655ff87-rbgmd                  1/1     Running\r\n    openebs-admission-server-5965c94767-4h8rc       1/1     Running\r\n    openebs-localpv-provisioner-5495669c66-z46lr    1/1     Running\r\n    openebs-ndm-dss64                               1/1     Running\r\n    openebs-ndm-gnv75                               1/1     Running\r\n    openebs-ndm-operator-68949644b9-mqvlx           1/1     Running\r\n    openebs-ndm-r5pws                               1/1     Running\r\n    openebs-provisioner-544cb85449-w9spl            1/1     Running\r\n    openebs-snapshot-operator-6d65b778dd-79zcn      2/2     Running\r\n\r\n**Step 4: Create and Attach Disks to Nodes**  \r\nOur worker nodes need to have disks attached. These disks need to be unmounted and not have a filesystem on them. To accomplish this we’ll need to execute the following commands on each node.\r\n\r\n    $ gcloud compute disks create disk1 --size=10GB\r\n    $ gcloud compute instances attach-disk gke-cluster-1-default-pool-be95f6dd-5x65 --disk disk1\r\n\r\n    $ gcloud compute disks create disk2 --size=10GB\r\n    $ gcloud compute instances attach-disk gke-cluster-1-default-pool-be95f6dd-rs6c --disk disk2\r\n\r\n    $ gcloud compute disks create disk3 --size=10GB\r\n    $ gcloud compute instances attach-disk gke-cluster-1-default-pool-be95f6dd-t4cp --disk disk3\r\n\r\n    Next let’s verify that our block devices are indeed attached.\r\n\r\n    $ kubectl get blockdevice -n openebs\r\n\r\n    NAME              NODENAME                           SIZE          CLAIMSTATE   STATUS\r\n    blockdevice-03... gke-cluster-1-default-pool-be9...  10736352768   Claimed      Active\r\n    blockdevice-85... gke-cluster-1-default-pool-be9...  10736352768   Claimed      Active\r\n    blockdevice-b0... gke-cluster-1-default-pool-be9...  10736352768   Claimed      Active\r\n\r\n**Step 5: Create a Storage Pool Claim**  \r\nNow that we have the names of our block devices and have verified that they are active, the next step is to create a Storage Pool Claim. We’ll use this to then create a Storage Class, and finally use that for our Persistent Volume Claims. The first step in this chain of steps is to configure our Storage Pool Claim YAML file. In this demo, I’ve named it “cstor-pool1-config.yaml”.\r\n\r\n    $ vim cstor-pool1-config.yaml\r\n\r\n    #Use the following YAMLs to create a cStor Storage Pool.\r\n    apiVersion: openebs.io/v1alpha1\r\n    kind: StoragePoolClaim\r\n    metadata:\r\n      name: cstor-disk-pool\r\n      annotations:\r\n        cas.openebs.io/config: |\r\n          - name: PoolResourceRequests\r\n            value: |-\r\n                memory: 2Gi\r\n          - name: PoolResourceLimits\r\n            value: |-\r\n                memory: 4Gi\r\n    spec:\r\n      name: cstor-disk-pool\r\n      type: disk\r\n      poolSpec:\r\n        poolType: striped\r\n      blockDevices:\r\n        blockDeviceList:\r\n    - blockdevice-03e93d010db5169322eb16f3e18e33ed\r\n    - blockdevice-22591882979084d0fe580fe229e0d84f\r\n    - blockdevice-4d1b4bacbeec1650b337c2cfda7e3a48\r\n    ---\r\n\r\n    Once you’ve figured out how to exit vim, the next step is to create the resource.\r\n    $ kubectl create -f cstor-pool1-config.yaml\r\n\r\nWe can verify our storage pool with the following command:\r\n\r\n    $ kubectl get csp\r\n\r\n    NAME                   ALLOCATED   FREE    CAPACITY   STATUS    READONLY   TYPE\r\n    cstor-disk-pool-6cmf   1.85M       9.94G   9.94G      Healthy   false      striped\r\n    cstor-disk-pool-jql6   40.6M       9.90G   9.94G      Healthy   false      striped\r\n    cstor-disk-pool-vbz5   68.2M       9.87G   9.94G      Healthy   false      striped\r\n\r\n**Step 6: Create a Storage Class**  \r\nNow that we have a storage pool, let’s configure the YAML file for our storage class.  In this demo, I’ve named it “openebs-sc-rep1.yaml”.\r\n\r\n    $ vim openebs-sc-rep1.yaml\r\n\r\n    apiVersion: storage.k8s.io/v1\r\n    kind: StorageClass\r\n    metadata:\r\n      name: openebs-sc-rep1\r\n      annotations:\r\n        openebs.io/cas-type: cstor\r\n        cas.openebs.io/config: |\r\n          - name: StoragePoolClaim\r\n            value: \"cstor-disk-pool\"\r\n          - name: ReplicaCount\r\n            value: \"1\"\r\n    provisioner: openebs.io/provisioner-iscsi\r\n\r\nAssuming you have remembered how to exit vim from the previous step, we now need to create the storage class.\r\n\r\n    $ kubectl create -f openebs-sc-rep1.yaml\r\n\r\nFinally, let’s verify the storage class.\r\n\r\n    $ kubectl get sc\r\n\r\n    NAME                  PROVISIONER                  RECLAIMPOLICY   VOLUMEBINDINGMODE\r\n    openebs-device        openebs.io/local             Delete          WaitForFirstConsumer\r\n    openebs-hostpath      openebs.io/local             Delete          WaitForFirstConsumer\r\n    openebs-jiva-default  openebs.io/provisioner-iscsi Delete          Immediate\r\n    openebs-sc-rep1       openebs.io/provisioner-iscsi Delete          Immediate\r\n    openebs-snapshot...   volumesnapshot.external...   Delete          Immediate\r\n    premium-rwo           pd.csi.storage.gke.io        Delete          WaitForFirstConsumer\r\n    standard (default)    kubernetes.io/gce-pd         Delete          Immediate\r\n    standard-rwo          pd.csi.storage.gke.io        Delete          WaitForFirstConsumer\r\n\r\nAt this point, we are now set up for Persistent Volume Claims.\r\n\r\n**Step 7: Install YugabyteDB**  \r\nIn this final step we’ll install a 3 node YugabyteDB cluster running on top of GKE that will be backed by the OpenEBS deployment we just completed.\r\n\r\nThe first step is to create a namespace.\r\n\r\n_$ kubectl create namespace yb-demo_\r\n\r\nNext, let’s install the cluster using Helm.\r\n\r\n    $ helm install yb-demo yugabytedb/yugabyte --set resource.master.requests.cpu=1,resource.master.requests.memory=1Gi,\\\r\n    resource.tserver.requests.cpu=1,resource.tserver.requests.memory=1Gi,\\\r\n    enableLoadBalancer=True --namespace yb-demo  --set storage.master.storageClass=openebs-sc-rep1,storage.tserver.storageClass=openebs-sc-rep1 --set persistence.storageClass=openebs-cstor-disk --wait\r\n\r\nNote that in the command above we are specifying the following so that YugabyteDB makes explicit use of OpenEBS:\r\n\r\n- _storage.master.storageClass=openebs-sc-rep1_\r\n- _storage.tserver.storageClass=openebs-sc-rep1_\r\n- _persistence.storageClass=openebs-cstor-disk_\r\n\r\nOnce the installation is complete you should be able log into the PostgreSQL compatible YSQL shell on port 5433 with the following command:\r\n\r\n    $ kubectl --namespace yb-demo exec -it yb-tserver-0 -- sh -c \"cd /home/yugabyte && ysqlsh -h yb-tserver-0\"\r\n\r\n    ysqlsh (11.2-YB-2.5.3.1-b0)\r\n    Type \"help\" for help.\r\n    yugabyte=#\r\n\r\nYou can also access the basic YugabyteDB web admin portal at:\r\n\r\n_http://<yb-master-ui-endpoint>:7000_\r\n\r\n![Yugabyte master](/images/blog/yugabyte-master.png)\r\n\r\n**Viewing Services and Ingress**  \r\nA quick and visual way to check out all the services and ingress is to go to the “Services and Ingress” view in the Google Cloud Console. If you’ve made it this far you should see something like this:\r\n\r\n![Yugabyte ingress](/images/blog/yugabyte-ingress.png)\r\n\r\nNote: I have omitted the “Endpoints” column from the screenshot above, but in your view you’ll be able to see the IPs and ports of the various endpoints.\r\n\r\nThat’s it! You now have a 3 node YugabyteDB cluster running on GKE with OpenEBS storage.\r\n\r\n**Next Steps**  \r\nAs mentioned, MayData is the chief sponsor of the OpenEBS project. It offers an enterprise-grade OpenEBS platform that makes it easier to run stateful applications on Kubernetes by helping get your workloads provisioned, backed-up, monitored, logged, managed, tested, and even migrated across clusters and clouds. You can learn more about MayaData [here.](https://mayadata.io/)\r\n\r\n- Learn more about OpenEBS by visiting the [GitHub](https://github.com/openebs/openebs) and [official Docs](https://docs.openebs.io/) pages.\r\n- Learn more about YugabyteDB by visiting the [GitHub](https://github.com/yugabyte/yugabyte-db) and [official Docs](https://docs.yugabyte.com/) pages.\r\n\r\n**About the author:**\r\n\r\n![Jimmy Guerrero](/images/blog/authors/jimmy-guerrero.png)\r\n\r\nJimmy Guerrero, VP Marketing, and Community at YugaByte.","slug":"deploying-yugabytedb-on-google-kubernetes-engine-with-openebs"},{"id":2,"title":"Repeatable OpenEBS Mayastor deployments and benchmarks\r","author":"OPENEBS\r","author_info":"\r","date":"22-03-2021\r","tags":["Mayastor","OpenEBS"],"excerpt":"Learn about Repeatable OpenEBS Mayastor deployments and benchmarks\r","content":"\r\n## Introduction\r\n\r\nOpenEBS is one of the most popular Storage-related projects in CNCF, and the newest addition to OpenEBS - Mayastor, is a missing piece that has been absent from the Kubernetes stack for a long time - Kubernetes-native, high performance, distributed Software-Defined Storage or what is increasingly called Container Attached Storage (CAS).\r\n\r\nAs the lead developers of OpenEBS Mayastor, we want to be sure our message of an extremely high performing CAS is not only exciting, but also honest and easy to check. We want every interested user to be able to quickly and easily bring OpenEBS Mayastor up, properly tuned and ready for testing with whatever workload the user prefers to try.\r\n\r\nIn order to deliver on that promise, we have started a [“Demo Playground” project, open sourced on Github](https://github.com/mayadata-io/deployment-automation-playground/tree/main/demo-playground).  Contributions and feedback are welcome.\r\n\r\n\r\n## OpenEBS\r\n\r\nOpenEBS is a project with multiple storage engines, with each engine providing the user with different feature sets as well as different usage and performance characteristics. The currently available options can roughly be split into two categories:\r\n\r\n* LocalPV: Excellent for workloads that deal with storage resilience at the application level, creating and managing their own replicas and capable of sustaining the loss of a single or multiple nodes, such as  Cassandra, and requiring very good storage performance, especially latency-wise.\r\n* Replicated storage  (cStor, Jiva) - for workloads that are less performance-sensitive and some of the more advanced storage features such as synchronous data replication, snapshots, clones, thin provisioning of data, high resiliency of data, data consistency, and on-demand increase of capacity or performance.\r\n\r\nAdvanced features come at the cost of higher latency and lower performance, and yet, technology keeps advancing and trying to get the best of both worlds.\r\n\r\n\r\n## OpenEBS Mayastor\r\n\r\nOpenEBS Mayastor delivers on the promise of exciting new technology, utilizing NVMe (not just the disks, but the protocol and standards), NVMEoF, SPDK and io_uring. NVMes inside our servers deliver amazing speeds and latencies, huge numbers of IOPS, and using old SCSI or FC protocols only waste resources introducing overheads. Harnessing SPDK and NVMEoF OpenEBS Mayastor achieves speeds that are close to in-host NVMes, without compromising on workload mobility, resilience, flexibility, and enterprise features.\r\n\r\nStill, all this exciting tech needs some proper care before it behaves as it should, and we still have a ways to go before it autotunes and autoconfigures itself just right with the help of Kubernetes and workload operators; and yet, as a user willing to take Mayastor for a spin, there should be no reason to wait, if the tuning and preparation can be automated now.\r\n\r\n\r\n## Introducing: the Automation Playground\r\n\r\nThe Automation Playground provides an easy onramp for trying out OpenEBS Mayastor in a cloud or self-hosted environment and attempts to keep the installation process correct, standardized, and consistently reproducible, yet both simple and flexible.\r\n\r\nThe Playground utilizes popular and familiar software in order to apply the desired state configuration, as well as following a familiar Jenkins-pipeline-like approach.\r\n\r\nThe entire process is split into stages, with each stage extensible, replaceable and skippable, if need be, and each stage is called from a simple bash script, where each step is a function, easily copied into a CI engine as a pipeline stage.\r\n\r\nThe user experience is as simple as editing a single variables file in order to define the benchmark setup variables and running up.sh. The script will then iterate over the predefined stages, relying on the outcomes of each stage to run the next one\r\n\r\nVariables are used to define such things as the setup name (prefixed in all the provisioned resources), user access credentials, Kubernetes installation types, provisioning details, and of course, OpenEBS Mayastor tuning as well as the benchmark itself. For more details, please see the vars file at [https://github.com/mayadata-io/deployment-automation-playground/blob/main/demo-playground/vars](https://github.com/mayadata-io/deployment-automation-playground/blob/main/demo-playground/vars)\r\n\r\n\r\n## Stages\r\n\r\nEach software lifecycle consists of several stages - provisioning, deployment, operations, and teardown.\r\n\r\nSince we are flexible here, each stage can be skipped if it isn’t required in a given setup.\r\n\r\nWhen running a benchmark on a set of self-hosted bare metal machines, the provisioning stage is not needed.\r\n\r\nIf Kubernetes is already installed, the Kubernetes installation stage can be skipped.\r\n\r\nWhen running the Demo Playground on a host that has direct access to the machines executing the benchmark, the VPN stage can be skipped.\r\n\r\nThe only truly essential stages are node preparation and the actual OpenEBS Mayastor workload playbooks that will be installed.\r\n\r\n\r\n#### Stage 1: Provisioning\r\n\r\nAt this step, we use Terraform to create a separate environment for the benchmark. Currently, the supported provisioning options are Azure and AWS EC2, with GCP support not too far behind. As a reminder, contributions (and feedback) are welcome.\r\n\r\nTerraform is used to create a separate VPC (in EC2) or Resource Group (in Azure), where networking is configured, and VMs are provisioned as per the definitions in the vars file.\r\n\r\nThe nodes provisioned are of three varieties\r\n\r\n* Master nodes (for Kubernetes Masters)\r\n* Worker nodes (Kubernetes workers that will be running the workload - make sure these are powerful enough and include fast networking if you want to be able to stress Mayastor)\r\n* Storage nodes (Kubernetes workers that will be running Mayastor). These instances should have fast local NVMe disks, which means LXs_v2 on Azure, m5d/m5ad/m5dn/i3 on AWS or n1/n2_standard with added Local-SSDs on GCP.\r\n\r\nWhen provisioning is complete, an Ansible inventory file is generated by Terraform, to be used in later stages. The inventory contains all the node IPs split into groups and adjusted for the various Kubernetes installers in use.\r\n\r\nIf the provisioning stage is skipped, the user must provide the inventory.ini file in the workspace directory, with the file containing the [mayastor_clients] (non-storage workers) and [mayastor_storage] (storage nodes) groups.\r\n\r\n#### Stage 2: Start VPN\r\n\r\nThis is a small stage, only required when the host executing Demo Playground is not inside the same subnet as the cluster nodes. The stage starts sshuttle after creating a script in the workspace directory. Sshuttle is described as a “poor man’s VPN” - an easy to use package that will tunnel all traffic for a given subnet through an SSH tunnel to a Bastion host.\r\n\r\nDuring provisioning, the first Kubernetes Master host has designated the Bastion and will be used for this purpose, effectively working as a VPN concentrator for the Demo Playground setup, placing the executor host in the same subnet as the Kubernetes nodes.\r\n\r\n#### Stage 3: Kubernetes setup\r\n\r\nAt this step, the Playground will deploy a pre-configured version of Kubernetes on the hosts as described in the inventory. If Provisioning was skipped, this means that the inventory file will have to be expanded with groups that are pertinent to the Kubernetes deployment in use; otherwise, the inventory generated in the Provisioning stage will contain all the required groups.\r\n\r\nCurrently two installation types are supported with more planned:\r\n\r\n* Kubespray - a well known Ansible based feature rich Kubernetes installer\r\n* K3S - a simplified and downsized Kubernetes distribution, which can be perfect for a small demo setup. This is also installed via Ansible.\r\n\r\nAt the end of the step, the script will extract the KUBECONFIG credentials file from a Master node and place it under workspace/admin.conf. If this stage is skipped, the user will have to extract and add this file manually.\r\n\r\n#### Stage 4: Node preparation\r\n\r\nIn order to run OpenEBS Mayastor as well as other OpenEBS storage engines, some prerequisites need to be applied to the Kubernetes workers, both the storage and client nodes.\r\n\r\nThis includes making sure the iSCSI and NVMeo-TCP client packages are present, installing and enabling the various Linux kernel modules, enabling hugepages, and so on. Some of these settings might require a host restart.\r\n\r\nThe stage is implemented as an Ansible playbook, which allows it to reach into the hosts directly in order to prepare them, performing some actions a Kubernetes pod has limited access to.\r\n\r\nAt this point, we should have a working Kubernetes setup, with the different worker nodes prepared for using Mayastor either as storage hosts or storage clients.\r\n\r\n## Playbooks\r\n\r\nActually, the proper stages end at Node Preparation, and then the playbooks take over.  The vars file contains a PLAYBOOKS variable, which lists all the playbooks the Playground will apply in sequence.\r\n\r\nCurrently, there is one playbook relevant to testing Mayastor - mayastor.yml\r\n\r\nBut the script will attempt to run any playbooks mentioned from the deployments directory one after another.\r\n\r\nThe Mayastor playbook follows the Mayastor installation instructions, creating the Kubernetes manifests and applying them to the setup, so that all the relevant Mayastor pods, DaemonSets, StorageClasses, Pools etc. are created in the Mayastor namespace, PVCs are created and ready to be used by the user’s workload.\r\n\r\nThe Mayastor playbook also contains an optional FIO test, which will create an FIO pod using the first created PVC and run a quick 1-minute benchmark.\r\n\r\n## Conclusion\r\n\r\nThe Demo Playground project is still in very early stages, and we invite everyone to use, contribute and expand upon it. The goal here is to give the user interested in giving OpenEBS Mayastor a try, a ready tool that does the job in an open, honest, consistent, and reproducible manner.\r\n\r\nThe project’s flexibility allows for anyone to add in additional playbooks, which will deploy and run different workloads on top of Mayastor, and we intend to expand upon it, adding some workloads of our own beyond the basic FIO benchmark.\r\n\r\nPlease visit us at [https://mayadata.io](https://mayadata.io) and give the Demo Playground a spin at [https://github.com/mayadata-io/deployment-automation-playground/tree/main/demo-playground](https://github.com/mayadata-io/deployment-automation-playground/tree/main/demo-playground).\r\n\r\nYou can also find my colleagues and me spending time on the Kubernetes #OpenEBS slack, or at a [Discord room](https://discord.com/invite/zsFfszM8J2) set up to focus mostly on open source collaboration with Mayastor developers (Rusticians may be especially interested), and on the Data on Kubernetes community where a huge variety of users of Kubernetes for data are sharing their perspectives (https://dok.community/).\r\n\r\n\r\n****About the author:****\r\n\r\n![Dan Yasny](/images/blog/authors/dan-yasny.png)\r\n\r\nDan Yasny is a Principal Field Engineer at MayaData, previously he worked as a Field Engineer at ScyllaDB, an SDET, Technical Product Manager and a Sustaining Engineer at Red Hat, working on such projects as ScyllaDB, Kubernetes, OpenShift, KubeVirt, OpenStack, oVirt/RHV and more.","slug":"repeatable-openebs-mayastor-deployments-and-benchmarks"},{"id":3,"title":"How are TikTok, Flipkart, KubeSphere, and others using OpenEBS for Local Volumes\r","author":"Kiran Mova\r","author_info":"Contributor and Maintainer OpenEBS projects. Chief Architect MayaData. Kiran leads overall architecture & is responsible for architecting, solution design & customer adoption of OpenEBS.\r","date":"12-03-2021\r","tags":["LocalPV"," OpenEBS"," Flipkart"," TikTok"," Kubernetes"," Mayastor"," MayaData"],"excerpt":"How are TikTok, Flipkart, KubeSphere, and others using OpenEBS for Local Volumes\r","content":"\r\n**How to select the right local volume for your workloads?**\r\n\r\nWe have recently seen a massive increase in the usage of different flavors of OpenEBS Local PV. We estimate by looking at container pulls for underlying components combined with some call home data for those users of OpenEBS that enable the capturing of metrics that the weekly new deployments of OpenEBS for LocalPV increased by nearly 10x during 2020. This can be attributed to the fact that more and more cloud native Stateful applications are moving into Kubernetes\r\n\r\n![LocalPv Deployment](https://admin.mayadata.io/content/images/2021/03/Local-PV-Deployment.PNG)\r\n\r\nSome of the prominent users of OpenEBS Local PV include the CNCF, Optoro, ByteDance / TikTok, Flipkart, and many more. You can always read more about OpenEBS users on the OpenEBS.io website and on the GitHub project page here: [https://github.com/openebs/openebs/blob/master/ADOPTERS.md](https://github.com/openebs/openebs/blob/master/ADOPTERS.md).\r\n\r\nWhile Kubernetes provides native support or interfaces for consuming Local Volumes, the adoption of OpenEBS for LocalPV management suggests that some capabilities are missing that are desired by users. At a high level, dynamic provisioning and the simplicity of deleting Local Volumes are two reasons often given for the preference of some users for the use of OpenEBS LocalPV.\r\n\r\nIn this blog, I outline the various types of Local Storage that users have in their Kubernetes clusters and introduce the various flavors of OpenEBS Local PV being used.\r\n\r\nBefore getting into the flavors of OpenEBS Local PV, it might be worthwhile to know what Kubernetes offers or means by a Local Volume.\r\n\r\n_A [Kubernetes Local Volume](https://kubernetes.io/docs/concepts/storage/volumes/#local) implies that storage is available only from a single node. A local volume represents a mounted local storage device such as a disk, partition, or directory._\r\n\r\nSo, it stands to reason - as the Local Volume is accessible only from a single node, local volumes are subject to the availability of the underlying node. If the node becomes unhealthy, then the local volume will also become inaccessible, and a Pod using it will not be able to run.\r\n\r\nHence, Stateful Applications using local volumes must be able to tolerate this reduced availability, as well as potential data loss, depending on the durability characteristics of the underlying disk.\r\n\r\nAs it happens, many of the Cloud Native Workloads - are distributed in nature and are typically deployed as StatefulSets with multiple replicas. These can sustain the failure or reduced availability of a single replica. MinIO, Redis, PostgreSQL, Kafka, Cassandra, Elastic are just some examples that are deployed using Local Volumes. For these applications - performance and consistent low latency, and ease of management are more important than the resiliency of a node to failures.\r\n\r\nAs the large SaaS provider, [Optoro](https://github.com/openebs/openebs/blob/master/adopters/optoro/README.md) puts it:  \r\n*The vast majority of applications are able to better handle failover and replication than a block level device. Instead of introducing another distributed system into an already complex environment, OpenEBS's localPVs allow us to leverage fast local storage. … OpenEBS has allowed us to not introduce a complicated distributed system into our platform. The adoption has been smooth and completely transparent to our end users.*\r\n\r\n## Limitations of Kubernetes LocalPV\r\n\r\nKubernetes expects users to make Persistent Volumes (PVs) available that it can then associate with PVCs during scheduling. Kubernetes does not help with dynamically creating these PVs as the applications are launched into the cluster.\r\n\r\nThis pre-provisioning can become an issue when companies have more than two people or teams managing the Kubernetes clusters, and the Application teams depend on the Kubernetes cluster administrators for provisioning the Volumes.\r\n\r\nWe have seen that cluster administrators are challenged by the following aspects:\r\n\r\n(a) The type of storage available on the Kubernetes nodes varies depending on how the Kubernetes nodes are provisioned. Available storage types include:\r\n\r\n- Nodes have only OS disks with large space that can be used for provisioning Local Volumes.\r\n- Nodes have one or two additional devices (SSDs or Disks) attached that can be used for provisioning Local Volumes.\r\n- Nodes have 8 to 16 high-performing NVMe SSDs.\r\n\r\n(b) And then, there is a matter of capacity available from the Local Storage and how to manage this to enable the freedom of developers and other consumers of capacity while retaining a level of oversight and assistance by centralized teams:\r\n\r\n(c) First, the platform or other centralized team may not know exactly what the capacity a particular team or workload needs - and the developer or data scientist may not know either. Dynamic provisioning within quotas means that users can keep moving without opening a ticket or having a conversation.\r\n\r\n(d) Secondly, there are many common operations tasks that need to be performed. Just because the applications are resilient does not mean these tasks entirely disappear. Administrators still would like to safeguard the data with best practices from years of experience in dealing with data such as:\r\n\r\n- Enforcing Capacity Limits/Thresholds\r\n- Securing the Volumes\r\n- Carving out the Local Volumes from well known or familiar file systems like LVM, ZFS, XFS, and so forth\r\n- Encrypting the Volumes\r\n- Enforce compliance with BCP by taking regular snapshots and full backups\r\n\r\nThis is where Kubernetes itself stops, and plugins like OpenEBS LocalPV options step into the auto-magically provision and manage the Local Volumes.\r\n\r\n## Selecting your LocalPV\r\n\r\nOpenEBS provides different types of Local Volumes that can be used to provide locally mounted storage to Kubernetes stateful workloads. The choice of the OpenEBS Local Volume depends on the type of local storage available on the node and the features required.\r\n\r\n- OpenEBS Hostpath Local PV - The use of the host path is the simplest, most used, and lowest overhead solution. This approach creates Local PVs by creating a sub-directory per Persistent Volume. This offers flexibility to create different classes of storage and allows administrators to decide into which parent or mounted directory the Persistent Volumes sub-directories should be placed. For example - a storage class for critical workloads vs. non-critical transient workloads, SSD vs. Hard Disk mounted paths, and so forth.\r\n- OpenEBS Raw file Local PV - The OpenEBS Raw file approach evolved out of the Hostpath approach due to considerable feedback from some OpenEBS community members. Raw file Local PV offers all the benefits of Hostpath Local PV - and in addition, Hostpath supports enforcing Capacity Quotas on Volume subdirectories by creating sparse files per volume.\r\n- OpenEBS Device Local PV - Device Local PV is best suited for cases where either a complete device or a partitioned device needs to be dedicated to the pod. Workloads like Cassandra or Kafka that need high throughput and low latency often use dedicated device Local PV.\r\n- OpenEBS ZFS and LVM Local PV - Both ZFS and LVM are selected by seasoned storage administrators that want to leverage all the good things of well-known filesystems or volume management along with the power of Local Volumes. This category offers features like full/incremental snapshots, encryption, thin-provisioning, resiliency against local disk failures by using software raid/mirror, and so forth. Incidentally, you can easily cause a fairly reasoned argument by asking users and community members, and even our own engineers to share their opinions about whether ZFS or LVM is more useful; I'm very happy that the community has progressed to the point that both solutions are now supported and widely deployed.\r\n\r\nI hope this overview of LocalPV options and OpenEBS Local has been useful. I plan to follow this with further blogs that get into the details of each flavor of the OpenEBS Local PV.\r\n\r\nIn the meantime, you can get started easily with [OpenEBS Local PV](https://docs.openebs.io/docs/next/overview.html), and the community is always available on the Kubernetes Slack #openebs channel.\r\n\r\nOr read more on what our OpenEBS users and partners have to say about Local PV. From our friends at 2nd Quadrant (now part of EDB): [Local Persistent Volumes and PostgreSQL usage in Kubernetes](https://www.2ndquadrant.com/en/blog/local-persistent-volumes-and-postgresql-usage-in-kubernetes/)\r\n\r\nAnd from one of the most broadly deployed Kubernetes distributions, Kubesphere: [OpenEBS Local PV is default Storage Class in Kubesphere](https://github.com/openebs/openebs/tree/master/adopters/kubesphere)\r\n\r\nOr, again, you can find more stories and can add your own to Adopters.MD on the OpenEBS GitHub: [https://github.com/openebs/openebs/blob/master/ADOPTERS.md](https://github.com/openebs/openebs/blob/master/ADOPTERS.md)\r\n","slug":"how-are-tiktok-flipkart-kubesphere-and-others-using-openebs-for-local-volumes"},{"id":4,"title":"OpenEBS NDM, go-to solution for managing Kubernetes Local Storage\r","author":"Akhil Mohan\r","author_info":"Software Engineer @ MayaData, working on Cloud Native Tech.\r","date":"13-01-2021\r","tags":["OpenEBS"],"excerpt":"Read about OpenEBS NDM, the go-to solution for managing Kubernetes Local Storage.\r","content":"\r\nEver since Local Volumes have become generally available (GA) in Kubernetes 1.14, the use of Local Volumes has skyrocketed. This can be attributed to the nature of cloud-native workloads distributed in nature and can sustain node failures. The bare metal underpinning Kubernetes clusters, both on-prem and cloud, can now be configured with local storage to manage stateful workloads. Kubernetes doesn’t treat storage like a native resource on par with CPU or Memory, making it a little difficult to make Kubernetes work out of the box to create effective node-attached storage. OpenEBS NDM helps alleviate this gap by discovering the different storage types attached to each worker node and then creating Kubernetes resources called block devices.\r\n\r\nApplication or storage operators can then use the information exposed via block devices to determine how to orchestrate the workloads best.\r\n\r\nOpenEBS NDM (Node Device Manager) has been declared GA after being deployed in production for several months as part of the OpenEBS control plane. With the release of version 1.0, NDM adds out-of-the-box support for partitions, LVMs, LUKS encrypted devices, in addition to the unique identification of virtual disks within the cluster. Now offering support for partitions, a single disk can be partitioned. Each partition will be considered a separate block device used by different storage engines like cStor / local PV. NDM also tracks the movement of the devices within a cluster across the nodes.\r\n\r\n## Key Storage Problems solved by NDM\r\n\r\n* Local Storage Discovery - detecting partitions, devices used as a LUKS device or LVM device, or if it can be accessed as a raw block device.\r\n* Cluster-wide storage visibility\r\n* Detect the movement of storage devices across nodes\r\n* Book-keeping/storage asset management  - allocating/reserving, which type of storage should be provided to which workloads.\r\n\r\n## Getting Started with NDM\r\n\r\nLet us see how NDM helps detect the block devices in the cluster with 3 nodes, each having a completely different disk configuration. The Disk configuration of the nodes are as follows:\r\n\r\nMaster: 2 virtual disks\r\n\r\nWorker1: 3 virtual disks, one being used by LUKS and two other disks which are partitioned, several partitions are being used as PV's by the LVM.\r\n\r\n![](https://lh3.googleusercontent.com/7r1RKQF4udqvigbryA6XFOxRuoOccQSFqhM5C_e27ArTSXnsXIXZk7b3lwgJm4C2VxxWj4rHoED-pZl4PS_KVkF_SC4D2-NLJzokpg2cqlP2upSNva5PLCaBKtQCBueUhWFYTtS9)\r\n\r\n\r\nWorker 2: 4 physical disks\r\n\r\n* Deploy NDM into the Kubernetes cluster along with OpenEBS LocalPV\r\n    ```\r\n    kubectl apply -f https://openebs.github.io/charts/openebs-operator-lite.yaml\r\n    ```\r\n    (The latest helm charts for deploying NDM are available [here](https://openebs.github.io/node-disk-manager/))\r\n\r\n* Once deployed, check the blockdevices present in the cluster using\r\n    ```\r\n    kubectl get bd -n openebs -o wide\r\n    ```\r\n\r\n![](https://lh4.googleusercontent.com/v-iVUrfW6v3wSaXmb06pbek7as_RfFTlRJCmsPzhmId460JIsP0LvXVDBkA0FUnBdO3yt203HqHIBYorT-nP6ZtCZTKdRcao0Ws3tlNyvz8yQF9ytQN_UXxbyO9ZFs6-PeLYHQOD)\r\n\r\nSome block devices show partitions that did not exist initially. E.g., sdb1 instead of sdb. This is because NDM creates a partition on virtual disks to identify the disk uniquely. Also, block device resources are now created for LVMs and LUKS encrypted devices. All the block devices listed above will now be treated as individual devices and can be used by any storage engine.\r\n\r\n* Deploy a sample application to use the block device\r\n\r\nDownload the minio yaml and apply it. (NOTE: A node selector has been added to the minio application pod so that it gets scheduled on worker-1)\r\n```\r\nkubectl apply -f [minio-official.yaml](https://gist.githubusercontent.com/akhilerm/194a1606c514d8930addcaef56f9f19f/raw/7d339e5042b4e5e958dde558f1f3509e26c214f3/minio-official.yaml)\r\n```\r\nNow check the status of block devices again  \r\n\r\n![](https://lh3.googleusercontent.com/A_JL0jXsZhmIPPrRYCSeMHVcPsey6ahFYV1_LVUapmbPLTrcgGEAao_ohbx9zU_SZl-lHmKGYgdMqh4czUCISSezbcOi4rznQNuX0sTAomO4y5HQLVYicTD4s1mPOZfUciacEOU_)\r\n\r\nWe can see that the device `dm-2`, is the LUKS device, has been claimed and used by the application.\r\n\r\n* Pool movement across nodes\r\n\r\n  NDM helps in seamlessly moving cStor pools from one node to another. Whenever the devices that constitute a pool are moved from one node to another (disconnecting disks from one node and reconnecting on another), the block device resource is updated with the latest information. NDM tracks this movement. cStor can use this information to migrate pools as required.\r\n\r\n* Reserving storage for workloads\r\n\r\n  NDM provides a feature to reserve devices for certain workloads. E.g., Users can reserve all SSDs for a performance intensive workload. This reservation is achieved using block-device-tags. More information on using block-device-tags with LocalPV can be found [here](https://docs.openebs.io/docs/next/uglocalpv-device.html#optional-block-device-tagging).\r\n\r\n## Future Roadmap\r\n\r\n* Southbound provisioning\r\n* Metrics (currently in alpha)\r\n* API Service to interact with NDM\r\n* Ability to create partitions or LVM volume groups - preparing storage in general.\r\n\r\n## Interested in Contributing to NDM?\r\n\r\nNDM is an OpenEBS project, which itself is a CNCF sandbox project. [OpenEBS on GitHub](https://github.com/openebs/node-disk-manager) is a great place to join if you want to contribute to our codebase. You can also interact with us on the OpenEBS channel in [Kubernetes Slack](https://kubernetes.slack.com/?redir=%2Fmessages%2Fopenebs%2F).","slug":"openebs-ndm-goto-solution-for-managing-kubernetes-local-storage"},{"id":5,"title":"Storage is Evolving!\r","author":"Nick Connolly\r","author_info":"Nick is the Chief Scientist at MayaData and a pioneer of storage virtualization, holding patents ranging from highly-scalable algorithms through to data protection techniques.\r","date":"11-12-2020\r","tags":["OpenEBS"],"excerpt":"Learn how storage has evolved over the years. \r","content":"\r\nBefore the turn of the century, storage systems were typically controlled by dedicated firmware running on custom hardware. These proprietary systems were time-consuming to design, expensive to build, and resistant to innovation.\r\n\r\nIn 1998, Software-Defined Storage was pioneered by DataCore Software with its SANsymphony suite of products, based on the realization that general-purpose computers had become fast enough to handle the demands of a high-performance storage stack. For context, this was an era when a system with more than two cores was a rarity and both memory and storage were measured in MBs! The primary protocol in use in the enterprise was SCSI, whether directly connected or accessed through a Fibre Channel network, response times were measured in the tens of milliseconds, and accessing storage over Ethernet using iSCSI was only just starting to be worked on.\r\n\r\n## The hardware environment is changing!\r\n\r\nIn the last few years, the hardware environment has changed significantly. Instead of the relentless drive for ever-increasing clock speeds, systems with over a hundred cores are now mainstream. Developing highly-performant algorithms that operate at this scale of parallelism is a complex and time-consuming process that, generally speaking, is uneconomic to pursue.  Storage media has also undergone a transformation, with SSDs based on flash memory delivering orders of magnitude better performance than spinning disks. Their response time, which can be measured in microseconds, has highlighted the inefficiencies of the decades-old SCSI protocol.\r\n\r\nNVMe is a ‘state of the art’ storage protocol for a new era. Designed from the ground up for maximum parallelism and lock-free operation, it offers up to 64k independent I/O queues each with 64k entries and a simplified command set. Connected over PCIe, it delivers low latency and high bandwidth data directly to an application, enabling it to fully utilize the capabilities of the underlying flash memory. NVMe over Fabrics (NVMe-oF) provides network access to remote storage and targets less than 10 microseconds in additional latency.\r\n\r\n## Application development is changing!\r\n\r\nRather than building the large monolithic codebases that were the norm at the turn of the century, modern development practices are based around composable architectures; containerized microservices that scale dynamically to meet performance requirements. For more background on this trend, see my [earlier post](https://www.datacore.com/blog/5-changes-that-are-reshaping-software-development/) and the excellent articles in [MayaData’s blog](https://blog.mayadata.io/). Kubernetes is rapidly becoming the control plane for the enterprise.\r\n\r\n## A New Era\r\n\r\n![New Era](https://lh3.googleusercontent.com/5C8pUrteH4V8JB1li4myidOdIP1xAefDES3ksqG1SaxFX4YHhFZz2gX-tNQV7n4UVuHS-BvZejBVnDnLJiwte6LgGgHN2dzsKDKxC2cd-popha9Ljnw9CWNQ2JUvL_1a2F-w8x0i)\r\n\r\nA new era requires a new kind of storage stack! A stack that is based around today’s technologies rather than being anchored to the last century. A stack that is portable and flexible. A stack that supports rapid innovation. That delivers the performance that applications require.\r\n\r\n## Container Attached Storage\r\n\r\nThe new category of [Container Attached Storage](https://www.cncf.io/blog/2018/04/19/container-attached-storage-a-primer/), of which OpenEBS is the de-facto open source standard, orchestrates the storage stack with the same flexibility as the application.  Implemented as a microservices based architecture, it runs within Kubernetes and gives users the freedom to define the way that they want to access, protect, and manage their data. The days of the dedicated storage administrator are coming to an end!\r\n\r\nFor Mayastor, the latest storage engine to be added to OpenEBS, flexibility, and performance are achieved by basing the stack around the [Storage Platform Development Kit (SPDK)](https://spdk.io/), which provides a set of tools and libraries for writing high performance, scalable, user-mode storage applications. Based on the NVMe protocol, it delivers blistering performance from today’s hardware as well as being ready for the next generation of Intel Optane based SSDs that are just becoming available. For more details, see some [recent results](https://openebs.io/blog/mayastor-nvme-of-tcp-performance/).\r\n\r\n## Microsoft Windows\r\n\r\nHowever, amid all the discussions about flexibility and portability, there is one small footnote that often goes unnoticed: ‘not *supported on Windows*’. It’s understandable, because most of the projects that are shaping this new era have their roots on Linux or FreeBSD, but it overlooks the sheer scale of Windows Server deployments in enterprise environments. Things are changing, with significant investments being made in Kubernetes on Windows, but it’s a slow process; one project at a time!\r\n\r\nMayaData’s mission is to enable data agility - so we were uncomfortable with our high-performance Container Attached Storage solution, OpenEBS Mayastor, not being available on Windows platforms. With that in mind, we have created the [Windows Platform Development Kit (WPDK)](https://github.com/wpdk/wpdk) to act as a foundational layer to make it easier to port the SPDK to Windows. In addition, we are working with the SPDK community to make a few changes to the code base to support this.  It is a testament to the quality of the excellent SPDK project that so few changes have been required so far.\r\n\r\nThe project also benefits from the work done by the DPDK on Windows community who has invested a significant amount of time porting the underlying [Data Plane Development Kit (DPDK)](https://www.dpdk.org/), a Linux Foundation project that consists of libraries to accelerate packet processing workloads running on a wide variety of CPU architectures.\r\n\r\n## Windows Platform Development Kit\r\n\r\n![Windows Platform Development Kit](https://lh4.googleusercontent.com/UDp5t-uCJeM6QlsMpoZCz-oxp2CyYDPS1BMhkdeaXn4asIPhdLzy0GLG74xdceDyWAa8bCrijsMLOZfrwKC7vQyQLNS-uGJbGLXyeDtBljMvMNDQphRtcfgMJ65mhZBTC7v6wFwg)\r\n\r\nThe MayaData developed and contributed Windows Platform Development Kit has currently reached ‘alpha’. Most of the required functionality is believed to be present, unit tested, and working correctly, but there are still areas that need further development.\r\n\r\nIt is possible to build the SPDK tree, run the associated unit tests, serve an iSCSI target on Windows, and mount it as a volume.\r\n\r\nIt is anticipated that this collaboration will deliver the following benefits to Windows users:\r\n\r\n1. Enable high-performance access to NVMe storage directly from applications.\r\n2. Native software-defined storage stacks, including OpenEBS Mayastor.\r\n3. Support for NVMe-oF adaptors from manufacturers such as Mellanox and Broadcom.\r\n\r\nThe Windows Platform Development Kit is open source, under a BSD-3 clause license. Community contributions are welcomed and needed! To get started please head to [https://wpdk.github.io](https://wpdk.github.io) or access the WPDK code and documentation on [GitHub](https://github.com/wpdk/wpdk).","slug":"storage-is-evolving"},{"id":6,"title":"OpenEBS on DigitalOcean Marketplace\r","author":"Abhishek\r","author_info":"Abhishek is a Customer Success Engineer at Mayadata. He is currently working with Kubernetes and Docker.\r","date":"3-12-2020\r","tags":["OpenEBS"],"excerpt":"Learn how to deploy OpenEBS on the DigitalOcean marketplace\r","content":"\r\nDeploying OpenEBS on DigitalOcean can directly be done from the console. DigitalOcean provides the feature to create a cluster with OpenEBS deployed on it already. To get started, follow the below-mentioned steps:\r\n\r\nWORKFLOW:\r\n\r\n![Workflow](https://lh3.googleusercontent.com/fQOb_mUG5ebZ4eu2eLCZw4WFIiG_LOUgk2xXj4tBsXokE1oMu5H4SQDcx1jgbpLYBBn4gVpeDOwgU_DhagUjyHi4_kFL3evGUjVTIfkY3Xdf6071c6XWO6AoJ5PruG5f1njtvaJm)\r\n\r\nSTEP 1: Getting started  \r\nLogin to your [DigitalOcean](https://cloud.digitalocean.com/login) account.\r\n\r\nSTEP 2: Creation of cluster  \r\nOnce you log in, you arrive at the dashboard, click on Marketplace under DISCOVER located on the left sidebar.\r\n\r\nNext, scroll down to find OpenEBS. On clicking, you will be redirected to a page where you will find the details about OpenEBS and the Create OpenEBS button on the right side.\r\n\r\nNext, you need to provide the necessary details such as Data Center region, cluster capacity, cluster name, etc. (It is advisable to provision 3 nodes with 4vCPUs and 8 GB memory to ensure that the resources are sufficient at all times.)\r\n\r\n![Creation of cluster](https://lh3.googleusercontent.com/zvcGjrkGegKSp-t29NQf5XPHzCf6LqRn-XFJuRsxNZBfopwNibKiUwBDo9KSFGTWub6tEqLnl_IWKtCTykql315aqUlTqa7U1ORYJ5H4OmIhdVeHArPmRELvKk94GFLIbui9LJTx)\r\n\r\nSTEP 3: Connecting your cluster\r\nCreation, resizing, and deletion can be carried out from UI, but you require command-line tools from your local machine or a remote management server to perform administrative tasks. The detailed steps to install the management tools and connect the cluster to your local machine can be found under the Overview section.\r\n\r\n![Connecting your cluster](https://lh4.googleusercontent.com/5ftx1DgzSOKXRQ_UdiMmakqRMdOMnyes7n0l7kT23t50dSloHosbqAgx7zH2hqaMhE77KIoKINERafGDCyPgZbvnGNQ27oIvpeNm7YqCjGv-6lx9aAgQMSoHiE4j8BrdYABdPg7K)\r\n\r\nTo verify, execute the following command:\r\n\r\n```\r\n$ kubectl get ns\r\n```\r\n\r\nOutput:\r\n```\r\nNAME     STATUS    AGE\r\ndefault  Active    13m\r\nopenebs  Active    13m\r\n```\r\nThe output must contain openebs ns in an Active state.\r\n\r\nNext, execute:\r\n\r\n```\r\n$ kubectl get pods -n openebs\r\n```\r\n\r\nOutput:\r\n```\r\nNAME                                                 READY     STATUS    RESTARTS AGE\r\nopenebs-admission-server-5c4d545647-r4vgr            1/1       Running   0        13m\r\nopenebs-apiserver-56f77c9965-xft68                   1/1       Running   2        13m\r\nopenebs-localpv-provisioner-64c67b5b89-czv8b         1/1       Running   0        13m\r\nopenebs-ndm-5f6nt                                    1/1       Running   0        13m\r\nopenebs-ndm-74njq                                    1/1       Running   0        13m\r\nopenebs-ndm-operator-7bc769dcff-b45bc                1/1       Running   1        13m\r\nopenebs-ndm-spttv                                    1/1       Running   0        13m\r\nopenebs-provisioner-755f465f9d-fr67l                 1/1       Running   0        13m\r\nopenebs-snapshot-operator-7988fc8646-zpd98           2/2       Running   0        13m\r\n```\r\nAll the pods must be in a running state.\r\n\r\nSTEP 4: Attaching BlockDevices  \r\nTo attach BlockDevices to the created nodes, click on Volumes on the left sidebar and then click on the Add Volume button.\r\n\r\n![Adding Volume](https://lh3.googleusercontent.com/D96l0ASgsYCKEoenZQS7r-i_bdmLMlQ2PxcxYGqYLilrFospNmLmnVwfZAT-VYBHvSP31U70bgjdo0WhUbSuDfM0mU84s3-BopEd0vxuEHlZg64cnzIwO7LlLPc9RjhL5ResDD0-)\r\n\r\nNext, select the volume size ( provision at least 30 GB), select the node(droplet) to which it gets attached and provides a name, then click on the Create Volume button. Repeat these steps for each node (droplet).\r\n\r\n![Attaching BlockDevices](https://lh3.googleusercontent.com/i2IkMHV3CmVK8_fgiWMtiXhqlbkWGyCoCXaz4a0hXAR49WEuzXg6s7lbMEZFGr6oXLLFVAsLTfgJTELlrMKTE4mi5aNjDSMKMZn9XCMCGlWLpeUaaC4VsRg2xFPgw0tXLuG2T2uq)\r\n\r\nNOTE:\r\n\r\n*For cStor, choose Manually Mount and Format under Choose Configuration Options.*\r\n\r\n*For Jiva, choose Automatically Format and Mount under Choose Configuration Options.*\r\n\r\n*After the BlockDevices get attached for all the nodes, you can see an output similar to the below image.*\r\n\r\n![Output after the BlockDevices get attached for all the nodes](https://lh4.googleusercontent.com/i9KOccFfCGjP-Q3E2KpR0YOV3EXDfTin4RbNZbgo9A0PTSYRUj8E989KqnzHYXMigbfE0FZWK1_V0Jg_lAvZKN9iShkxLIyMFGmO9uVEYWhcosL-xUNc-VnrXpYcbu1VDKE-5zOT)\r\n\r\nNext, you have to provision OpenEBS volumes.  Click [here](https://docs.openebs.io/docs/next/ugcstor.html#provisioning-a-cStor-volume) to know more.","slug":"openebs-on-digitalocean-marketplace"},{"id":7,"title":"Atlassian Jira Deployment on OpenEBS\r","author":"Abhishek\r","author_info":"Abhishek is a Customer Success Engineer at Mayadata. He is currently working with Kubernetes and Docker.\r","date":"20-11-2020\r","tags":["OpenEBS"],"excerpt":"Learn how to deploy Atlassian Jira on OpenEBS in this short post.\r","content":"\r\n***Jira*** Software is part of a family of products designed to help teams of all types manage work. Originally, **Jira** was designed as a bug and issue tracker. But today, **Jira** has evolved into a powerful work management tool for all kinds of use cases, from requirements and test case management to agile software development.\r\n\r\n## Requirements\r\n\r\n#### Install OpenEBS\r\n\r\nIf OpenEBS is not installed in your K8s cluster, this can be done from [here](https://docs.openebs.io/docs/next/installation.html). If OpenEBS is already installed, go to the next step.\r\n\r\n#### Configure cStor Pool\r\n\r\nIf cStor Pool is not configured in your OpenEBS cluster, this can be done from [here](https://docs.openebs.io/docs/next/ugcstor.html#creating-cStor-storage-pools). Sample YAML named **openebs-config.yaml** for configuring cStor Pool is provided:\r\n\r\n```\r\n#Use the following YAMLs to create a cStor Storage Pool.\r\n# and associated storage class.\r\napiVersion: openebs.io/v1alpha1\r\nkind: StoragePoolClaim\r\nmetadata:\r\n  name: cstor-disk\r\nspec:\r\n  name: cstor-disk\r\n  type: disk\r\n  poolSpec:\r\n    poolType: striped\r\n  # NOTE - Appropriate disks need to be fetched using `kubectl get blockdevices -n openebs`\r\n  #\r\n  # `Block devices` is a custom resource supported by OpenEBS with `node-disk-manager`\r\n  # as the disk operator\r\n# Replace the following with actual disk CRs from your cluster `kubectl get blockdevices -n openebs`\r\n# Uncomment the below lines after updating the actual disk names.\r\n  blockDevices:\r\n    blockDeviceList:\r\n# Replace the following with actual disk CRs from your cluster from `kubectl get blockdevices -n openebs`\r\n#   - blockdevice-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n#   - blockdevice-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n#   - blockdevice-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n\r\n---\r\n```\r\n\r\n#### Create Storage Class\r\n\r\nYou must configure a StorageClass to provision cStor volume on the cStor pool. In this solution, we are using a StorageClass to consume the cStor Pool, which is created using external disks attached to the Nodes. Since Jira is a deployment application, it requires three replications at the storage level. So cStor volume replicaCount is 3. Sample YAML named **openebs-sc-disk.yaml** to consume cStor pool with cStor volume replica count as 3 is provided:\r\n\r\n```\r\napiVersion: storage.k8s.io/v1\r\nkind: StorageClass\r\nmetadata:\r\n  name: openebs-cstor-disk\r\n  annotations:\r\n    openebs.io/cas-type: cstor\r\n    cas.openebs.io/config: |\r\n      - name: StoragePoolClaim\r\n        value: \"cstor-disk\"\r\n      - name: ReplicaCount\r\n        value: \"3\"       \r\nprovisioner: openebs.io/provisioner-iscsi\r\nreclaimPolicy: Delete\r\n```\r\n\r\n### Deployment of Jira\r\n\r\nSample Jira Yaml:\r\n\r\n```\r\napiVersion: extensions/v1beta1\r\nkind: Deployment\r\nmetadata:\r\n  labels:\r\n    app: jira\r\n  name: jira\r\nspec:\r\n  replicas: 1\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app: jira\r\n      name: jira\r\n    spec:\r\n      containers:\r\n        - name: jira\r\n          image: \"doriftoshoes/jira:7.3.6\"\r\n          resources:\r\n            requests:\r\n              cpu: \"2\"\r\n              memory: \"2G\"\r\n          volumeMounts:\r\n            - name: \"jira-home\"\r\n              mountPath: /opt/jira-home\r\n      volumes:\r\n        - name: jira-home\r\n          persistentVolumeClaim:\r\n            claimName: demo-vol1-claim\r\n---\r\napiVersion: v1\r\nkind: Service\r\nmetadata:\r\n  labels:\r\n    app: jira\r\n  name: jira\r\nspec:\r\n  ports:\r\n    - port: 8080\r\n      targetPort: 8080\r\n  selector:\r\n    app: jira\r\n  type: LoadBalancer\r\n---\r\nkind: PersistentVolumeClaim\r\napiVersion: v1\r\nmetadata:\r\n  name: demo-vol1-claim\r\nspec:\r\n  storageClassName: openebs-cstor-disk\r\n  accessModes:\r\n    - ReadWriteOnce\r\n  resources:\r\n    requests:\r\n      storage: 10G\r\n```\r\n\r\nNext, apply both the ***Jira deployment*** and service to your Kubernetes cluster.\r\n\r\n```\r\nkubectl apply -f jira.yaml\r\n```\r\n\r\n#### Verify Jira Pods:\r\n\r\n#### Run the following to get the status of Jira pods:\r\n\r\n```\r\nkubectl get pods\r\n```\r\n\r\nFollowing is an example output:\r\n\r\n```\r\nNAME                    READY   STATUS    RESTARTS   AGE\r\njira-5xxxxxxxx-2xxxx    1/1     Running   0          1d12h\r\n```\r\n\r\nThat's it for today's blog. Thanks for reading. Please leave your questions or feedback, if any, in the comment section below.","slug":"atlassian-jira-deployment-on-openebs"},{"id":8,"title":"Mayastor NVMe-oF TCP performance\r","author":"Jeffry Molanus\r","author_info":"Jeffry is the CTO at MayaData. At MayaData, his primary focus is to make sure the product is flexible and scalable. When he is not working with code, he practices martial arts.\r","date":"19-11-2020\r","tags":["Mayastor"],"excerpt":"Overview of using Mayastor to try out some of the fastest NVMe devices currently available on the market and see how we perform on top of these devices within k8s, using the container attached storage approach for which OpenEBS is well known.\r","content":"\r\nFor a while now, we have been saying that OpenEBS Mayastor is “high” performance and community members have written [blogs](https://medium.com/volterra-io/kubernetes-storage-performance-comparison-v2-2020-updated-1c0b69f0dcf4) showing that the performance of OpenEBS Mayastor indeed is much better or on par with others even when running on relatively slow cloud volumes. However, is Mayastor high performance or just “as fast” as the other things out there? \r\n\r\nIt used to be the case that CPUs were much faster than the storage systems they served. With modern NVMe, this does not ***have*** to be the case anymore. NVMe is a ***protocol*** that can go fast but does not have to be fast. What this means is that you can use NVMe as your transport protocol for any block device, not just flash. Yes, this is what Mayastor does. It is really useful to keep in mind the distinction between NVMe as a protocol and NVMe devices - you don’t need to use them together but, when you do, additional performance can be unlocked.\r\n\r\nIn this blog, we will be using Mayastor to try out some of the fastest NVMe devices currently available on the market and see how we perform on top of these devices within k8s, using the container attached storage approach for which OpenEBS is well known. We will show what happens when you marry NVMe as a protocol (embedded within Mayastor) and fast NVMe devices from our friends at Intel.\r\n\r\nBefore we get started, you might wonder how we came to this point that a new project like OpenEBS Mayastor was able to deliver amongst the fastest storage available today. Richard Elling of Viking / Sanmina recently wrote an excellent blog on the trends in hardware design that puts NVMe and OpenEBS Mayastor into context:  [https://richardelling.substack.com/p/the-pendulum-swings-hard-towards](https://richardelling.substack.com/p/the-pendulum-swings-hard-towards)\r\n\r\n## Hardware setup\r\n\r\nLet’s get to it. We will be using three machines that will run kernel version 5.8. The hardware configuration of each host is as follows:\r\n\r\n- Intel(R) Xeon(R) Gold 6252 CPU @ 2.10GHz\r\n- Intel Corporation NVMe Datacenter SSD [Optane]\r\n- Mellanox Technologies MT28908 Family [ConnectX-6]\r\n\r\n## Baseline performance\r\n\r\nTo understand the performance of the device we will be using throughout the test, we run the following Fio workload:\r\n\r\n    [global]\r\n    ioengine=linuxaio\r\n    thread=1\r\n    group_reporting=1\r\n    direct=1\r\n    norandommap=1\r\n    bs=4k\r\n    numjobs=8\r\n    time_based=1\r\n    ramp_time=0\r\n    runtime=300\r\n    iodepth=64\r\n    \r\n    \r\n    [random-read-QD64]\r\n    filename=/dev/nvme1n1\r\n    rw=randread\r\n    stonewall\r\n    \r\n    \r\n    [random-write-QD64]\r\n    filename=/dev/nvme1n1\r\n    rw=randwrite\r\n    stonewall\r\n    \r\n    \r\n    [random-rw-QD64]\r\n    filename=/dev/nvme1n1\r\n    rw=randrw\r\n    stonewall\r\n\r\n![Mayastor NVME](/images/blog/mayastor-nvme1.png)\r\n\r\nThese numbers are incredibly high and are provided by a ***single*** device. Note that the benchmark itself is rather synthetic in the sense that, in practice, no workload is 100% random.\r\n\r\n## High-level overview of the experiments\r\n\r\nMy approach in this benchmarking is very much OpenEBS Mayastor “the hard way”.  If you want an easier to use solution that for example automates pool creation and device selection and so on - we call that offering Kubera Propel (also open source btw). You can learn more about Kubera Propel on the [MayaData.io](https://mayadata.io/) website.    \r\n\r\nOn two of the nodes, we create a pool (MSP CRD) which we use in the control plane to determine replica placement. To construct pools, we must have what we call a persistence layer. We support several ways to access this persistence layer. To select a particular scheme we use URIs. In this case we will be using today the pcie:/// scheme. This means that Mayastor will directly write into the NVMe devices listed above. The nice thing is that from the user perspective, things do not change that much. We simply replace disks: [‘/dev/nvme0n1’] with disks: [‘pcie:///80:00.0’]. Note that this persistence layer is used to store the replicas of the PVC. Once we have this layer up and running, we will create storage classes and select that we want to use nvmf (NVMe-oF) as the transport layer between the replicas, resulting in NVMe all the way through. \r\n\r\nAfter we have deployed mayastor we applied to following two storage classes:\r\n\r\n    kind: StorageClass\r\n    apiVersion: storage.k8s.io/v1\r\n    metadata:\r\n      name: nvmf\r\n    parameters:\r\n      repl: '1'\r\n      protocol: 'nvmf'\r\n    provisioner: io.openebs.csi-mayastor\r\n    ---\r\n\r\n    kind: StorageClass\r\n    apiVersion: storage.k8s.io/v1\r\n    metadata:\r\n      name: nvmf-mirror\r\n    parameters:\r\n      repl: '2'\r\n      protocol: 'nvmf'\r\n    provisioner: io.openebs.csi-mayastor\r\n\r\nNote that `protocol: `nvmf` is just a shorthand for the NVMe-oF format mentioned above. We will be using both storage classes to run a single replica followed by a two way replica AKA mirror.  We use the following YAML to create the volume.\r\n\r\n    apiVersion: v1\r\n    kind: PersistentVolumeClaim\r\n    metadata:\r\n      name: ms-volume-claim\r\n    spec:\r\n      accessModes:\r\n       - ReadWriteOnce\r\n      resources:\r\n        requests:\r\n          storage: 100G\r\n      storageClassName: nvmf\r\n\r\nAfter creating the PVC, Mayastor’s control plane creates a CRD, “Mayastor Volume” (MSV), that contains additional information about the corresponding volume.  Using kubectl describe msv -n mayastor we get:\r\n\r\n    Name:         ba081dc3-46db-445b-969c-7e5245aba146\r\n    Namespace:    mayastor\r\n    Labels:       <none>\r\n    Annotations:  <none>\r\n    API Version:  openebs.io/v1alpha1\r\n    Kind:         MayastorVolume\r\n    Metadata:\r\n      Creation Timestamp:  2020-09-11T08:49:30Z\r\n      Generation:          1\r\n      Managed Fields:\r\n        API Version:  openebs.io/v1alpha1\r\n        Fields Type:  FieldsV1\r\n        fieldsV1:\r\n          f:spec:\r\n            .:\r\n            f:limitBytes:\r\n            f:preferredNodes:\r\n            f:replicaCount:\r\n            f:requiredBytes:\r\n            f:requiredNodes:\r\n          f:status:\r\n            .:\r\n            f:nexus:\r\n              .:\r\n              f:children:\r\n              f:deviceUri:\r\n              f:state:\r\n            f:node:\r\n            f:reason:\r\n            f:replicas:\r\n            f:size:\r\n            f:state:\r\n        Manager:         unknown\r\n        Operation:       Update\r\n        Time:            2020-09-11T08:51:18Z\r\n      Resource Version:  56571\r\n      Self Link:         /apis/openebs.io/v1alpha1/namespaces/mayastor/mayastorvolumes/ba081dc3-46db-445b-969c-7e5245aba146\r\n      UID:               94e11d58-fed9-44c9-9368-95b6f0712ddf\r\n    Spec:\r\n      Limit Bytes:  0\r\n      Preferred Nodes:\r\n      Replica Count:   1\r\n      Required Bytes:  100000000000\r\n      Required Nodes:\r\n    Status:\r\n      Nexus:\r\n        Children:\r\n          State:     CHILD_ONLINE\r\n          Uri:       bdev:///ba081dc3-46db-445b-969c-7e5245aba146\r\n        Device Uri:  nvmf://x.y.z.y:8420/nqn.2019-05.io.openebs:nexus-ba081dc3-46db-445b-969c-7e5245aba146\r\n        State:       NEXUS_ONLINE\r\n      Node:          atsnode3\r\n      Reason:\r\n      Replicas:\r\n        Node:     node3\r\n        Offline:  false\r\n        Pool:     pool-atsnode3\r\n        Uri:      bdev:///ba081dc3-46db-445b-969c-7e5245aba146\r\n      Size:       100000000000\r\n      State:      healthy\r\n    Events:       <none>\r\n\r\n## Results single replica\r\n\r\n![Table (% difference of Mayastor overhead)](/images/blog/mayastor-nvme2.png)\r\n\r\n![Chart](https://lh5.googleusercontent.com/whpgDl_Id_oo4tUdl7RZDv-C1Uq2ZfvM6Eh7KXbwNkNTu5Mki14meunBgF1PMWMnWLoccSGgHqCfRKXgQpJTfQG42NaS0GkwWRCuNpWGh7znOhqQ94aJXiCODJkzNUs9-G2ucqMJ)\r\n\r\nFrom the results we can see that we are very close to the performance of the local device. To be sure we can put it in the right perspective, the difference between the experiments here is that with the baseline, the workload was local. With repl=1 we use the same NVMe device but export it through our pool layer (and thus provide volume management), but also go over the network.\r\n\r\n## Results 2 replicas (mirror)\r\n\r\nWe are going to repeat the same test, this time, we will use two replicas. As we now have double the disks bandwidth, we expect to see that the read performance will go up. For writes, however, we actually expect a drop in performance, because we must do each write to both disks before we can acknowledge the IO.  Note that Mayastor does not cache - if you read the blog referenced above from Richard Elling you can learn why caching seems to be falling out of favor for use cases in which millions of IOPS are desired.\r\n\r\n![Mayastor nvme](/images/blog/mayastor-nvme3.png)\r\n\r\n[Chart](https://lh4.googleusercontent.com/GJ7c_cZ6vuDxd9-jAnU3XxAc8L0idA9sscz2JB5XVa0taj8v56H6MSIFB56XqPQzQsy_p49-yHlwhCB8SVjZ05YfT0oRdlFt0EMBze1IDrCioqWgtWypidK9fBpb9p3ULI19Dhfa)\r\n\r\n## Wrapup\r\n\r\nWith the above experiments, we have demonstrated that with OpenEBS Mayastor we have built a foundational layer that allows us to abstract storage in a way that Kubernetes abstracts compute. While doing so, the user can focus on what's important -- deploying and operating stateful workloads. \r\n\r\nIf you’re interested in trying out Mayastor for yourself, instructions for how to setup your own cluster, and run a benchmark like **fio** may be found at [mayastor.gitbook.io/](https://mayastor.gitbook.io/introduction/).\r\n\r\nAnd if you are a Kubera Propel user, you’ll find that we’ve productized some of the benchmarking above so that platform teams and other users can programmatically use benchmarks in their decisions about workload placement. We are working with a number of users about operating OpenEBS Mayastor / Kubera Propel at scale. Please get in touch if you have suggestions, feedback, ideas for interesting use cases and so on. Contributions of all kinds are welcome!\r\n","slug":"mayastor-nvmeof-tcp-performance"},{"id":9,"title":"Mayastor Engine Reaches Beta\r","author":"Glenn Bullingham\r","author_info":"Director of Solution Architecture\r","date":"19-11-2020\r","tags":["OpenEBS"],"excerpt":"Mayastor, the storage engine by OpenEBS has reached the beta stage. Read the blog to know more.\r","content":"\r\ntitle: Mayastor Engine Reaches Beta\r\nAs I write this, it is early November, and the winds of change are blowing. The United States has a new president. Here in the United Kingdom, Keats' days of mists and mellow fruitfulness are departing, replaced by a low sun and the first morning frosts. And at MayaData, we see the Mayastor project carefully but tenaciously emerging from alpha/pre-release into its beta phase. In fact, Mayastor now undergirds MayaData’s commercial offering for performance sensitive containerized workloads, called [Kubera Propel](https://mayadata.io/product).\r\n\r\n> ***“Beta Software: Software considered to be feature complete and substantially free of known major defects”***\r\n\r\nSignificant contributions over the past 18 months have seen the project raised from concept to working software. A major requirement of our MVP specification is that it should carry minimal performance overhead; Mayastor is intended to satisfy demands for performance at all levels of scale. At the beginning of Autumn, working in conjunction with Intel’s labs in the UK, we were able to validate that assertion; deployed in conjunction with the latest generation of Optane NVMe devices, the Mayastor data plane was found to introduce less than 6% overhead; you can read more about that benchmarking [here](https://openebs.io/blog/mayastor-nvme-of-tcp-performance/). Having addressed that performance criteria and the other principle MVP requirements, the Mayastor team at MayaData has begun to focus its contributions to the project on QA as we approach Beta and GA releases.\r\n\r\nIn particular, we’ve greatly increased end-to-end test coverage on Kubernetes. How MayaData tests Mayastor is something that I’ll elaborate upon in a forthcoming post.  However, suffice it to say customary suspects feature (Jenkins, mocha, nix, cargo test), whilst we’re also collaborating with our colleagues who maintain the [Litmus Chaos](https://litmuschaos.io/) project. By the time that you’re likely reading this, Mayastor-specific chaos tests should be available to all on [ChaosHub](https://hub.litmuschaos.io/).\r\n\r\n## Ease of Use, Perf, and Availability\r\n\r\nMayastor MVP requirements center on ease of use, performance, and availability. In the Beta phase and subsequent GA release, these will be realized as a CAS platform with full NVMe data path semantics, declarative configuration via CSI compliant dynamic provisioning, and N+1 synchronous mirroring of data at the persistent layer. This closely approaches functional parity with the current OpenEBS storage engines (cStor, Jiva, and Local PV), with snapshot and cloning functionality to be added in Q1 2021. Mayastor will also very soon be the recipient of a streamlined deployment and configuration experience, which is exclusive to this engine.\r\n\r\n## Try it Yourself\r\n\r\nIf you’re a member of the Kubernetes community looking to implement a platform-native storage solution in the new year, now is an ideal time to start evaluating Mayastor. The other venerable and respected engines of OpenEBS won’t be retiring overnight, but as full feature parity emerges, MayaData’s commercial products and services will on Mayastor as their default storage engine; we do recognize that some users will continue to prefer various flavors of Dynamic Local PV from OpenEBS - as a recent [blog](https://www.percona.com/blog/2020/10/01/deploying-percona-kubernetes-operators-with-openebs-local-storage/) from the CTO of Percona attests as do countless [Adopter.md case studies](https://github.com/openebs/openebs/blob/master/ADOPTERS.md) including that of the SaaS company Optoro, also a CNCF case study. Mayastor’s roadmap includes provisions for the inward migration of existing OpenEBS users. It’s an equally opportune moment to [consider becoming a contributor](https://github.com/openebs/Mayastor/issues/new/choose) to the project yourself.\r\n\r\nTo help with Mayastor onboarding as we prepare to go to full steam, we’re putting together a new documentation site over at[ GitBook](https://mayastor.gitbook.io/introduction/), which includes a comprehensive quick-start deployment guide (developer docs will remain, at least for now, with the OpenEBS/Mayastor GitHub repository). We’re also holding [Office Hours at Kubecon NA 2020 this month](https://kccncna20.sched.com/?searchstring=OpenEBS&amp;iframe=no&amp;w=&amp;sidebar=&amp;bg=), and we’d love to see you there.\r\n\r\nIf you’d like to try Mayastor from the source - you can do so, of course, from the GitHub repositories. If you’d like to also try out management utilities, including a cool management interface and available 24x7 support - please take a look at [Kubera Propel](https://go.mayadata.io/register-for-kubera-chaos-and-propel-technical-preview). A free forever for individual use tier is available.\r\n\r\n## Conclusion\r\n\r\nIt is a propitious time for MayaData and Mayastor - and for data on Kubernetes more broadly. If you have always wanted to run workloads on Kubernetes but were put off by the stories of performance challenges, you can now move forward with confidence. Kubernetes enabled storage with the help of Mayastor performs faster than that of traditional shared everything storage while retaining the ease of use, open source community, and Kubernetes semantics for which OpenEBS has become famous.\r\n","slug":"mayastor-engine-reaches-beta"},{"id":10,"title":"Migrate CSPIs to a different node by moving the disks\r","author":"Sai Chaithanya\r","author_info":"A developer who is always eager to learn, loves algorithms, maths, Kubernetes, and programming, passionate about Data Science. Enjoys playing kabaddi and traveling.\r","date":"04-11-2020\r","tags":["OpenEBS"],"excerpt":"Step by step guide to migrate CStorPoolInstances from one node to different nodes by moving the set of underlying disks\r","content":"\r\nThis blog describes steps to migrate CStorPoolInstances from one node to different nodes by **moving the set of underlying disks to a new node that participates in the pool provisioning**. There were a couple of use cases where this feature can be helpful:\r\n\r\n1. Scaling down and scaling up nodes in the cluster(in a cloud environment) by retaining external volumes(for cost savings).\r\n2. Replacing failed storage nodes with new nodes by attaching the same old disks to the new node.\r\n\r\n**Steps to migrate the CSPI to different node:**\r\n\r\n1. Detach the disks belonging to the CSPI that you wish to migrate from the node and attach it to the new node. If you are using a cloud platform, check on their documentation, or ask the administrator about the steps to do this.\r\n2. Change the node selector in the CSPC YAML (next section describes how to do this).\r\n\r\n![](https://lh4.googleusercontent.com/XTwKu6lE3lyoZ3cHRO9HNJGUaTOoGfE-OWGuscrmukbxEKJNPSaEqxUPbbNnnc3dcD-Aybc2_AF0y2Scf0QBxSDG_f9QZWRu67sXZjoMKO6nymhgelEWfDzPjfGKi4D9UwLBaN0D)\r\n\r\n**Existing setup**:\r\n\r\nI have a three-node cluster with CSPC and CSI volumes already provisioned(To create CSPC pools and CSI volume click [here](https://github.com/openebs/cstor-operators/blob/master/docs/quick.md#quickstart)). Here is detailed information:\r\n\r\n**Cluster details**:\r\n\r\n    Kubernetes Cluster: AWS\r\n    Kubernetes Version: v1.15.9\r\n    OpenEBS Version: 2.2.0\r\n\r\n**Node and BlockDevice details**: Attached three disks to three nodes(each node has one disk)\r\n\r\n    Kubectl get nodes\r\n\r\n    NAME                STATUS   ROLES    AGE   VERSION\r\n    ip-192-168-29-151   Ready    <none>   16m   v1.15.9\r\n    ip-192-168-36-89    Ready    <none>   8h    v1.15.9\r\n    ip-192-168-74-129   Ready    <none>   8h    v1.15.9\r\n\r\n    Kubectl get bd -n openebs\r\n    NAME                                           NODENAME          SIZE          CLAIMSTATE   STATUS\r\n    blockdevice-7d311a98255a454a717427b5c2d38426   ip-192-168-36-89  10737418240   Claimed      Active\r\n    blockdevice-c2c846cce1befec7fbdcbae254329b0b   ip-192-168-74-129 10737418240   Claimed      Active\r\n    blockdevice-c608881cd3edbeab674a1aee7e0a1fc3   ip-192-168-29-151 10737418240   Claimed      Active\r\n\r\n**CSPC Manifest**: Applied following CSPC manifest to provision cStor pools\r\n\r\n    apiVersion: cstor.openebs.io/v1\r\n    kind: CStorPoolCluster\r\n    metadata:\r\n      name: cstor-disk-cspc\r\n      namespace: openebs\r\n    spec:\r\n      pools:\r\n        - nodeSelector:\r\n            kubernetes.io/hostname: \"ip-192-168-74-129\"\r\n          dataRaidGroups:\r\n          - blockDevices:\r\n              - blockDeviceName: \"blockdevice-c2c846cce1befec7fbdcbae254329b0b\"\r\n          poolConfig:\r\n            dataRaidGroupType: \"stripe\"\r\n        - nodeSelector:\r\n            kubernetes.io/hostname: \"ip-192-168-36-89\"\r\n          dataRaidGroups:\r\n          - blockDevices:\r\n              - blockDeviceName: \"blockdevice-7d311a98255a454a717427b5c2d38426\"\r\n          poolConfig:\r\n            dataRaidGroupType: \"stripe\"\r\n        - nodeSelector:\r\n            kubernetes.io/hostname: \"ip-192-168-29-151\"\r\n          dataRaidGroups:\r\n          - blockDevices:\r\n              - blockDeviceName: \"blockdevice-c608881cd3edbeab674a1aee7e0a1fc3\"\r\n          poolConfig:\r\n            dataRaidGroupType: \"stripe\"\r\n\r\nAfter applying the above CSPC manifest, the following three CStorPoolInstances(CSPI) were created.\r\n\r\n    kubectl get cspi -n openebs\r\n\r\n    NAME                  HOSTNAME          FREE     CAPACITY    READONLY  STATUS   AGE\r\n    cstor-disk-cspc-dvc2  ip-192-168-74-129 24100M   24111M      false     ONLINE   8h\r\n    cstor-disk-cspc-f56z  ip-192-168-36-89  24100M   24113200k   false     ONLINE   8h\r\n    cstor-disk-cspc-q9yt  ip-192-168-29-151   24100M   24113200k   false     ONLINE   8h\r\n\r\nNow everything looks good. After some time, the cluster has been scaled down **0** nodes and scaled back to **3** nodes. So after scaling operations following are new nodes in the cluster.\r\n\r\n    Kubectl get nodes\r\n\r\n    NAME               STATUS   ROLES    AGE     VERSION\r\n    ip-192-168-14-90   Ready    <none>   118s    v1.15.9\r\n    ip-192-168-49-43   Ready    <none>   5m55s   v1.15.9\r\n    ip-192-168-94-113  Ready    <none>   4m6s    v1.15.9\r\n\r\nAttached old disks that participated in pool creation to new nodes, and the following is blockdevice output.\r\n\r\n    Kubectl get bd -n openebs\r\n\r\n    NAME                                           NODENAME            SIZE          CLAIMSTATE   STATUS\r\n    blockdevice-7d311a98255a454a717427b5c2d38426   ip-192-168-49-43    10737418240   Claimed      Active\r\n    blockdevice-c2c846cce1befec7fbdcbae254329b0b   ip-192-168-94-113   10737418240   Claimed      Active\r\n    blockdevice-c608881cd3edbeab674a1aee7e0a1fc3   ip-192-168-14-90    10737418240   Claimed      Active\r\n\r\nFrom the above and previous output following are blockdevice mappings with zn old node and new node:\r\n\r\n    Blockdevice  Name                                    Old Node            New Node\r\n    blockdevice-7d311a98255a454a717427b5c2d38426    ip-192-168-36-89        ip-192-168-49-43\r\n    blockdevice-c2c846cce1befec7fbdcbae254329b0b    ip-192-168-74-129       ip-192-168-94-113\r\n    blockdevice-c608881cd3edbeab674a1aee7e0a1fc3    ip-192-168-29-151       ip-192-168-14-90\r\n\r\nOpenEBS **NodeDiskManager**(NDM) will automatically update the details in blockdevice CRs when the disks migrate to a new node. Based on the above output, update the CSPC manifest with new **nodeSelector** values.\r\n\r\n**Updated CSPC Manifest**:\r\n\r\n    apiVersion: cstor.openebs.io/v1\r\n    kind: CStorPoolCluster\r\n    metadata:\r\n      name: cstor-disk-cspc\r\n      namespace: openebs\r\n    spec:\r\n      pools:\r\n        - nodeSelector:\r\n            kubernetes.io/hostname: \"ip-192-168-94-113\"\r\n          dataRaidGroups:\r\n          - blockDevices:\r\n              - blockDeviceName: \"blockdevice-c2c846cce1befec7fbdcbae254329b0b\"\r\n          poolConfig:\r\n            dataRaidGroupType: \"stripe\"\r\n        - nodeSelector:\r\n            kubernetes.io/hostname: \"ip-192-168-49-43\"\r\n          dataRaidGroups:\r\n          - blockDevices:\r\n              - blockDeviceName: \"blockdevice-7d311a98255a454a717427b5c2d38426\"\r\n          poolConfig:\r\n            dataRaidGroupType: \"stripe\"\r\n        - nodeSelector:\r\n            kubernetes.io/hostname: \"ip-192-168-14-90\"\r\n          dataRaidGroups:\r\n          - blockDevices:\r\n              - blockDeviceName: \"blockdevice-c608881cd3edbeab674a1aee7e0a1fc3\"\r\n          poolConfig:\r\n            dataRaidGroupType: \"stripe\"\r\n\r\nOnce the CSPC manifest is updated then CSPIs will automatically migrate to the new node (which can be verified using **kubectl get cspi -n openebs**).\r\n\r\n    kubectl get cspi -n openebs\r\n\r\n    NAME                  HOSTNAME          FREE     CAPACITY    READONLY  STATUS   AGE\r\n    cstor-disk-cspc-dvc2  ip-192-168-94-113   24100M   24111M      false     ONLINE   8h\r\n    cstor-disk-cspc-f56z  ip-192-168-49-43    24100M   24113200k   false     ONLINE   8h\r\n    cstor-disk-cspc-q9yt  ip-192-168-14-90    24100M   24113200k   false     ONLINE   8h\r\n\r\n**Note:** Along with CStorPoolInstance migration, CStorVolumeReplicas belongs to CSPI will also migrate automatically.\r\n","slug":"migrate-cspis-to-a-different-node-by-moving-the-disks"},{"id":11,"title":"OpenEBS Backup/Restore for ZFS-LocalPV\r","author":"Pawan Prakash Sharma\r","author_info":"It's been an amazing experience in Software Engineering because of my love for coding. In my free time, I read books, play table tennis and watch tv series\r","date":"27-10-2020\r","tags":["OpenEBS"],"excerpt":"Overview of how to use Velero Backup/Restore plugin for ZFS-LocalPV to protect it against data loss.\r","content":"\r\n## Overview: OpenEBS Backup/Restore for ZFS-LocalPV\r\n\r\n**Backup** is the process of copying the data to a different/remote location to protect against accidental or corruption or any other type of data loss. Restore is the process of getting back the data from the backup. In this blog, I will discuss how we can use *Velero Backup/Restore* plugin for ***ZFS-LocalPV*** to protect it against data loss.\r\n\r\n### Pre-requisites\r\n\r\nWe should have installed the ZFS-LocalPV 1.0.0 or later version for Backup and Restore, see my previous[ blog](https://blog.openebs.io/openebs-dynamic-volume-provisioning-on-zfs-d8670720181d) for the steps to install the ZFS-LocalPV driver.\r\n\r\n### Setup\r\n\r\n**1.Install Velero CLI**\r\n\r\nDownload the 1.5 or later binary for ZFS-LocalPV. For Linux on amd64, we need to download below\r\n\r\n    wget\r\n    https://github.com/vmware-tanzu/velero/releases/download/v1.5.1/velero-v1.5.1-linux-amd64.tar.gz\r\n\r\nExtract the tarball:\r\n\r\n    tar -xvf velero-v1.5.1-linux-amd64.tar.gz\r\n\r\nMove the extracted velero binary to somewhere in your $PATH (/usr/local/bin for most users).\r\n\r\nSee the detailed steps[ here](https://velero.io/docs/v1.5/basic-install/).\r\n\r\n**2.Deploy Velero**\r\n\r\nWe will be using minio for storage purpose in this blog, we need to setup the credential file first\r\n\r\n    $ cat /home/pawan/velero/credentials-minio\r\n    [default]\r\n    aws_access_key_id = minio\r\n    aws_secret_access_key = minio123\r\n\r\nWe can install Velero by using below command\r\n\r\n    $ velero install --provider aws --bucket velero --secret-file /home/pawan/velero/credentials-minio --plugins velero/velero-plugin-for-aws:v1.0.0-beta.1 --backup-location-config region=minio,s3ForcePathStyle=\"true\",s3Url=http://minio.velero.svc:9000 --use-volume-snapshots=true --use-restic\r\n\r\nWe have to install the velero 1.5 or later version of velero for ZFS-LocalPV.\r\n\r\n**3.Deploy MinIO**\r\n\r\nDeploy the MinIO for storing the backup:-\r\n\r\n    $ kubectl apply -f\r\n    https://raw.githubusercontent.com/openebs/zfs-localpv/master/deploy/sample/minio.yaml\r\n\r\nThe above MinIO uses tmp directory inside the pod to store the data for the demonstration purpose, so when restart happens, the backed up data will be gone. We should change the above YAML to use persistence storage to store the data when deploying it for the production.\r\n\r\nCheck the Velero Pods are UP and Running\r\n\r\n    $ kubectl get po -n velero\r\n    NAME                      READY   STATUS      RESTARTS   AGE\r\n    minio-d787f4bf7-xqmq5     1/1     Running     0          8s\r\n    minio-setup-prln8         0/1     Completed   0          8s\r\n    restic-4kx8l              1/1     Running     0          69s\r\n    restic-g5zq9              1/1     Running     0          69s\r\n    restic-k7k4s              1/1     Running     0          69s\r\n    velero-7d9c448bc5-j424s   1/1     Running     3          69s\r\n\r\n**4.Setup OpenEBS Plugin**\r\n\r\nWe can Install the Velero Plugin for ZFS-LocalPV using the below command\r\n\r\n    velero plugin add openebs/velero-plugin:2.2.0\r\n\r\nWe have to install the velero-plugin 2.2.0 or later version, which has the support for ZFS-LocalPV. Once the setup is done, we can go ahead and create the backup/restore.\r\n\r\n**5.Create the VSL**\r\n\r\nThe VSL(Volume Snapshot Location) has information about where the snapshot should be stored. To create the Backup/Restore, we can create the Volume Snapshot Location by applying the below YAML:\r\n\r\n    apiVersion: velero.io/v1\r\n    kind: VolumeSnapshotLocation\r\n    metadata:\r\n     name: default\r\n     namespace: velero\r\n    spec:\r\n     provider: openebs.io/zfspv-blockstore\r\n     config:\r\n       bucket: velero\r\n       prefix: zfs\r\n       namespace: openebs # this is the namespace where ZFS-LocalPV creates all the CRs, passed as OPENEBS_NAMESPACE env in the ZFS-LocalPV deployment\r\n       provider: aws\r\n       region: minio\r\n       s3ForcePathStyle: \"true\"\r\n       s3Url: http://minio.velero.svc:9000\r\n\r\nHere, we have to provide the namespace, which we have used as OPENEBS_NAMESPACE env while deploying the ZFS-LocalPV. The ZFS-LocalPV Operator yamls uses “openebs” as the default value for OPENEBS_NAMESPACE env. Verify the volumesnapshot location:\r\n\r\n    kubectl get volumesnapshotlocations.velero.io -n velero\r\n\r\n### Create Backup\r\n\r\nWe can use the below Velero command to create the backup:\r\n\r\n    velero backup create my-backup --snapshot-volumes --include-namespaces=<backup-namespace> --volume-snapshot-locations=default --storage-location=default\r\n\r\nwe can add all the namespaces we want to be backed up in a comma-separated format in --include-namespaces parameter. We have to provide the VSL that we have created in --volume-snapshot-locations parameter.\r\n\r\nWe can check the backup status using the velero backup get command:\r\n\r\n    $ velero backup get\r\n    NAME        STATUS       CREATED                         EXPIRES   STORAGE LOCATION   SELECTOR\r\n    my-backup   InProgress   2020-09-14 21:09:06 +0530 IST   29d       default            <none>\r\n\r\nThe status InProgress means that the backup is in progress. Wait for it to be Completed.\r\n\r\nWe can also create a scheduled backup which will take the backup periodically. For example, to take the full backup at every 5 min, we can create the below schedule :\r\n\r\n    velero create schedule schd --schedule=\"*/5 * * * *\" --snapshot-volumes --include-namespaces=<backup-namespace1>,<backup-namespace2> --volume-snapshot-locations=default --storage-location=default\r\n\r\n### Restore\r\n\r\nIf the application and its PVC has been deployed in a namespace, then we can use the below Velero command to create the backup of the entire namespace:\r\n\r\n    velero restore create --from-backup my-backup --restore-volumes=true --namespace-mappings <source-ns>:<dest-ns>\r\n\r\nThe above command will create the backup of everything that is there in the namespace provided as --include-namespaces argument. We can provide the namespace mapping if we want to restore in a different namespace as --namespace-mappings parameter. If namespace mappings are not provided, it will restore in the source namespace only where the original pod and pvc was present. Now we can check the restore status:\r\n\r\n    $ velero restore get\r\n    NAME                       BACKUP      STATUS       WARNINGS   ERRORS   CREATED                         SELECTOR\r\n    my-backup-20200914211331   my-backup   InProgress   0          0        2020-09-14 21:13:31 +0530 IST   <none>\r\n\r\nOnce the Status is Completed, we can check the pods in the destination namespace and verify that everything is up and running. We can also verify that the data has been restored.\r\n\r\n### Summary\r\n\r\nAs demonstrated in this blog, OpenEBS makes it easy to take the backup of the Kubernetes applications, which we can use to Restore as part of disaster recovery. In my next blog, I will talk about how we can take the incremental backup of the volumes, which is space optimized backup for ZFS-LocalPV\r\n\r\n## Important links\r\n\r\n[https://github.com/openebs/zfs-localpv](https://github.com/openebs/zfs-localpv)\r\n[https://velero.io/docs/](https://velero.io/docs/v1.5/basic-install/)\r\n","slug":"openebs-backuprestore-for-zfslocalpv"},{"id":12,"title":"OpenEBS 2.2.0 - Enhancements And New Storage Capabilities\r","author":"Ashutosh Kumar\r","author_info":"Software Engineer at MayaData | OpenEBS Reviewer and Contributor | CKA | Gopher | Kubernaut\r","date":"20-10-2020\r","tags":["OpenEBS"],"excerpt":"OpenEBS 2.2.0 is here! Read this post to learn about the new updates.\r","content":"\r\n### **OpenEBS 2.2.0 is here**\r\n\r\nWe are excited to announce yet another ***OpenEBS*** release that comes with new storage capabilities, control plane enhancements, bug fixes, and new APIs for the world’s fastest storage engine built on RUST, also known as Mayastor.\r\n\r\nOpenEBS has seen a wider adoption among the users, thanks to the vibrant and growing community. Like in most of the OpenEBS releases, this release responds to the feedback received in the community. If you want to learn more about the project roadmap, please browse the following link:\r\n[https://github.com/openebs/openebs/blob/master/ROADMAP.md](https://github.com/openebs/openebs/blob/master/ROADMAP.md)\r\n\r\nIncremental Backup and Restore in ZFS local PV and pool and volume migration in cStor are the major release milestones made into the release. The pool migration in cStor solves the use-case of replacing a bad node with a new node or sending a node for maintenance on on-premise clusters. The migration feature provides great value in cloud-managed Kubernetes clusters, too, e.g., GKE, where node reboots or voluntary scale down of nodes can cause the disks to get removed. \r\n\r\nThis release is also special due to the [*Hacktoberfest*](https://hacktoberfest.digitalocean.com/) festival and would like to give a shout out to first-time contributors [@didier-durand](https://github.com/didier-durand), [@zlymeda](https://github.com/zlymeda), [@avats-dev](https://github.com/avats-dev), and many more.\r\n\r\n### **Key Highlights of OpenEBS 2.2.0 Release:**\r\n\r\n- Mayastor aims to be the world’s fastest container attached storage and is currently in alpha. The release introduced block device enumeration feature via the gRPC API and enhancement around storage pool finalizers.\r\n- ZFS local PV has become a popular storage engine built on local storage design and provides powerful storage features like snapshots and clones, raw block volume, etc. It also supports day two operations like volume resize and backup and restore via the pluggable Velero interface.\r\nSupport for Incremental Backup and Restore by enhancing the OpenEBS Velero Plugin has been a significant highlight for ZFS local PV release. \r\nTo learn more about this, please refer to the document [here](https://github.com/openebs/zfs-localpv/blob/master/docs/backup-restore.md).\r\n- OpenEBS Velero plugin connects the Velero interface to the OpenEBS storage engines to deliver backup/restore functionality. Velero Plugin has been enhanced to restore ZFS Local PV into a different cluster or a different node in the cluster and use custom certificates for S3 object storage.\r\n- CStor went into beta in 2.0 and has been enhanced to migrate the storage pool from one node to another node. This will help with scenarios where a Kubernetes node can be replaced with a new node but can be attached with the block devices from the old node that contain cStor Pool and the volume data.\r\n- OpenEBS node disk manager helps in block device discovery and management in a Kubernetes cluster and powers storage engines like cStor. Support to exclude multiple devices that could be mounted as host filesystem directories has been added.\r\nAn issue where NDM could cause data loss by creating a partition table on an uninitialized iSCSI volume has also been fixed.\r\n\r\n### **Useful Links and Summary:**\r\n\r\nIf you are interested in knowing more details regarding the changes that made to this release, please visit the release note [link](https://github.com/openebs/openebs/releases/tag/v2.2.0). To try out OpenEBS, you can visit [https://docs.openebs.io/](https://docs.openebs.io/) and follow the user guides.\r\n\r\nYou can visit the following link to learn more or experiment with Mayastor\r\n[https://github.com/openebs/mayastor](https://github.com/openebs/mayastor)\r\n\r\nYou can visit the following link to learn more or experiment with ZFS local PV\r\n[https://github.com/openebs/zfs-localpv](https://github.com/openebs/zfs-localpv)\r\n\r\nTo learn more about the new cStor CSPC API, please visit the following link:\r\n[https://github.com/openebs/cstor-operators](https://github.com/openebs/cstor-operators)\r\n\r\nIf you have any feedback, questions, or suggestions — please reach out to the community on the #openebs channel in the Kubernetes workspace or consider opening a relevant issue at [Github](https://github.com/openebs/openebs).\r\n","slug":"openebs-220-enhancements-and-new-storage-capabilities"},{"id":13,"title":"Scaling up cStor Volume Replica\r","author":"Abhishek\r","author_info":"Abhishek is a Customer Success Engineer at Mayadata. He is currently working with Kubernetes and Docker.\r","date":"07-10-2020\r","tags":["OpenEBS"],"excerpt":"OpenEBS provides volume replication through different storage engines. Learn how to scale up cStor Volume Replica.\r","content":"\r\nEven if a cluster is reliable, nodes can and do fail. Rebooting a node does not simulate a crash. There can be many reasons, such as catastrophic hardware failure, Operating System failure, or communication failure among the nodes. To overcome this hazardous situation, the Replication of volume becomes necessary.\r\n\r\nReplication is the process by which one or more volumes can be copied to maintain the significance of a cluster and to avoid data loss. OpenEBS provides volume replication through different storage engines. One of them is cStor Volume Replication.\r\n![Synchronous replication of data](https://lh5.googleusercontent.com/ijS24Ywabw-QkWWYbSLoOshGTi2SHZhdEFATaHIYbkNGK8lUq5SJrct6fNHfPjWcPTHGyvByS7uD1vYct2m5D6-HdRC2ZoMpS_c4Crw-9sREhPU-tXE8KAt-nWj7vYw99Ee_s1pE)\r\n#### Prerequisite for scaling up the replicas of cStor volume:\r\n\r\n- A cStor pool should be available, and replicas of this cStor volume should not be present on this cStor pool.\r\n- The OpenEBS version should be 1.3.0 or more.\r\n\r\n### Please follow the below steps for cStor Volume Replication:\r\n\r\nGet the StorageClass name using the following command:\r\n\r\n    kubectl get sc\r\n\r\nExample Output:\r\n![](https://lh5.googleusercontent.com/lTma7ZqsAavmXEzGG_b4BXDMUEYXjFXf0xxnWgE70znfR_EzP3IorVFp0evkKoLMsBQ0D7gwOQxivB_bZxEcv2vhYZOe17k7mNyDBaPewTgiUdusrd3ow12ClBeQvZVmVzjDrdsI)\r\nThe storage class for cStor is ***openebs-sc-cstor***. Perform the following command to get the details of the corresponding StorageClass, which is used for creating the cStor volume :\r\n\r\n    Kubectl get sc openebs-sc-cstor\r\n\r\nWe will get the Yaml file of the corresponding StorageClass ***openebs-sc-cstor***.\r\n![](https://lh5.googleusercontent.com/81DQJ-DhT3AKseMRfCZ4NpkmOPl2Tckm76jrUxE2eECY7lrejvNz3OjomFWmNiCRwm0L2seAWzmJJhe-8xcqFirBsEUedf2xzPN4NHq2RM2YYEZZv-iKpsE03j06EQi_D5kqnDCi)\r\nIn the Yaml above, We can see the Replica count Value is 1.\r\n\r\nGet the volume name using the following command:\r\n\r\n    Kubectl get pvc\r\n\r\nGet the VOLUME name and use it in the following command to get the details of corresponding cStor volume. All commands are performed by considering the above PVC.\r\n\r\n    kubectl get cstorvolume -n openebs -l openebs.io/persistent-volume=<Vol-name>\r\n\r\nExample output:\r\n![](https://lh4.googleusercontent.com/FIOJchscq3lm7UJLwnk7i1oNne_RxhjIJzI3FMANxxkRhz4yWZAue-Wu1jD03ii2aMjtdDu3zr9C-0ZGaeazkvxb_JkGnxBBDza605w_p-v9BY1ER40f6DityHwimJvhvuAR8FcT)\r\nGet the details of existing cStor Volume Replica details using the following command:\r\n\r\n    kubectl get cstorvolume -n openebs -l openebs.io/persistent-volume=pvc-3f86fcdf-02f6-11ea-b0f6-42010a8000f8\r\n\r\nExample output:\r\n![](https://lh3.googleusercontent.com/68NvgkfD7audTNZN1QLt6SVw4OvN_B3MIlnFnWm8MfgDziiexFX2qeI3tX6H1TCJJgrCA8b-nZQJoM6hx1QoYWOv4q74tKwB7nrZLc9xdluXRCvWTpj-sU6sIv7aJ0AMgL3rr1AR)\r\nPerform the following command to get complete details of the existing cStor volume replica:\r\n\r\n    kubectl get cvr -n openebs -l openebs.io/persistent-volume=pvc-3f86fcdf-02f6-11ea-b0f6-42010a8000f8\r\n\r\nGet the available cStor Pools for creating new cStor volume replica. The following command will get the other associated cStor pools details:\r\n\r\n    kubectl get csp -l openebs.io/storage-pool-claim=cstor-disk-pool | grep -v cstor-disk-pool-hgt4\r\n\r\nExample Output:\r\n![](https://lh6.googleusercontent.com/lcbO830nSZgValr-I4ci7FHRa6Qvqf3eG-bycWHHAniRD8mb8dwRHOwxeVObFqj4FqvXbNkb_oZUdWhMgAQuHvU1pYDecvWXhDetYGdJADBQhWfzMuwJm4d9Ywgg6bAKkj-Sd79a)\r\nFrom the above example output, there are 2 cStor pools available, i.e., ***cstor-disk-pool-2phf*** and ***cstor-disk-pool-zm8l***. So it is possible to scale up the current volume replica count to 3 from 1. If there are no cStor pools available to perform volume replica scale-up, then follow the [steps](https://docs.openebs.io/docs/next/ugcstor.html#expanding-cStor-pool-to-a-new-node) to create a new cStor pool by updating existing SPC configuration.\r\n\r\nPerform the following command to get the details of the cStor Pool where new replica will be created:\r\n\r\n    kubectl get csp -n openebs cstor-disk-pool-2phf -oyaml\r\n\r\nNote down following parameters from the output:\r\n\r\n- metadata.labels.cstorpool.openebs.io/name\r\n- metadata.labels.cstorpool.cstorpool.openebs.io/uid\r\n- metadata.annotations.cstorpool.openebs.io/hostname\r\n\r\nThe sample CVR Yaml is provided below:\r\n![](https://lh3.googleusercontent.com/JePqVqyIryf396SEkCf9NoS3kmPDXM0huqehkN3kX5f-eE7nX3-mCr42xriJeDKSNRgfVxSeQG_SUHkbqEZS4ktIzzcJ8VKCsFXuz4VhtdXpikLADE3eJdkgwH3zFd5PXRPfYc70)\r\nApply the updated CVR YAML spec to create the new replica of cStor volume using the following command:\r\n\r\n    kubectl apply -f cvr.yaml\r\n\r\nExample Output:\r\n![](https://lh5.googleusercontent.com/JElB0d8zFXHoUh6wM0QpAshOmYbVXOvH5RIR9UjJ_svM67ZR2pq6cQ4ckrq0Qw6ACpRnOqO-6nUbvLUrDhFKvgZxjrh-ke0VHnKW-pR2oyzkgXdQuRATSwy9EVN19G458ZyR_9Xd)\r\nVerify if new CVR is created successfully using the following command:\r\n\r\n    kubectl get cvr -n openebs\r\n\r\nExample output:\r\n![](https://lh4.googleusercontent.com/ql9j6Zcod6DT1vKhJrlJJaxk4YUN8Mf_o7LT3e-fBjjoybINByEwwDS5fln6K5BEJGW6vFfE8h2JA_2tFvQY5PQKo62eJvQfTE5j5JwECIz2oO3u_ypKHWRylL3gmU4KYlo4axtU)\r\nFrom the above output, a new replica of the cStor volume is created, and STATUS is showing as Offline.\r\n\r\nUpdate Desired Replication Factor in cStor volume with a new replica count. This can be updated by editing corresponding cStor volume CR YAML.\r\n\r\n    kubectl edit cstorvolume pvc-3f86fcdf-02f6-11ea-b0f6-42010a8000f8 -n openebs\r\n\r\nThe following is the snippet of updated cStor volume CR YAML:\r\n![](https://lh3.googleusercontent.com/lAisXwgequP2MyeCw1cVuwUYFG9G9L5U88olJ2CjbjIOpHjlMwn-K8p11ktaCjQfxK-u5EL-ebpZofD0W_LOKmfFa-wW3eTLtBpqSt7EPYvz5rQciYeaFdT6_7PCsJkdxPVHZCVg)\r\n\r\nIn the above snippet, the desiredReplicationFactor is updated to 2 from 1. Example output:\r\n![](https://lh6.googleusercontent.com/uBkJft958gfjATk070ZFZOMXaq7Sb1xnd5lBVMa2sKuXo-nxwrRxQS58TPgdpoLjMuMHvT4LwPscxPdT6kgwpaDVSraLmsNwWhfanMUrNVO72K8WgxwT3_or4EdzqQkWBgI-Ka84)\r\nVerify if the rebuilding has started on the new replica of the cStor volume. Once rebuilding has been completed, it will update its STATUS as Healthy. Get the latest status of the CVRs using the following command:\r\n\r\n    kubectl get cvr -n openebs\r\n\r\nExample output:\r\n![](https://lh6.googleusercontent.com/1KjmeLgtvoFcBh0vVmB0iwj_gjo-Tkd3vVTTmaw3OaREY9KbvDUQLqyEu0Hj_aYKDpTIRSDVG2sOrTPMczJAPASlzFitSHDyocPV4Bb6IgajW-ArUpDKhi8StFesnHYZrUc3X9DJ)\r\n","slug":"scaling-up-cstor-volume-replica"},{"id":14,"title":"\"Hacktoberfest 2020 - Contribute to OpenEBS\"\r","author":"MayaData Marketing\r","author_info":"Mayadata Marketing Team\r","date":"30-09-2020\r","tags":["OpenEBS"],"excerpt":"Hacktoberfest 2020 is almost here. Contribute to open source project, OpenEBS, to win exciting swag.\r","content":"\r\n### Hacktoberfest returns! Contribute to OpenEBS and win exciting swag\r\n\r\nThe seventh annual [***Hacktoberfest ***](https://hacktoberfest.digitalocean.com/) celebration is almost here, and we at *OpenEBS* are happy to be participating in the contest once again. In August 2017, the OpenEBS community began growing and building a strong foundation for an open source project.\r\n\r\nWe were first introduced to *Hacktoberfest* by friends and peers at the DigitalOcean Bangalore Meetup and were immediately interested in participating. We enlisted OpenEBS as one of the projects participating in Hacktoberfest 2017. We were pleasantly surprised by the participation and enthusiasm that Hacktoberfest attracts from developers around the world. The PRs have been at their peak during Hacktoberfest.\r\n\r\n![](https://lh4.googleusercontent.com/Og_t8KLCiRni_LS66bpJsonSXMjcoAX671c8a2LD7ZjbkVdYZgZCRFq47sDC7hsEZt6qcaoCJPZi_gm2FnKmuzMvlg4UZAQKofU0agH2Z11TRmw6vBCQ8u3ssGfre75BN9OV-vOO)\r\n\r\n### Get started with OpenEBS this Hacktoberfest\r\n\r\nFollowing the smashing success we had when we participated in the event last few years, we’re going to do the same this year! MayaData makes it more exciting to participate in **Hacktoberfest **by running multiple Meetups throughout the month and helping contributors to get started with their favorite areas (in any of the programming languages) like website development and documentation enhancements. \r\n\r\nTo top it all, there are exciting prizes to be won and every contribution deserves an additional swag from MayaData. Read [this blog](https://blog.mayadata.io/openebs/experience-with-openebs-in-this-hacktoberfest) by Aswath K, one of last year’s weekly winners, who writes about his experience with OpenEBS in Hacktoberfest 2019.\r\n\r\n![](https://lh6.googleusercontent.com/2POqPppb7pyGM0OWwl_LlkHzwz-DSWXMMggxIeNCXvsU6EVVmNHdiIzIoTw23-ceK9R5iBleFMGiK-lw9JLtCP5VVjFGQS1QhIOXbpQhtvku5Gp5aCw4Eul_r6JcM-o0WuVZRZmj)\r\n\r\n### How do I contribute to OpenEBS?\r\n\r\nThat is an excellent question! OpenEBS is a Kubernetes native Container Attached Storage (CAS) that simplifies running Stateful workloads on Kubernetes. It is built on Microservices architectural patterns, fully automated development, and build pipelines.\r\n\r\nOpenEBS has several components that need your help from simple fixes like adding GitHub issue templates, to enhancing the components. These are developed using Go, Rust, Python, Javascript, Ansible, and many more interesting tools. OpenEBS is also a great way to start your journey into the exciting world of storage, containers, and Kubernetes.\r\n\r\nThe [architecture overview document ](https://github.com/openebs/openebs/blob/master/contribute/design/README.md) is a great place to start learning and picking up a component that speaks to your passion. You could start your first contribution by enhancing that document itself for providing more clarity.\r\n\r\nThere are many other [good first issues](https://github.com/search?q=org%3Aopenebs+is%3Aissue+label%3A%22good+first+issue%22) to pick from.\r\n\r\nContributions can be anything from creating issues, improving user and contributor documents, enhancing build and docker tools, fixing and enhancing code, or unit tests and e2e tests. If you are unsure where to start, begin a discussion with the contributors on [GitHub Discussions](https://github.com/openebs/openebs/discussions) or by joining [OpenEBS Community on Kubernetes Slack](https://kubernetes.slack.com/?redir=%2Fmessages%2Fopenebs%2F).\r\n\r\n### Will there be swag?\r\n\r\nYes. A big fat YES!\r\n\r\nThe official [Hacktoberfest](https://hacktoberfest.digitalocean.com/) will be giving away free t-shirts to every person making four pull requests to open source repositories during October, as well as limited-edition Hacktoberfest stickers to everyone who participates.\r\n\r\nOn top of this, you will also be able to get some exclusive and limited OpenEBS swag. When your PR to any OpenEBS repository is merged, we will contact you to fill out a form to send a special edition swag designed for Hacktoberfest.\r\n\r\nNot only this but by becoming a top weekly contributor, you’ll be able to grab even more swag.\r\n\r\nPrizes will be sent to quality contributions. The best PR will win a grand prize. Stay tuned to find out more.\r\n\r\nSo, what are you waiting for! Go get your git on and start contributing - we can’t wait to receive your PR.\r\n\r\nHappy hacking!\r\n\r\n### Getting Started:\r\n\r\n1. [https://hacktoberfest.digitalocean.com/](https://hacktoberfest.digitalocean.com/)\r\n2. Join [OpenEBS Community on Kubernetes Slack](https://kubernetes.slack.com/?redir=%2Fmessages%2Fopenebs%2F)\r\n3. Checkout the [OpenEBS Contributing guide](https://github.com/openebs/openebs/blob/master/CONTRIBUTING.md)\r\n4. Learn about the [architecture and components](https://github.com/openebs/openebs/blob/master/contribute/design/README.md) of OpenEBS\r\n5. Create new issues for your contribution or pick one of the existing issues from [https://github.com/openebs/openebs/issues](https://github.com/openebs/openebs/issues)\r\n","slug":"hacktoberfest-2020-contribute-to-openebs"},{"id":15,"title":"OpenEBS StorageClasses For ZFS-LocalPV\r","author":"Pawan Prakash Sharma\r","author_info":"It's been an amazing experience in Software Engineering because of my love for coding. In my free time, I read books, play table tennis and watch tv series\r","date":"09-09-2020\r","tags":["OpenEBS"," LocalPV"," ZFS"],"excerpt":"In this blog, I will discuss various storage classes we can use to dynamically provision the volumes backed by ZFS-LocalPV Storage Pool.\r","content":"\r\nIn this blog, I will discuss various storage classes we can use to dynamically provision the volumes backed by ZFS Storage Pool.\r\n\r\nPlease read my previous[ post](https://blog.openebs.io/openebs-dynamic-volume-provisioning-on-zfs-d8670720181d?__hstc=216392137.7dc0753f698b104ea002a16b84268b54.1580207831486.1580207831486.1580207831486.1&amp;__hssc=216392137.1.1580207831487&amp;__hsfp=818904025) for instructions on setting up the *ZFS-LocalPV*. Alternatively, you can also go through the [README](https://github.com/openebs/zfs-localpv/blob/master/README.md) section of the [*ZFS-LocalPV* repository](https://github.com/openebs/zfs-localpv).\r\n\r\n### **StorageClass Backed by ZFS Dataset**\r\n\r\nWe can create a StorageClass with the fstype as “zfs”. Here, the ZFS-LocalPV driver will create a ZFS dataset for the persistence storage. The application will get a dataset for the storage operation. We can also provide recordsize, compression, or dedup property in the StorageClass. The dataset will be created with all the properties mentioned in the StorageClass:\r\n\r\n    apiVersion: storage.k8s.io/v1\r\n    kind: StorageClass\r\n    metadata:\r\n     name: openebs-zfspv\r\n    allowVolumeExpansion: true\r\n    parameters:\r\n     recordsize: \"4k\"\r\n     thinprovision: \"no\"\r\n     fstype: \"zfs\"\r\n     poolname: \"zfspv-pool\"\r\n    provisioner: zfs.csi.openebs.io\r\n\r\nWe have the thinprovision option as “no” in the StorageClass, which means that do reserve the space for all the volumes provisioned using this StorageClass. We can set it to “yes” if we don’t want to reserve the space for the provisioned volumes.\r\n\r\nThe allowVolumeExpansion is needed if we want to resize the volumes provisioned by the StorageClass. ZFS-LocalPV supports online volume resize, which means we don’t need to scale down the application. The new size will be visible to the application automatically.\r\n\r\nOnce the storageClass is created, we can go ahead and create the PVC and deploy a pod using that PVC.\r\n\r\n### **StorageClass Backed by ZFS Volume**\r\n\r\nThere are a few applications that need to have different filesystems to work optimally. For example, Concourse performs best using the “btrfs” filesystem ([https://github.com/openebs/zfs-localpv/issues/169](https://github.com/openebs/zfs-localpv/issues/169)). Here we can create a StorageClass with the desired fstype we want. The ZFS-LocalPV driver will create a ZVOL, which is a raw block device carved out from the mentioned ZPOOL and format it to the desired filesystem for the applications to use as persistence storage backed by ZFS Storage Pool:\r\n\r\n    apiVersion: storage.k8s.io/v1\r\n    kind: StorageClass\r\n    metadata:\r\n     name: opeenbs-zfspv\r\n    parameters:\r\n     volblocksize: \"4k\"\r\n     thinprovision: \"yes\"\r\n     fstype: \"btrfs\"\r\n     poolname: \"zfspv-pool\"\r\n    provisioner: zfs.csi.openebs.io\r\n\r\nHere, we can mention any fstype we want. As of 0.9 release, the driver supports ext2/3/4, xfs, and btrfs fstypes for which it will create a ZFS Volume. Please note here, if fstype is not provided in the StorageClass, the k8s takes “ext4\" as the default fstype. Here also we can provide volblocksize, compression, and dedup properties to create the volume, and the driver will create the volume with all the properties provided in the StorageClass.\r\n\r\nWe have the thinprovision option as “yes” in the StorageClass, which means that it does not reserve the space for all the volumes provisioned using this StorageClass. We can set it to “no” if we want to reserve the space for the provisioned volumes.\r\n\r\n### **StorageClass for Sharing the Persistence Volumes**\r\n\r\nBy default, the ZFS-LocalPV driver does not allow Volumes to be mounted by more than one pod. Even if we try to do that, only one Pod will come into the running state, and the other Pod will be in ContainerCreating state, and it will be failing on the mount.\r\n\r\nIf we want to share a volume among multiple pods, we can create a StorageClass with the “shared” option as “yes”. For this, we can create a StorageClass backed by ZFS dataset as below :\r\n\r\n    apiVersion: storage.k8s.io/v1\r\n    kind: StorageClass\r\n    metadata:\r\n     name: openebs-zfspv\r\n    allowVolumeExpansion: true\r\n    parameters:\r\n     fstype: \"zfs\"\r\n     shared: \"yes\"\r\n     poolname: \"zfspv-pool\"\r\n    provisioner: zfs.csi.openebs.io\r\n\r\nOr, we can create the StorageClass backed by ZFS Volume for sharing it among multiple pods as below :\r\n\r\n    apiVersion: storage.k8s.io/v1\r\n    kind: StorageClass\r\n    metadata:\r\n     name: openebs-zfspv\r\n    allowVolumeExpansion: true\r\n    parameters:\r\n     fstype: \"ext4\"\r\n     shared: \"yes\"\r\n     poolname: \"zfspv-pool\"\r\n    provisioner: zfs.csi.openebs.io\r\n\r\nHere, we have to note that all the Pods using that volume will come to the same node as the data is available on that particular node only. Also, applications need to be aware that the volume is shared by multiple pods and should synchronize with the other Pods to access the data from the volume.\r\n\r\n### **StorageClass With k8s Scheduler**\r\n\r\nThe ZFS-LocalPV Driver has its own scheduling logic, where it creates the volume where the ZFS Pool is less loaded with the volumes. Here, it just checks the volume count and creates the volume where less volume is configured in a given ZFS Pool. It does not account for other factors like available CPU or memory while making scheduling decisions. So if you want to use node selector/affinity rules on the application pod or have CPU/Memory constraints, the Kubernetes scheduler should be used. To make use of Kubernetes scheduler, we can set the volumeBindingMode as WaitForFirstConsumer in the storage class:\r\n\r\n    apiVersion: storage.k8s.io/v1\r\n    kind: StorageClass\r\n    metadata:\r\n     name: openebs-zfspv\r\n    allowVolumeExpansion: true\r\n    parameters:\r\n     fstype: \"zfs\"\r\n     poolname: \"zfspv-pool\"\r\n    provisioner: zfs.csi.openebs.io\r\n    volumeBindingMode: WaitForFirstConsumer\r\n\r\nHere, in this case, the Kubernetes scheduler will select a node for the POD and then ask the ZFS-LocalPV driver to create the volume on the selected node. The driver will create the volume where the POD has been scheduled.\r\n\r\n### **StorageClass With Custom Node Labels**\r\n\r\nThere can be a use case where we have certain kinds of ZFS Pool present on certain nodes only, and we want a particular type of application to use that ZFS Pool. We can create a storage class with `allowedTopologies` and mention all the nodes there where that pool is present:\r\n\r\n    apiVersion: storage.k8s.io/v1\r\n    kind: StorageClass\r\n    metadata:\r\n     name: nvme-zfspv\r\n    allowVolumeExpansion: true\r\n    parameters:\r\n     poolname: \"zfspv-pool\"\r\n    provisioner: zfs.csi.openebs.io\r\n    allowedTopologies:\r\n    - matchLabelExpressions:\r\n     - key: openebs.io/nodename\r\n       values:\r\n         - node-1\r\n         - node-2\r\n\r\nHere we can have ZFS Pool of name “zfspv-pool” created on the nvme disks and want to use this high performing ZFS Pool for the applications that need higher IOPS. We can use the above StorageClass to create the PVC and deploy the application using that.\r\n\r\nThe ZFS-LocalPV driver will create the Volume in the Pool “zfspv-pool” present on the node with fewer of volumes provisioned among the given node list. In the above StorageClass, if there provisioned volumes on node-1 are less, it will create the volume on node-1 only. Alternatively, we can use `volumeBindingMode: WaitForFirstConsumer` to let the k8s select the node where the volume should be provisioned.\r\n\r\nThe problem with the above StorageClass is that it works fine if the number of nodes is less, but if the number of nodes is huge, it is cumbersome to list all the nodes like this. In that case, what we can do is, we can label all the similar nodes using the same key value and use that label to create the StorageClass.\r\n\r\n    pawan@pawan-master:~/pawan$ kubectl label node pawan-node-2 openebs.io/zpool=nvme\r\n    node/pawan-node-2 labeled\r\n    pawan@pawan-master:~/pawan$ kubectl label node pawan-node-1 openebs.io/zpool=nvme\r\n    node/pawan-node-1 labeled\r\n\r\nNow, restart the ZFS-LocalPV Driver (if already deployed otherwise, please ignore) so that it can pick the new node label as the supported topology.\r\n\r\n    $ kubectl delete po -n kube-system -l role=openebs-zfs\r\n\r\nNow, we can create the StorageClass like this:\r\n\r\n    apiVersion: storage.k8s.io/v1\r\n    kind: StorageClass\r\n    metadata:\r\n     name: nvme-zfspv\r\n    allowVolumeExpansion: true\r\n    parameters:\r\n     poolname: \"zfspv-pool\"\r\n    provisioner: zfs.csi.openebs.io\r\n    allowedTopologies:\r\n    - matchLabelExpressions:\r\n     - key: openebs.io/zpool\r\n       values:\r\n         - nvme\r\n\r\nHere, the volumes will be provisioned on the nodes which has label “openebs.io/zpool” set as “nvme”.\r\n\r\n### **Conclusion :**\r\n\r\nWe can set up different kinds of StorageClasses as per our need, and then we can proceed with PVC and POD creation. The driver will take the care of honoring the requests put in the PVC and the StorageClass.\r\n\r\nI hope you found this post useful. Feel free to contact me with any feedback or questions by using the comment section below.\r\n","slug":"openebs-storageclasses-for-zfslocalpv"},{"id":16,"title":"Handling node down/cluster scaling on ZFS LocalPV backed workloads\r","author":"Ranjith Raveendran\r","author_info":"Ranjith is working as a Software Engineer at MayaData and working in the OpenEBS project. In his free time, he listens to music, watches movies, and goes for bike riding.\r","date":"01-09-2020\r","tags":["Kubernetes"],"excerpt":"Step-by-step blog on how MySQL app deployment runs on OpenEBS ZFS LocalPV device, handled when a node down/cluster scale down situation happens in GKE cluster\r","content":"\r\nKubernetes is increasingly used for running production-grade stateful services. Organizations are making progress on a containerized form of their production workloads for running in Kubernetes. There are already solutions available for the containerized version of stateful applications, network, storage, etc.\r\n\r\nAs everyone knows, OpenEBS is one of the leading containerized storage solutions for Kubernetes, and it is a growing Sandbox project in CNCF. MayaData is the primary maintainer and contributor of OpenEBS along with other companies. MayaData also contributed another open source project, Litmus, into CNCF, which does mostly Chaos engineering in Kubernetes, which helps SREs and developers to do all kinds of testing of their applications and components in Kubernetes before going into Production.\r\n\r\nA persistent storage solution for running any stateful application is a must requirement, be it a **Deployment** or **StatefulSet**. OpenEBS provides various storage engines, and each storage engine is suitable for specific applications or workloads. Some engines provide storage level synchronous replication, capable of taking snapshots and cloning, backup and restore, volume expansion, CSI complaint, performance-oriented, etc. So choosing the engine based on the workload requirement is an important activity.\r\n\r\nOpenEBS provides dynamic provisioning of ***ZFS LocalPV*** using external device/devices. OpenEBS ZFS driver binds a ZFS file system into the Kubernetes environment and allows users to provision and de-provision volumes dynamically. Using a ***ZFS Local PV*** has the following advantages   as opposed to Kubernetes native Local PV backed by direct-attached devices:\r\n\r\n- Sharing of the devices among multiple application pods.\r\n- Enforcing quota on the volumes makes sure the pods don’t consume more than their capacity.\r\n- Ability to take snapshots of the LocalPV\r\n- Ability to sustain the disk failures — using the ZPOOL RAID functionality\r\n- Ability to use data services like compression and encryption.\r\n- Ability to resize the PV capacity.\r\n\r\nIn this article, we provisioned a MySQL deployment on an ***OpenEBS ZFS LocalPV*** device dynamically.\r\n\r\nThis article is a step-by-step instruction. We will mention how a MySQL application deployment running on the OpenEBS ZFS LocalPV device volume is getting handled when a Node down scenario or a cluster scale down situation happens in the GKE cluster. In GKE and some other managed clusters like EKS, the node name will change if the cluster undergoes a scale down and scale up operation has performed. So the application running on the OpenEBS ZFS LocalPV device will not be able to attach to the new node since the corresponding PV and ZFS Volume has a binding of volume node affinity. We need to update the new node name details in PV and ZFS volume, where the disk got attached.\r\n\r\nIn this article, we are discussing the steps that need to be performed to make the application into a running state when a Node down / scale down cluster scenario has happened. This situation is usually required in case of Managed clusters where the Node name will get changed during this scenario. As stated earlier, the following approach works fine for both Deployment type and StatefulSet type, but ensure that the next steps are correctly performed. Let’s start with the step by step instructions once you have scaled up the cluster after a scale down scenario.\r\n\r\n1. Verify all nodes are now in Ready state.\r\n    ```\r\n    $ kubectl get node\r\n    NAME                                           STATUS   ROLES    AGE   VERSION\r\n    gke-openebs-mysql-default-pool-dd23ce6b-f8rd   Ready    <none>   24m   v1.16.13-gke.1\r\n    gke-openebs-mysql-default-pool-dd23ce6b-lwr3   Ready    <none>   24m   v1.16.13-gke.1\r\n    gke-openebs-mysql-default-pool-dd23ce6b-zzqx   Ready    <none>   24m   v1.16.13-gke.1\r\n    ```\r\n2. Label all the nodes with the same custom label used in the nodeSelector field in the STS app. In my case, there is no custom node label used in application deployment. So we are skipping this step.\r\n\r\n3. Attach the disk randomly to any node in the same zone.\r\n    \r\n    ```\r\n    $ gcloud compute instances attach-disk gke-openebs-mysql-default-pool-dd23ce6b-j894 --disk mysql-disk1 --device-name mysql-disk1 --zone=us-central1-c\r\n\r\n    $ gcloud compute instances attach-disk gke-openebs-mysql-default-pool-dd23ce6b-prv2 --disk mysql-disk2 --device-name mysql-disk2 --zone=us-central1-c\r\n\r\n    $ gcloud compute instances attach-disk gke-openebs-mysql-default-pool-dd23ce6b-tf5j --disk mysql-disk3 --device-name mysql-disk3 --zone=us-central1-c\r\n    ```\r\n4. Ensure that ZFS utils packages are installed on your worker nodes. If it is not installed, ZFS packages can be installed.\r\n    \r\n    ```\r\n    $ sudo su -\r\n    $ sudo apt-get update\r\n    $ apt-get install zfsutils-linux -y\r\n    $ zpool import zfspv-pool\r\n    ```\r\n    \r\n    Verify Zpool information.\r\n    \r\n    ```\r\n    $ zpool list\r\n    NAME         SIZE  ALLOC   FREE  EXPANDSZ   FRAG    CAP  DEDUP  HEALTH  ALTROOT\r\n    zfspv-pool  14.5G   463M  14.0G         -     0%     3%  1.0\r\n    ```\r\n5. Verify the details of the ZFS dataset detail where the volume is present. This information is required in step 10. In the case of Statefulset, the ZFS dataset will be present on multiple nodes. So you should note down the details of the ZFS dataset and corresponding node information.\r\n    \r\n    ```\r\n    $ sudo su\r\n    $ root@gke-openebs-mysql-default-pool-dd23ce6b-tf5j:~# zfs list\r\n    NAME                                                  USED  AVAIL  REFER  MOUNTPOINT\r\n    zfspv-pool                                           10.6G  3.42G    96K  /zfspv-pool\r\n    zfspv-pool/pvc-e299a9db-0903-417b-8034-03c3dc77af87  10.6G  13.6G   462M  -\r\n    ```\r\n\r\n    From the above information, the ZFS dataset is present on Node `gke-openebs-mysql-default-pool-dd23ce6b-tf5j`. We have to update this node information in the nodeSelector field in step 10 and as `ownerNodeID` in step 11.\r\n\r\n6. Ensure OpenEBS ZFS driver pods are running in the `kube-system` namespace.\r\n    \r\n    ```\r\n    $ kubectl get pods -n kube-system -l role=openebs-zfs\r\n    NAME                       READY   STATUS           RESTARTS   AGE\r\n    openebs-zfs-controller-0   5/5     Running          0          91m\r\n    openebs-zfs-node-29dlp     2/2     Running          0          14m\r\n    openebs-zfs-node-bssq7     2/2     Running          0          14m\r\n    openebs-zfs-node-p54tq     2/2     Running\t    0          14m\r\n    ```\r\n7. Check the status of the application pod. It will be in the `Pending` state.\r\n    \r\n    ```\r\n    $ kubectl get pod\r\n    NAME                      READY   STATUS    RESTARTS   AGE\r\n    percona-9fbdb8678-z79vr   0/1     Pending   0          70m\r\n    ```\r\n8. Get the PV details of the associated application\r\n    \r\n    ```\r\n    $ kubectl get pv\r\n    NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                     STORAGECLASS     REASON   AGE\r\n    pvc-e299a9db-0903-417b-8034-03c3dc77af87  10Gi         RWO            Delete           Bound    default/demo-vol1-claim   openebs-zfspv           33m\r\n    ```\r\n9. Create a directory and copy the YAML spec of all the associated PVs into it like below.\r\n    \r\n    ```\r\n    $ mkdir mysql-restore\r\n    $ cd mysql-restore/\r\n    $ kubectl get pv pvc-e299a9db-0903-417b-8034-03c3dc77af87 -o yaml --export > pv1.yaml\r\n    ```\r\n    \r\n    Note: If it is StatefulSet, take the YAML spec of all the associated PVs of that application.\r\n\r\n10. Modify the above-copied YAML with the new hostname in the copied YAML of PV. The following is a snippet of PV spec where it mentions the new node name where the ZFS volume is created. The node information will be obtained from step 5.\r\n    ```\r\n    nodeAffinity:\r\n        required:\r\n          nodeSelectorTerms:\r\n          - matchExpressions:\r\n            - key: openebs.io/nodename\r\n              operator: In\r\n              values:\r\n              - gke-openebs-mysql-default-pool-dd23ce6b-tf5j\r\n      persistentVolumeReclaimPolicy: Delete\r\n      storageClassName: openebs-zfspv\r\n    ```\r\n11. Also, update the node information where the ZFS dataset resides into `zv`(ZFS volume) cr. The node name has to be given to the path  `spec.ownerNodeID`.\r\n    \r\n    ```\r\n    $ kubectl edit zv pvc-e299a9db-0903-417b-8034-03c3dc77af87 -n openebs\r\n    ```\r\n    \r\n    The following is the snippet of the modified information.\r\n    \r\n    ```\r\n    spec:\r\n      capacity: \"10737418240\"\r\n      compression: \"off\"\r\n      dedup: \"off\"\r\n      fsType: ext4\r\n      ownerNodeID: gke-openebs-mysql-default-pool-dd23ce6b-tf5j\r\n      poolName: zfspv-pool\r\n    ```\r\n12. Now get the PV and then delete the PV\r\n    \r\n    ```\r\n    spec:\r\n      capacity: \"10737418240\"\r\n      compression: \"off\"\r\n      dedup: \"off\"\r\n      fsType: ext4\r\n      ownerNodeID: gke-openebs-mysql-default-pool-dd23ce6b-tf5j\r\n      poolName: zfspv-pool\r\n    ```\r\n    ```\r\n    $ kubectl delete pv pvc-e299a9db-0903-417b-8034-03c3dc77af87\r\n    persistentvolume \"pvc-e299a9db-0903-417b-8034-03c3dc77af87\" deleted\r\n    ```\r\n    \r\n    The deletion of the PV will not be completed since it has the finaliser set with the PV. So we need to cancel the ongoing operation and then edit the PV and remove Finalizers. Once finalizers are removed, the volume will be automatically deleted.\r\n\r\n13. Verify that the PV of the application has been removed successfully.\r\n    \r\n    ```\r\n    $ kubectl delete pv pvc-e299a9db-0903-417b-8034-03c3dc77af87\r\n    persistentvolume \"pvc-e299a9db-0903-417b-8034-03c3dc77af87\" deleted\r\n    ```\r\n14. Now, apply the updated YAML files of the PV. \r\n    \r\n    ```\r\n    $ kubectl apply -f  pv1.yaml \r\n    ```\r\n    \r\n    Note: Perform the same for other PVs as well if the application is a StatefulSet.\r\n\r\n15. Verify that if PODs are started `Running` from `Pending` state.\r\n    \r\n    ```\r\n    $ kubectl get pod -o wide\r\n    NAME                      READY   STATUS    RESTARTS   AGE     IP         NODE                                           NOMINATED NODE   READINESS GATES\r\n    percona-9fbdb8678-z79vr   1/1     Running   0          6h43m   10.4.2.2   gke-openebs-mysql-default-pool-dd23ce6b-tf5j   <none>           <none>\r\n    ```\r\n    \r\n    Verify the PV, PVC, and ZV associated with the MySQL application.\r\n    \r\n    ```\r\n    $ kubectl get pv\r\n    NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                     STORAGECLASS    REASON   AGE\r\n    pvc-e299a9db-0903-417b-8034-03c3dc77af87   10Gi       RWO            Delete           Bound    default/demo-vol1-claim   openebs-zfspv            150m\r\n\r\n    $ kubectl get pvc\r\n    NAME              STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS    AGE\r\n    demo-vol1-claim   Bound    pvc-e299a9db-0903-417b-8034-03c3dc77af87   10Gi       RWO            openebs-zfspv   7h7m\r\n\r\n    $ kubectl get zv -n openebs\r\n    NAME                                       ZPOOL        NODE                                           SIZE          STATUS   FILESYSTEM   AGE\r\n    pvc-e299a9db-0903-417b-8034-03c3dc77af87   zfspv-pool   gke-openebs-mysql-default-pool-dd23ce6b-tf5j   10737418240   Ready    ext4         7h7m\r\n\r\n16. Login to the application and verify that you are able to access the data.\r\n    ```\r\n    $ kubectl exec -it percona-9fbdb8678-z79vr sh\r\n    sh-4.2$ mysql -uroot -pk8sDem0;\r\n    mysql: [Warning] Using a password on the command line interface can be insecure.\r\n    Welcome to the MySQL monitor.  Commands end with ; or \\g.\r\n    Your MySQL connection id is 2\r\n    Server version: 5.7.30-33 Percona Server (GPL), Release 33, Revision 6517692\r\n    \r\n    Copyright (c) 2009-2020 Percona LLC and/or its affiliates\r\n    Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.\r\n    \r\n    Oracle is a registered trademark of Oracle Corporation and/or its\r\n    affiliates. Other names may be trademarks of their respective\r\n    owners.\r\n    \r\n    Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\r\n    \r\n    mysql> SHOW DATABASES;\r\n    +--------------------+\r\n    | Database           |\r\n    +--------------------+\r\n    | information_schema |\r\n    | mysql              |\r\n    | performance_schema |\r\n    | pets               |\r\n    | sys                |\r\n    +--------------------+\r\n    5 rows in set (0.11 sec)\r\n    \r\n    mysql> USE pets;\r\n    Reading table information for completion of table and column names\r\n    You can turn off this feature to get a quicker startup with -A\r\n    \r\n    Database changed\r\n    mysql> SELECT * FROM cats;\r\n    +----+---------+--------+------------+\r\n    | id | name    | owner  | birth      |\r\n    +----+---------+--------+------------+\r\n    |  1 | Sandy   | Lennon | 2015-01-03 |\r\n    |  2 | Cookie  | Casey  | 2013-11-13 |\r\n    |  3 | Charlie | River  | 2016-05-21 |\r\n    +----+---------+--------+------------+\r\n    3 rows in set (0.00 sec)\r\n    ```","slug":"handling-node-downcluster-scaling-on-zfs-localpv-backed-workloads"},{"id":17,"title":"Recover from Volume Multi Attach Error in On-Prem Kubernetes Clusters\r","author":"Prateek Pandey\r","author_info":"Contributor and Maintainer @OpenEBS. Software Developer at @mayadata_inc. OpenSource Enthusiast\r","date":"27-08-2020\r","tags":["Kubernetes"],"excerpt":"In this blog, we'll talk about recovering from volume multi attach error in On-Prem Kubernetes clusters.\r","content":"\r\nIf you have an unmanaged Kubernetes Cluster that you have deployed on-prem or on cloud, you would have noticed that your Stateful Application pods error out with Multi-attach error whenever the node running the stateful application is abruptly shut down.\r\n\r\nThis has been a long outstanding issue in Kubernetes and is being actively worked on. Please refer to the following Kubernetes issues:\r\n\r\n- [https://github.com/kubernetes/enhancements/pull/1116](https://github.com/kubernetes/enhancements/pull/1116)\r\n- [https://github.com/kubernetes/kubernetes/issues/86281](https://github.com/kubernetes/kubernetes/issues/86281)\r\n- [https://github.com/kubernetes/kubernetes/issues/53059#issuecomment-619428689](https://github.com/kubernetes/kubernetes/issues/53059#issuecomment-619428689)\r\n\r\nThe main reason for this issue being hard to resolve is that there is no right way to determine if the node is really shut down or if it is due to a network/split-brain condition to the master nodes. And it gets a little harder with Stateful applications as we need to really determine that data is written down from older nodes to the disks, before forcibly remounting onto the new node.\r\n\r\nIn this blog, I will provide an alternate approach that can be used to work around this issue and bring your applications back online. The solution is loosely based on the same approach that Managed Kubernetes clusters like GKE/EKS perform to handle this scenario. The managed clusters use out-of-band communication to determine if the node is shut down and delete the node resources.\r\n\r\nI will demonstrate the approach of removing the node resource as a safe way to recover volumes using the following example.\r\n\r\n## **Problem**\r\n\r\n1. ### Start with a Stateful application:\r\n    I have a three node cluster with k8s version 1.15.3, to reproduce the Volume multi-attach error scenario. Deployed OpenEBS version 1.3, using cstor csi based volume and mounted to Percona pod scheduled in node csi-node2.mayalabs.io.\r\n    ```\r\n    $ kubectl get nodes\r\n    NAME                     STATUS     ROLES    AGE   VERSION\r\n    csi-master.mayalabs.io   Ready      master   39d   v1.15.3\r\n    csi-node1.mayalabs.io    Ready      none   39d   v1.15.3\r\n    csi-node2.mayalabs.io    Ready      none   39d   v1.15.3\r\n    csi-node3.mayalabs.io    Ready      none   39d   v1.15.3\r\n\r\n\r\n    $ kubectl get pvc\r\n    NAME                     STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS               AGE\r\n    demo-csi-vol-claim   Bound    pvc-b39248ab-5a99-439b-ad6f-780aae30626c   10Gi       RWO            openebs-csi-cstor-sparse   72m\r\n\r\n\r\n    $ kubectl get pods -owide\r\n    NAME                       READY   STATUS    RESTARTS   AGE    NODE\r\n    percona-6795d6fb68-pqvqh   1/1     Running   0          66m    csi-node2.mayalabs.io\r\n    ```\r\n\r\n    VolumeAttachment resource created only for volume attached to Node2 in case of CSI based persistent volumes\r\n    ```\r\n    $ kubectl get volumeattachment\r\n    NAME                                                                   ATTACHER                 PV                                         NODE                    ATTACHED   AGE\r\n    csi-9f7704015b456f146ce8c6c3bd80a5ec6cc55f4f5bfb90c61c250d0b050a283c   openebs-csi.openebs.io   pvc-b39248ab-5a99-439b-ad6f-780aae30626c   csi-node2.mayalabs.io   true       66m\r\n    ```\r\n\r\n2. ### Node ShutDown:\r\n\r\n    Shutting down kubelet service in Node2 as Percona application pod has been scheduled here, to make node `NotReady` state in the Kubernetes cluster.\r\n\r\n        $ kubectl get nodes\r\n        NAME                     STATUS     ROLES    AGE   VERSION\r\n        csi-master.mayalabs.io   Ready      master   39d   v1.15.3\r\n        csi-node1.mayalabs.io    Ready      none   39d   v1.15.3\r\n        csi-node2.mayalabs.io    NotReady   none    5m   v1.15.3\r\n        csi-node3.mayalabs.io    Ready      none   37d   v1.15.3\r\n        \r\n\r\n    In this case, the Percona pod will get stuck in a container creating a state with a multi-attach error.\r\n\r\n## **Solution:**\r\n\r\nAlthough these solutions are generic to recover the volume from the multi attach error. Based on some extra steps, I have divided them into two different sanctions based on the type of Kubernetes volumes. One is dynamic in-tree or external Kubernetes volumes, an older way of provisioning Kubernetes volumes, and the other one is CSI based Kubernetes volumes.\r\n\r\n### **Dynamic/Static Provisioner Based Volumes:**\r\n\r\n#### **Deleting Node Resource:**\r\n\r\nHere after deleting the Node resource below node related events will be generated which will trigger the force deletion of the pods, and they apparently will be scheduled to other available nodes:\r\n\r\n    $ kubectl delete nodes csi-node2.mayalabs.io\r\n    node \"csi-node2.mayalabs.io\" deleted\r\n    \r\n\r\n    $ kubectl get nodes\r\n    NAME                     STATUS     ROLES    AGE   VERSION\r\n    csi-master.mayalabs.io   Ready      master   39d   v1.15.3\r\n    csi-node1.mayalabs.io    Ready      none   39d   v1.15.3\r\n    csi-node3.mayalabs.io    Ready      none   37d   v1.15.3\r\n    \r\n\r\n##### **Check the kube-controller logs for events:**\r\n\r\n    I1021 10:37:44.336523       1 attach_detach_controller.go:573] error removing node \"csi-node2.mayalabs.io\" from desired-state-of-world: failed to delete node \"csi-node2.mayalabs.io\" from list of nodes managed by attach/detach controller--the node still contains 1 volumes in its list of volumes to attach\r\n    I1021 10:37:45.003243       1 event.go:258] Event(v1.ObjectReference{Kind:\"Node\", Namespace:\"\", Name:\"csi-node2.mayalabs.io\", UID:\"30ca0f5e-3a8f-4d0f-99fc-776d7051fd3d\", APIVersion:\"\", ResourceVersion:\"\", FieldPath:\"\"}): type: 'Normal' reason: 'RemovingNode' Node csi-node2.mayalabs.io event: Removing Node csi-node2.mayalabs.io from Controller\r\n    \r\n    \r\n    I1021 10:37:55.273070       1 gc_controller.go:62] PodGC is force deleting Pod: kube-system/openebs-csi-node-cjzlz\r\n    I1021 10:37:55.318908       1 gc_controller.go:166] Forced deletion of orphaned Pod kube-system/openebs-csi-node-cjzlz succeeded\r\n    I1021 10:37:55.318979       1 gc_controller.go:62] PodGC is force deleting Pod: openebs/openebs-ndm-8ntsv\r\n    I1021 10:37:55.352796       1 gc_controller.go:166] Forced deletion of orphaned Pod openebs/openebs-ndm-8ntsv succeeded\r\n    I1021 10:37:55.354071       1 gc_controller.go:62] PodGC is force deleting Pod: openebs/cspc-sparse-disk-pool-gg82-d9b4bff4d-9fmbn\r\n    I1021 10:37:55.420779       1 event.go:258] Event(v1.ObjectReference{Kind:\"Pod\", Namespace:\"openebs\", Name:\"cspc-sparse-disk-pool-gg82-d9b4bff4d-9fmbn\", UID:\"\", APIVersion:\"\", ResourceVersion:\"\", FieldPath:\"\"}): type: 'Normal' reason: 'TaintManagerEviction' Cancelling deletion of Pod openebs/cspc-sparse-disk-pool-gg82-d9b4bff4d-9fmbn\r\n    I1021 10:37:55.442403       1 gc_controller.go:166] Forced deletion of orphaned Pod openebs/cspc-sparse-disk-pool-gg82-d9b4bff4d-9fmbn succeeded\r\n    I1021 10:37:55.442568       1 gc_controller.go:62] PodGC is force deleting Pod: default/percona-6795d6fb68-b7dvl\r\n    I1021 10:37:55.446368       1 event.go:258] Event(v1.ObjectReference{Kind:\"ReplicaSet\", Namespace:\"openebs\", Name:\"cspc-sparse-disk-pool-gg82-d9b4bff4d\", UID:\"04f87ed3-c401-4688-8691-0716dc4693fe\", APIVersion:\"apps/v1\", ResourceVersion:\"7063677\", FieldPath:\"\"}): type: 'Normal' reason: 'SuccessfulCreate' Created pod: cspc-sparse-disk-pool-gg82-d9b4bff4d-q2l2b\r\n    I1021 10:37:55.541929       1 event.go:258] Event(v1.ObjectReference{Kind:\"Pod\", Namespace:\"default\", Name:\"percona-6795d6fb68-b7dvl\", UID:\"\", APIVersion:\"\", ResourceVersion:\"\", FieldPath:\"\"}): type: 'Normal' reason: 'TaintManagerEviction' Cancelling deletion of Pod default/percona-6795d6fb68-b7dvl\r\n    I1021 10:37:55.599155       1 gc_controller.go:166] Forced deletion of orphaned Pod default/percona-6795d6fb68-b7dvl succeeded\r\n    I1021 10:37:55.599224       1 gc_controller.go:62] PodGC is force deleting Pod: kube-system/kube-proxy-b9q25\r\n    I1021 10:37:55.613517       1 event.go:258] Event(v1.ObjectReference{Kind:\"ReplicaSet\", Namespace:\"default\", Name:\"percona-6795d6fb68\", UID:\"50b82272-9874-4688-8362-7c759ae63aef\", APIVersion:\"apps/v1\", ResourceVersion:\"7063669\", FieldPath:\"\"}): type: 'Normal' reason: 'SuccessfulCreate' Created pod: percona-6795d6fb68-pqvqh\r\n    W1021 10:37:55.621461       1 reconciler.go:328] Multi-Attach error for volume \"pvc-b39248ab-5a99-439b-ad6f-780aae30626c\" (UniqueName: \"kubernetes.io/csi/openebs-csi.openebs.io^pvc-b39248ab-5a99-439b-ad6f-780aae30626c\") from node \"csi-node1.mayalabs.io\" Volume is already exclusively attached to node csi-node2.mayalabs.io and can't be attached to another\r\n    I1021 10:37:55.629191       1 event.go:258] Event(v1.ObjectReference{Kind:\"Pod\", Namespace:\"default\", Name:\"percona-6795d6fb68-pqvqh\", UID:\"26ee6109-9d7e-4729-843b-18bb88926c87\", APIVersion:\"v1\", ResourceVersion:\"7063944\", FieldPath:\"\"}): type: 'Warning' reason: 'FailedAttachVolume' Multi-Attach error for volume \"pvc-b39248ab-5a99-439b-ad6f-780aae30626c\" Volume is already exclusively attached to one node and can't be attached to another\r\n    I1021 10:37:55.742498       1 gc_controller.go:166] Forced deletion of orphaned Pod kube-system/kube-proxy-b9q25 succeeded\r\n    I1021 10:37:55.742697       1 gc_controller.go:62] PodGC is force deleting Pod: kube-system/calico-node-4fv7n\r\n    I1021 10:37:55.787435       1 gc_controller.go:166] Forced deletion of orphaned Pod kube-system/calico-node-4fv7n succeeded\r\n    \r\n\r\n### **CSI Based Volumes:**\r\n\r\n#### **Attach-Detach Controller:**\r\n\r\nIf the volume is created using CSI Provisioner, a custom resource `volumeattachment` would be created. The Attach-detach controller will wait for the `maxWaitForUnmountDuration` i.e., 6 minutes to forcefully detach the attached volume from the node. Then the CR will be recreated and attach to any available node. To recover from the multi-attach error, this `volumeattachment` CR can be deleted along with node CR. Therefore the time taken to mount the volume on a new node will be reduced by 6 minutes.\r\n\r\n    $ kubectl get volumeattachment pvc-b39248ab-5a99-439b-ad6f-780aae30626c\r\n    NAME                                                                   ATTACHER                 PV                                         NODE                    ATTACHED   AGE\r\n    csi-6ae3ead0d1c3a6e73e7d4c8e27f9098b927f3e4edc21bcf6bb7cf3fcdb4101de   openebs-csi.openebs.io   pvc-b39248ab-5a99-439b-ad6f-780aae30626c   csi-node1.mayalabs.io   true       11m\r\n    \r\n\r\n    \r\n    $ kubectl logs -f kube-controller-manager-csi-master.mayalabs.io -n kube-system\r\n\r\n    \r\n    ```\r\n    W1021 10:43:55.629673       1 reconciler.go:232] attacherDetacher.DetachVolume started for volume \"pvc-b39248ab-5a99-439b-ad6f-780aae30626c\" (UniqueName: \"kubernetes.io/csi/openebs-csi.openebs.io^pvc-b39248ab-5a99-439b-ad6f-780aae30626c\") on node \"csi-node2.mayalabs.io\" This volume is not safe to detach, but maxWaitForUnmountDuration 6m0s expired, force detaching\r\n    I1021 10:43:55.671000       1 operation_generator.go:526] DetachVolume.Detach succeeded for volume \"pvc-b39248ab-5a99-439b-ad6f-780aae30626c\" (UniqueName: \"kubernetes.io/csi/openebs-csi.openebs.io^pvc-b39248ab-5a99-439b-ad6f-780aae30626c\") on node \"csi-node2.mayalabs.io\" \r\n    I1021 10:43:55.730390       1 reconciler.go:288] attacherDetacher.AttachVolume started for volume \"pvc-b39248ab-5a99-439b-ad6f-780aae30626c\" (UniqueName: \"kubernetes.io/csi/openebs-csi.openebs.io^pvc-b39248ab-5a99-439b-ad6f-780aae30626c\") from node \"csi-node1.mayalabs.io\" \r\n    I1021 10:43:55.752273       1 operation_generator.go:358] AttachVolume.Attach succeeded for volume \"pvc-b39248ab-5a99-439b-ad6f-780aae30626c\" (UniqueName: \"kubernetes.io/csi/openebs-csi.openebs.io^pvc-b39248ab-5a99-439b-ad6f-780aae30626c\") from node \"csi-node1.mayalabs.io\" \r\n    I1021 10:43:55.753344       1 event.go:258] Event(v1.ObjectReference{Kind:\"Pod\", Namespace:\"default\", Name:\"percona-6795d6fb68-pqvqh\", UID:\"26ee6109-9d7e-4729-843b-18bb88926c87\", APIVersion:\"v1\", ResourceVersion:\"7063944\", FieldPath:\"\"}): type: 'Normal' reason: 'SuccessfulAttachVolume' AttachVolume.Attach succeeded for volume \"pvc-b39248ab-5a99-439b-ad6f-780aae30626c\" \r\n    ```\r\n    \r\n\r\nThat's it for today's post. I hope you find it helpful. Feedback and comments are appreciated.\r\n","slug":"recover-from-volume-multi-attach-error-in-onprem-kubernetes-clusters"},{"id":18,"title":"Resize Kubernetes StatefulSets without impact\r","author":"Sai Chaithanya\r","author_info":"A developer who is always eager to learn, loves algorithms, maths, Kubernetes, and programming, Passionate about Data Science. Enjoys playing kabaddi and traveling.\r","date":"25-08-2020\r","tags":["Kubernetes"," OpenEBS"],"excerpt":"Read this post if you are a cStor CSI user who's looking to resize statefulsets without any impact of StatefulSet applcations. \r","content":"\r\nIn large scale environments, storage is one of the hard things to manage, and it will be the most crucial component as it has DATA with it. OpenEBS, leading open source Cloud Native Storage, makes managing storage easier in Kubernetes environments. MayaData, the company behind the OpenEBS project, has the vision of achieving data agility by transforming Kubernetes as a data plane. cStor is one of the storage engines of OpenEBS.\r\n\r\nThis blog is for OpenEBS users, specifically cStor CSI users looking to resize their ***Kubernetes StatefulSets*** without any impact of StatefulSet applications.\r\n\r\n### **Steps involved to resize** ***Kubernetes StatefulSets***\r\n\r\n1. Increase the volume size of the PVC.\r\n\r\n2. Update StatefulSet volumeClaimTemplate storage capacity.\r\n\r\n### Infrastructure details:\r\n\r\n    Kubernetes Cluster: Bare Metal\r\n    Kubernetes Version: v1.17.2\r\n    OpenEBS Version: 2.0.0\r\n\r\n### Installation of CStor setup:\r\n\r\nApplied OpenEBS 2.0.0 version of cStor operator [yaml](https://github.com/openebs/charts/blob/gh-pages/2.0.0/cstor-operator.yaml) and ndm operator [yaml](https://github.com/openebs/charts/blob/gh-pages/2.0.0/ndm-operator.yaml) via kubectl apply and provisioned cStor pools using CSPC API by following the steps mentioned [here](https://github.com/openebs/cstor-operators/blob/master/docs/quick.md).\r\n\r\n    system@master$ kubectl get cspc -n openebs\r\n    NAME          HEALTHYINSTANCES   PROVISIONEDINSTANCES   DESIREDINSTANCES   AGE\r\n    cspc-stripe   3                  3                      3                  3m23s\r\n\r\n### Create StorageClass:\r\n\r\nCreate a StorageClass pointing to the above cStor pool(cspc-stripe) which will help in provisioning the cStor volume. For expanding the volumes **allowVolumeExpansion** parameter should set to true\r\n\r\n    system@master$ cat csi-sc.yaml \r\n    kind: StorageClass\r\n    apiVersion: storage.k8s.io/v1\r\n    metadata:\r\n      name: openebs-csi-sc\r\n    provisioner: cstor.csi.openebs.io\r\n    allowVolumeExpansion: true\r\n    parameters:\r\n      cas-type: cstor\r\n      replicaCount: \"1\"\r\n      cstorPoolCluster: cspc-stripe\r\n\r\n### Provision StatefulSet:\r\n\r\nCreate StatefulSet to point to the above storageclass. In this example, mongo statefulset will be provisioned and volume size will be expanded from 5Gi to 15Gi. Below is the sample statefulset used for expansion:\r\n\r\n    system@master$ cat mongo-sts.yaml \r\n    apiVersion: apps/v1\r\n    kind: StatefulSet\r\n    metadata:\r\n      name: mongo\r\n      Namespace: mongo-ns\r\n    spec:\r\n      selector:\r\n        matchLabels:\r\n          role: mongo\r\n          environment: test\r\n      serviceName: \"mongo\"\r\n      replicas: 3\r\n      template:\r\n        metadata:\r\n          labels:\r\n            role: mongo\r\n            environment: test\r\n        spec:\r\n          terminationGracePeriodSeconds: 10\r\n          containers:\r\n          - name: mongo\r\n            image: mongo:latest\r\n            imagePullPolicy: IfNotPresent\r\n            command:\r\n              - mongod\r\n              - \"--replSet\"\r\n              - rs0\r\n            ports:\r\n              - containerPort: 27017\r\n            volumeMounts:\r\n              - name: mongo-persistent-storage\r\n                mountPath: /data/db\r\n          - name: mongo-sidecar\r\n            image: cvallance/mongo-k8s-sidecar\r\n    ...\r\n    ...\r\n      volumeClaimTemplates:\r\n        - metadata:\r\n            name: mongo-persistent-storage\r\n          spec:\r\n            storageClassName: \"openebs-csi-sc\"\r\n            accessModes: [\"ReadWriteOnce\"]\r\n            resources:\r\n              requests:\r\n                storage: 5Gi\r\n\r\nAfter applying the above YAML. This results in the provisioning of volumes with **5Gi** capacity as mentioned in **volumeClaimTemplates,** and applications are in Running state.\r\n\r\n    system@master$ kubectl get pods -n mongo-ns\r\n    NAME      READY   STATUS    RESTARTS   AGE\r\n    mongo-0   2/2     Running   0          8m24s\r\n    mongo-1   2/2     Running   0          7m5s\r\n    mongo-2   2/2     Running   0          6m4s\r\n    \r\n    -----------------------------------------------------------------------------------\r\n    system@master$ kubectl get pvc -n mongo-ns\r\n    NAME                               STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS     AGE\r\n    mongo-persistent-storage-mongo-0   Bound    pvc-4926e6bb-3226-4de9-add5-e603ea2b948b   5Gi        RWO            openebs-csi-sc   6m48s\r\n    mongo-persistent-storage-mongo-1   Bound    pvc-fcde1fde-65ee-48ab-8f79-b7c68edfb934   5Gi        RWO            openebs-csi-sc   5m29s\r\n    mongo-persistent-storage-mongo-2   Bound    pvc-d94e5304-7f29-4d6c-b157-1e65f75511f1   5Gi        RWO            openebs-csi-sc   4m28s\r\n\r\nNow verify the size of the volume by exec into any one of the application pods. In below output **/dev/sde** is the persistent volume and it’s capacity is **5G**.\r\n\r\n    system@master$ kubectl exec -it mongo-0 -n mongo-ns -c mongo -- df -h\r\n    Filesystem      Size  Used Avail Use% Mounted on\r\n    overlay          98G   12G   82G  13% /\r\n    tmpfs            64M     0   64M   0% /dev\r\n    tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup\r\n    /dev/sde        4.8G  311M  4.5G   7% /data/db\r\n    /dev/sda1        98G   12G   82G  13% /etc/hosts\r\n    shm              64M     0   64M   0% /dev/shm\r\n    tmpfs           3.9G   12K  3.9G   1% /run/secrets/kubernetes.io/serviceaccount\r\n    tmpfs           3.9G     0  3.9G   0% /proc/acpi\r\n    tmpfs           3.9G     0  3.9G   0% /proc/scsi\r\n    tmpfs           3.9G     0  3.9G   0% /sys/firmware\r\n\r\nNow, let’s resize the volume capacity by following the steps mentioned in the blog's beginning.\r\n\r\nStep1: Increase the volume size of PVC\r\n\r\nExpand the size of the PVC size by applying below command on all the StatefulSet volumes:\r\n\r\n    kubectl patch pvc mongo-persistent-storage-mongo-0 -p '{ \"spec\": { \"resources\": { \"requests\": { \"storage\": \"15Gi\" }}}}' -n mongo-ns\r\n    \r\n    kubectl patch pvc mongo-persistent-storage-mongo-1 -p '{ \"spec\": { \"resources\": { \"requests\": { \"storage\": \"15Gi\" }}}}' -n mongo-ns\r\n    \r\n    \r\n    kubectl patch pvc mongo-persistent-storage-mongo-2 -p '{ \"spec\": { \"resources\": { \"requests\": { \"storage\": \"15Gi\" }}}}' -n mongo-ns\r\n\r\nAfter patching the above PVCs **openebs-cstor-csi** plugin is responsible for performing the resize operation on cStor volume. Verify whether volumes are expanded successfully by performing the following commands\r\n\r\n    system@master:  kubectl get pvc -n mongo-ns\r\n    NAME                               STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS     AGE\r\n    mongo-persistent-storage-mongo-0   Bound    pvc-4926e6bb-3226-4de9-add5-e603ea2b948b   15Gi       RWO            openebs-csi-sc   32m\r\n    mongo-persistent-storage-mongo-1   Bound    pvc-fcde1fde-65ee-48ab-8f79-b7c68edfb934   15Gi       RWO            openebs-csi-sc   30m\r\n    mongo-persistent-storage-mongo-2   Bound    pvc-d94e5304-7f29-4d6c-b157-1e65f75511f1   15Gi       RWO            openebs-csi-sc   29m\r\n\r\nAbove PVC shows that volumes are expanded successfully. Now verify capacity by exec in to any one of the application pods\r\n\r\n    system@master$ kubectl exec -it mongo-0 -n mongo-ns -c mongo -- df -h\r\n    Filesystem      Size  Used Avail Use% Mounted on\r\n    overlay          98G   12G   82G  13% /\r\n    tmpfs            64M     0   64M   0% /dev\r\n    tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup\r\n    /dev/sde         15G  313M   15G   3% /data/db\r\n    /dev/sda1        98G   12G   82G  13% /etc/hosts\r\n    shm              64M     0   64M   0% /dev/shm\r\n    tmpfs           3.9G   12K  3.9G   1% /run/secrets/kubernetes.io/serviceaccount\r\n    tmpfs           3.9G     0  3.9G   0% /proc/acpi\r\n    tmpfs           3.9G     0  3.9G   0% /proc/scsi\r\n    tmpfs           3.9G     0  3.9G   0% /sys/firmware\r\n\r\nNote: This step only helps to resize the volumes that are already provisioned for consuming via statefulsets. If StatefulSet is scaled up, then the newly provisioning volume will have the old size(since the volumeClaimTemplate is not yet updated in the application spec).\r\n\r\n**Step2: Update StatefulSet volumeClaimTemplate storage size**\r\n\r\nSince natively resizing of statefulset volumeClaimTemplates is not yet supported in Kubernetes, one needs to follow this step to update size in the volume claim template. For further updates, track the enhancement proposal [here](https://github.com/kubernetes/enhancements/pull/1848).\r\n\r\nUpdate the capacity in volumeClaimTemplate of applied statefulset yaml lke below example:\r\n\r\n    system@master$ cat mongo-sts.yaml\r\n    cat mongo-sts.yaml \r\n    apiVersion: apps/v1\r\n    kind: StatefulSet\r\n    metadata:\r\n      name: mongo\r\n      namespace: mongo-ns\r\n    spec:\r\n      selector:\r\n        matchLabels:\r\n          role: mongo\r\n          environment: test\r\n      serviceName: \"mongo\"\r\n      replicas: 3\r\n    ...\r\n    ...\r\n      volumeClaimTemplates:\r\n        - metadata:\r\n            name: mongo-persistent-storage\r\n          spec:\r\n            storageClassName: \"openebs-csi-sc\"\r\n            accessModes: [\"ReadWriteOnce\"]\r\n            resources:\r\n              requests:\r\n                storage: 15Gi\r\n\r\nNow delete the statefulset without deleting the statefulset pods for not to have any down time for application and apply the updated volumeClaimTemplate.\r\n\r\n    system@master$ kubectl delete sts mongo -n mongo-ns --cascade=false\r\n    statefulset.apps \"mongo\" deleted\r\n    \r\n    system@master$ kubectl apply -f mongo-sts.yaml \r\n    statefulset.apps/mongo created\r\n    service/mongo unchanged\r\n\r\nVerify changes by describing the sts\r\n\r\n    system@master$ kubectl describe sts mongo -n mongo-ns\r\n    \r\n    Name:               mongo\r\n    Namespace:          mongo-ns\r\n    CreationTimestamp:  Mon, 17 Aug 2020 16:38:51 +0530\r\n    Selector:           environment=test,role=mongo\r\n    ...\r\n    ...\r\n    Volume Claims:\r\n      Name:          mongo-persistent-storage\r\n      StorageClass:  openebs-csi-sc\r\n      Labels:        <none>\r\n      Annotations:   <none>\r\n      Capacity:      15Gi\r\n      Access Modes:  [ReadWriteOnce]\r\n\r\nIn the above output, capacity has been updated from **5Gi** to **15Gi**. So successfully updated the statefulset capacity without any down time.\r\n","slug":"resize-kubernetes-statefulsets-without-impact"},{"id":19,"title":"Handling node down/cluster scaling on LocalPV backed workloads\r","author":"Ranjith Raveendran\r","author_info":"Ranjith is working as a Software Engineer at MayaData and working in the OpenEBS project. In his free time, he listens to music, watches movies, and goes for bike riding.\r","date":"21-08-2020\r","tags":["LocalPV"," OpenEBS"],"excerpt":"In this article, we'll discuss the steps that is getting handled when a node down/cluster scaling on LocalPV backs workloads.\r","content":"\r\nKubernetes is increasingly used for running production-grade stateful services. Organizations are making progress on a containerized form of their production workloads for running in Kubernetes. There are already solutions available for the containerized version of stateful applications, network, storage, etc.\r\n\r\n### Handling node down / cluster scaling on Local PV backed workloads\r\n\r\nOpenEBS is one of the leading containerized storage solutions for Kubernetes, and it is a rapidly growing Sandbox project in CNCF. MayaData is the primary maintainer and contributor of OpenEBS along with other companies. MayaData also contributed another open source project, Litmus, into CNCF, which does mostly Chaos engineering in Kubernetes, which helps SREs and developers to do all kinds of testing of their applications and components in Kubernetes before going into production.\r\n\r\nIt is a must requirement of a persistent storage solution for running the stateful application, be it a **Deployment** or **StatefulSet**. OpenEBS provides many storage engines, and each storage engine is suitable for specific applications or workloads. Some engines provide storage level synchronous replication, capable of taking snapshots and cloning, backup and restore, volume expansion, CSI complaint, performance-oriented, etc. So choosing the engine based on the workload requirement is an important activity.\r\n\r\nOpenEBS provides dynamic provisioning of LocalPV using an external device, and this external device will be allocated entirely to an application. You can also use the partitioned disk for using OpenEBS LocalPV by using the `openebs-hostpath` storage engine. In this article, we provisioned a MySQL deployment on an OpenEBS LocalPV device dynamically.\r\n\r\nThis article is a step-by-step instruction. We will mention how a MySQL application deployment running on ***OpenEBS LocalPV*** device volume is getting handled when a Node down scenario or a cluster scale down situation happens in the GKE cluster. In GKE and some other managed clusters like EKS, the node name will change if the cluster undergoes a scale down and scale-up operation has performed. So the application running on the ***OpenEBS LocalPV*** device will not be able to attach to the new node since the corresponding PV has volume node affinity. We need to update the new node name details in PV, where the disk got attached.\r\n\r\nIn this article, we discuss the steps that need to be performed to make the application into a running state when a Node down / scale down cluster scenario has happened. This situation is usually required in case of managed clusters where the node name will get changed during this scenario. As stated earlier, the following approach works fine for both Deployment type and StatefulSet type, but ensure that the following steps are correctly satisfied. Let’s start with the step by step instructions once you have scaled up the cluster after a scale down scenario.\r\n\r\n1. Verify all nodes are now in Ready state.\r\n    ```\r\n    $ kubectl get node\r\n    NAME                                           STATUS   ROLES    AGE   VERSION\r\n    gke-openebs-mysql-default-pool-d55297a7-bjjp   Ready    <none>   74s   v1.16.13-gke.1\r\n    gke-openebs-mysql-default-pool-d55297a7-j1vm   Ready    <none>   80s   v1.16.13-gke.1\r\n    gke-openebs-mysql-default-pool-d55297a7-pvg4   Ready    <none>   85s   v1.16.13-gke.1\r\n    ```\r\n2. Ensure OpenEBS pods are in Running state.\r\n    ```\r\n    $ kubectl get pod -n openebs\r\n    NAME                                           READY   STATUS    RESTARTS   AGE\r\n    maya-apiserver-76cb4df9b8-wpbf6                1/1     Running   0          22m\r\n    openebs-admission-server-5cf696b8d5-d97bn      1/1     Running   0          22m\r\n    openebs-localpv-provisioner-7654f6dbd9-hskq8   1/1     Running   0          22m\r\n    openebs-ndm-7dtts                              1/1     Running   0          2m19s\r\n    openebs-ndm-c4r4m                              1/1     Running   0          2m23s\r\n    openebs-ndm-lnb5c                              1/1     Running   0          2m12s\r\n    openebs-ndm-operator-6cfc59b69b-684nx          1/1     Running   0          22m\r\n    openebs-provisioner-7d9884d4ff-tfcxj           1/1     Running   0          22m\r\n    openebs-snapshot-operator-7ff577c889-kfttj     2/2     Running   0          22m\r\n    ```\r\n3. Check the status of the application pod. It will be in the `Pending` state.\r\n    ```\r\n    $ kubectl get pod\r\n    NAME                      READY   STATUS    RESTARTS   AGE\r\n    percona-9fbdb8678-lncd5   0/1     Pending   0          17m\r\n    ```\r\n4. Label all the nodes with the same custom label used in the `nodeSelector` field in the STS app. In my case, there is no custom node label used in application deployment. So we are skipping this step.\r\n\r\n5. Attach the disk randomly to any node in the same zone. Note down the device name and node name where it is getting attached. This information will be needed in step 9.\r\n    ```\r\n    $ gcloud compute instances attach-disk gke-openebs-mysql-default-pool-d55297a7-bjjp --disk mysql-disk1 --device-name mysql-disk1 --zone=us-central1-c\r\n\r\n    $ gcloud compute instances attach-disk gke-openebs-mysql-default-pool-d55297a7-j1vm --disk mysql-disk2 --device-name mysql-disk2 --zone=us-central1-c\r\n\r\n    $ gcloud compute instances attach-disk gke-openebs-mysql-default-pool-d55297a7-pvg4 --disk mysql-disk3 --device-name mysql-disk3 --zone=us-central1-c\r\n    ```\r\n6. Verify BDs are updated with new node names\r\n    ```\r\n    $ kubectl get bd -n openebs\r\n    NAME                                           NODENAME                                       SIZE          CLAIMSTATE   STATUS   AGE\r\n    blockdevice-4f51859193d333687a873af7acf8ad78   gke-openebs-mysql-default-pool-d55297a7-j1vm   32212254720   Unclaimed    Active   37m\r\n    blockdevice-967d7816c2a2d73b91c8c6310dc70465   gke-openebs-mysql-default-pool-d55297a7-bjjp   32212254720   Claimed      Active   37m\r\n    blockdevice-ddfc782ea661fc9007a896438f483e3d   gke-openebs-mysql-default-pool-d55297a7-pvg4   32212254720   Unclaimed    Active   37m\r\n    ```\r\n7. Get the PV details of the associated application\r\n    ```\r\n    $ kubectl get pv\r\n    NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                     STORAGECLASS     REASON   AGE\r\n    pvc-5cd17649-efe4-46e1-a5f3-f779b0e03999   5G         RWO            Delete           Bound    default/demo-vol1-claim   openebs-device            33m\r\n    ```\r\n8. Create a directory and copy the YAML spec of all the associated PVs into it like below\r\n    ```\r\n    $ mkdir mysql-restore\r\n    $ cd mysql-restore/\r\n    $ kubectl get pv pvc-5cd17649-efe4-46e1-a5f3-f779b0e03999 -o yaml --export > pv1.yaml\r\n    ```\r\n    Note: If it is StatefulSet, take the YAML spec of all the associated PVs of that application.\r\n\r\n9. Modify the above-copied YAML with the new hostname in the copied YAML of PV. The following is that snippet of PV spec where it mentions the new node name where the Local disk is attached.\r\n    ```\r\n    path: /dev/disk/by-id/scsi-0Google_PersistentDisk_mysql-disk1\r\n      nodeAffinity:\r\n        required:\r\n          nodeSelectorTerms:\r\n          - matchExpressions:\r\n            - key: kubernetes.io/hostname\r\n              operator: In\r\n              values:\r\n              - gke-openebs-mysql-default-pool-d55297a7-bjjp\r\n    ```\r\n10. Now get the PV and then delete the PV\r\n   \r\n    ```\r\n    $ kubectl get pv\r\n    NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                     STORAGECLASS     REASON   AGE\r\n    pvc-5cd17649-efe4-46e1-a5f3-f779b0e03999   5G         RWO            Delete           Bound    default/demo-vol1-claim   openebs-device            36m\r\n \r\n    $ kubectl delete pv pvc-5cd17649-efe4-46e1-a5f3-f779b0e03999\r\n    persistentvolume \"pvc-5cd17649-efe4-46e1-a5f3-f779b0e03999\" deleted\r\n    ```\r\n    The deletion of the PV will not be completed since it has the finaliser set with the PV. So we need to cancel the ongoing operation and then edit the PV and remove Finalizers. Once finalizers are removed, the volume will be automatically deleted.\r\n\r\n11. Verify that the PV of the application has been removed successfully.\r\n    ```\r\n    $ kubectl get pv\r\n    No resources were found in the default namespace.\r\n    ```\r\n12. Now, apply the updated YAML files of the PV.\r\n    ```\r\n    $ kubectl apply -f  pv1.yaml \r\n    ```\r\n    Note: Perform the same for other PVs as well if the application is a StatefulSet.\r\n\r\n13. Verify that if PODs are started `Running` from `Pending` state.\r\n    ```\r\n    $ kubectl get pod -o wide\r\n    NAME                      READY   STATUS    RESTARTS   AGE   IP          NODE                                           NOMINATED NODE   READINESS GATES\r\n    percona-9fbdb8678-lncd5   1/1     Running   0          29m   10.16.0.2   gke-openebs-mysql-default-pool-d55297a7-bjjp   <none>           <none>\r\n    ```\r\n14. Log in to the application and verify that you are able to access the data.\r\n\r\n    ```\r\n    $ kubectl exec -it percona-9fbdb8678-lncd5 sh\r\n    kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl kubectl exec [POD] -- [COMMAND] instead.\r\n    sh-4.2$ mysql -uroot -pk8sDem0;\r\n    mysql: [Warning] Using a password on the command line interface can be insecure.\r\n    Welcome to the MySQL monitor.  Commands end with ; or \\g.\r\n    Your MySQL connection id is 2\r\n    Server version: 5.7.30-33 Percona Server (GPL), Release 33, Revision 6517692\r\n    \r\n    Copyright (c) 2009-2020 Percona LLC and/or its affiliates\r\n    Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.\r\n    \r\n    Oracle is a registered trademark of Oracle Corporation and/or its\r\n    affiliates. Other names may be trademarks of their respective\r\n    owners.\r\n    \r\n    Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\r\n\r\n    mysql> SHOW DATABASES;\r\n    +--------------------+\r\n    | Database           |\r\n    +--------------------+\r\n    | information_schema |\r\n    | mysql              |\r\n    | performance_schema |\r\n    | pets               |\r\n    | sys                |\r\n    +--------------------+\r\n    5 rows in set (0.07 sec)\r\n    \r\n    mysql> use pets;\r\n    \r\n    Reading table information for completion of table and column names\r\n    You can turn off this feature to get a quicker startup with -A\r\n    \r\n    Database changed\r\n    mysql> SELECT * FROM cats;\r\n    +----+---------+--------+------------+\r\n    | id | name    | owner  | birth      |\r\n    +----+---------+--------+------------+\r\n    |  1 | Sandy   | Lennon | 2015-01-03 |\r\n    |  2 | Cookie  | Casey  | 2013-11-13 |\r\n    |  3 | Charlie | River  | 2016-05-21 |\r\n    +----+---------+--------+------------+\r\n    3 rows in set (0.00 sec)\r\n    ```","slug":"handling-node-downcluster-scaling-on-localpv-backed-workloads"},{"id":20,"title":"OpenEBS-Velero backup/restore of stateful applications\r","author":"Vishnu Itta\r","author_info":"Developer who is always eager to learn, loves math, algorithms, & programming. Have a good experience in storage protocols, ZFS, FreeBSD internals, Linux, device drivers.\r","date":"04-08-2020\r","tags":["OpenEBS"," Velero"],"excerpt":"In this blog, we will go through the backup/restore solution provided to its users by OpenEBS with the help of Velero.\r","content":"\r\n### **Backup/Restore of stateful applications in OpenEBS**\r\n\r\nSREs play a crucial role in automating operations. This role includes handling infrastructure upgrades and the upgrades of software running on that infrastructure. When running stateful workloads, the data must be backed up before any upgrades.\r\n\r\nAdditionally, workloads on Kubernetes are often different than traditional monolithic applications since Kubernetes supports microservices and loosely coupled workloads. This brings-in the need for a `cloud-native` design of backup/restore per workload or application. Once implemented this approach provides benefits to users such as an app-centric view, ease of management, setting of RPO/RTO at the workload level, and others. To learn more about cloud native backup drivers and requirements - please read this [thenewstack.io article](https://thenewstack.io/cloud-native-backups-disaster-recovery-and-migrations-on-kubernetes/).\r\n\r\nThe below graphic shows microservices, and their loosely coupled nature. Managing backups and the tuning of RPO/RTO per microservice is required to preserve the loosely coupled nature of these workloads and of the teams responsible for them.\r\n![OpenEBS Velero backup/restore of stateful applications: fig 1](https://lh4.googleusercontent.com/JyIxZZtj-1rBOGo2z1bKcYlD9-halM8dXpChtOIPro_aZEhQObTL_K5_Be_hLgqXl7aT68jYqFjNE9C6rZK0IRaV_neH4DURZhUr3z5FkVirzMirk_z8FiscY6_sb3JPhlAx1XRL)\r\nThe following are **challenges** in redesigning backup/restore of K8s applications:\r\n\r\n- Ability to look from the application view rather than only the data\r\n- Dependencies with K8s constructs like node names, PVCs, storage classes, topologies in them\r\n- Snapshots of selected volumes rather than entire mount point/disk in hyper-converged infrastructure\r\n- K8s application deployment workflow to copy data during a restore whether using operators or another method\r\n\r\nIn this blog, we will go through a backup/restore solution for ***OpenEBS*** with the help of ***Velero***. OpenEBS is leading open source container attached storage solution, and Velero is one of the most used open-source tools for backups in Kubernetes environments.\r\n\r\n### **Backup/Restore solution**\r\n\r\nThis solution, with Velero, provides a declarative way for users to specify\r\n\r\n- object storage as the destination location to store backed-up data\r\n- K8s applications and its resources which are part of the backup\r\n- storage provider configuration to backup/restore data\r\n- schedules to take a backup at regular intervals\r\n- restore selected resources from the selected backup\r\n- app-specific hooks to execute before and after performing backup/restore\r\n\r\nLet's start by examining what OpenEBS, as container attached storage, offers. It has many kinds of storage engines as below:\r\n\r\n- Local PV host path and block device\r\n- Jiva\r\n- CStor\r\n- Local PV ZFS\r\n\r\n### **Local PV / Jiva Volumes + Restic + Restore Item Action plugin**\r\n\r\nOpenEBS Local PV volumes are prominent among cloud-native applications. These applications themselves take care of replicating data and snapshotting. As the name suggests, these are used in hyper-converged infrastructure. This brings in a few challenges during backup/restoration.\r\n\r\nLocal PVs related storage classes will have `WaitForFirstConsumer`. It provides delayed binding of volumes until Pod gets scheduled on the node. K8s sets the node name as an annotation on PVC. Restoring that PVC onto the destination cluster will leave the pod in pending state. This solution takes care of it by applying node name mapping in PVC annotation. Restore Item Action plugin, contributed by OpenEBS, in Velero performs this mapping.\r\n\r\nVelero's in-built file-based `Restic` plugin helps in backing up the application's data. `Init` container will be injected into the application to copy data from the destination location to the volume.\r\n\r\nJiva volumes are used by applications that need replication functionality from storage providers. File-based `Restic` plugin can be used to backup/restore applications using jiva volumes.\r\n\r\n### **CStor / Local PV ZFS + Velero plugin**\r\n\r\nStandard applications use OpenEBS cStor volumes. These applications need replication, snapshotting, cloning, etc., from storage providers. Also, these applications are free to run-anywhere-in-the-cluster nature. OpenEBS have a cStor velero-plugin for crash-consistent backup of data. This plugin performs pausing of IOs on the volume before the snapshot is taken on all the replicas. It resumes IOs once the point-in-time snapshot is taken. It reads the snapshot content from one of the replicas and backs it up at the object location. When a Schedule is newly created, full data will be backed up at the destination location. The plugin manages the completion status of the backup. On the next iterations, the plugin just backups the changes from previous successful backup.\r\n\r\nBased on the replication settings of cStor at the destination, the plugin takes care of copying data to the configured number of replicas. The connection between iSCSI target pod and replica pods is not established until data is copied into the volume. This avoids usage of the PV by any application during restore time.\r\n\r\nCStor plugin also provides an option to keep backups locally with the main volume in the form of local snapshots. Users can create a backup of applications and with local snapshots. Restoring these backups, which consists of local snapshots, can be done in a different namespace of the same cluster.\r\n\r\nWork-related to local PV ZFS plugin is in-active development to provide all the features as mentioned above and much more.\r\n\r\n### **Summary**\r\n\r\nTo summarize, a new kind of thinking (or) a new kind of approach is required to do cloud-native backups. OpenEBS has made tremendous progress in achieving it and provides various features and flavors of backup/restoration of its volumes.\r\n\r\n- File-based\r\n- Point-in-time block-based local snapshot and restore\r\n- Full and incremental block-based remote backup and restore\r\n- Per-workload backups\r\n- K8s resources transformations\r\n\r\nCredits to the Velero team for building a wonderful open-source backup/restore tool.\r\n\r\nPlease visit [https://docs.openebs.io](https://docs.openebs.io/), [https://velero.io](https://velero.io/) for more details about storage class, backup/restore examples, Velero.\r\n","slug":"openebsvelero-backuprestore-of-stateful-applications"},{"id":21,"title":"Kubernetes StatefulSet on ppc64le using OpenEBS LocalPV provisioner\r","author":"Peeyush Gupta\r","author_info":"Peeyush, Sr. Developer Advocate, DigitalOcean, is a cloud enthusiast with 5+ years of experience in developing cloud platforms and helping customers migrate their legacy applications to the cloud.\r","date":"16-07-2020\r","tags":["OpenEBS"," Kubernetes"," LocalPV"],"excerpt":"In this blog, we'll explain how to install OpenEBS on Kubernetes StatefulSet running on the ppc64le platform & to using the OpenEBS LocalPV provisioner to deploy a StatefulSet.\r","content":"\r\nGuest post by Peeyush Gupta, Sr. Developer Advocate, DigitalOcean\r\n\r\n**OpenEBS** is the leading open-source project for container-attached and container-native storage on **Kubernetes**. OpenEBS adopts Container Attached Storage (CAS) approach, where each workload is provided with a dedicated storage controller. OpenEBS implements granular storage policies and isolation that enable users to optimize storage for each specific workload. OpenEBS runs in userspace and does not have any Linux kernel module dependencies. Here is how the setup looks like for OpenEBS LocalPV hostpath:\r\n![Kubernetes StatefulSet on ppc64le using OpenEBS LocalPV provisioner](https://lh4.googleusercontent.com/-erccwTcJCmyJGswEZ3Pul1-pvJO-kvn34nr22mqYumR1IHUVhX8BWOeennt1u91EYUKtpUfAPBSiP1XD_1z6XYmG8Tlywvl9GellLpkr8EyYTFLXT3YpIZ_nneRcen_G8uKVV6Q)\r\nIn this tutorial, we will see how we can install OpenEBS on Kubernetes running on the ppc64le platform. Then we will use the OpenEBS LocalPV provisioner to deploy a StatefulSet. The ppc64le servers used in this tutorial are running on IBM Cloud.\r\nKubernetes support multi-arch platforms. You can deploy the cluster on ppc64le based servers using kubeadm. For this tutorial, I am using a 3 node cluster:\r\n\r\n    root@openebs-k8s-server:~# kubectl  get nodes\r\n    NAME                 STATUS   ROLES    AGE   VERSION\r\n    openebs-k8s-server   Ready    master   17h   v1.18.5\r\n    openebs-worker-1     Ready    <none>   17h   v1.18.5\r\n    openebs-worker-2     Ready    <none>   17h   v1.18.5\r\n\r\nWe will be deploying OpenEBS lite on this cluster. Here is an excellent blog post on how to do that: [https://help.mayadata.io/hc/en-us/articles/360031969532-Installing-OpenEBS-with-only-Local-PV-support](https://help.mayadata.io/hc/en-us/articles/360031969532-Installing-OpenEBS-with-only-Local-PV-support). To get started, deploy the openebs-operator-lite.yaml file for ppc64le using:\r\n\r\n    kubectl apply -f https://openebs.github.io/charts/openebs-operator-lite-ppc64le.yaml\r\n\r\nOnce deployed, you should be able to see the node-disk-manager and LocalPV components running. Note that node-disk-manager is not a mandatory component for provisioning LocalPV hostpath volumes. OpenEBS LocalPV provisioner can be installed and run standalone as well.\r\n\r\n    root@openebs-k8s-server:~# kubectl  get pods --all-namespaces\r\n    NAMESPACE     NAME                                           READY   STATUS    RESTARTS   AGE\r\n    kube-system   coredns-66bff467f8-njjc9                       1/1     Running   0          17h\r\n    kube-system   coredns-66bff467f8-tndsx                       1/1     Running   0          17h\r\n    kube-system   etcd-openebs-k8s-server                        1/1     Running   0          17h\r\n    kube-system   kube-apiserver-openebs-k8s-server              1/1     Running   0          17h\r\n    kube-system   kube-controller-manager-openebs-k8s-server     1/1     Running   0          17h\r\n    kube-system   kube-proxy-55fbj                               1/1     Running   0          17h\r\n    kube-system   kube-proxy-gt5rw                               1/1     Running   0          17h\r\n    kube-system   kube-proxy-l5pz2                               1/1     Running   0          17h\r\n    kube-system   kube-scheduler-openebs-k8s-server              1/1     Running   0          17h\r\n    kube-system   weave-net-c2gmk                                2/2     Running   1          17h\r\n    kube-system   weave-net-qp5c7                                2/2     Running   0          17h\r\n    kube-system   weave-net-trgr6                                2/2     Running   1          17h\r\n    openebs       openebs-localpv-provisioner-7bb7dc9958-ln284   1/1     Running   0          16h\r\n    openebs       openebs-ndm-kqhpr                              1/1     Running   0          16h\r\n    openebs       openebs-ndm-nxswk                              1/1     Running   0          16h\r\n    openebs       openebs-ndm-operator-746d6cd4fd-bm2fp          1/1     Running   1          16h\r\n\r\nNext, we will deploy the storage class. This storage class will be used with PersistentVolumeClaim to create volumes.\r\n\r\n    kubectl apply -f https://openebs.github.io/charts/openebs-lite-sc.yaml \r\n\r\nThis will create 2 storage classes, openebs-device, and openebs-hostpath, on the cluster. \r\n\r\n    root@openebs-k8s-server:~/openebs-localpv# kubectl  get sc\r\n    NAME               PROVISIONER        RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE\r\n    openebs-device     openebs.io/local   Delete          WaitForFirstConsumer   false                  6m12s\r\n    openebs-hostpath   openebs.io/local   Delete          WaitForFirstConsumer   false                  6m12s\r\n\r\nIn our case, we are interested in the `openebs-hostpath` storage class for this tutorial. Now, we are ready to deploy the StatefulSet that will consume the volume created using the above storage class. Here is a sample StatefulSet:\r\n\r\n    apiVersion: apps/v1\r\n    kind: StatefulSet\r\n    metadata:\r\n      name: local-test\r\n    spec:\r\n      serviceName: \"local-service\"\r\n      replicas: 1\r\n      selector:\r\n        matchLabels:\r\n          app: local-test\r\n      template:\r\n        metadata:\r\n          labels:\r\n            app: local-test\r\n        spec:\r\n          containers:\r\n          - name: test-container\r\n            image: busybox\r\n            command:\r\n            - \"/bin/sh\"\r\n            args:\r\n            - \"-c\"\r\n            - \"sleep 100000\"\r\n            volumeMounts:\r\n            - name: openebs-localpv-hostpath\r\n              mountPath: /usr/test-pod\r\n      volumeClaimTemplates:\r\n      - metadata:\r\n          name: openebs-localpv-hostpath\r\n        spec:\r\n          accessModes: [ \"ReadWriteOnce\" ]\r\n          storageClassName: \"openebs-hostpath\"\r\n          resources:\r\n            requests:\r\n              storage: 5G\r\n\r\nThe above YAML creates a StatefulSet named `local-test`, which has a container named `test-container`. This container has a volume mounted at path `/usr/test-pod`. The claim for this particular volume references the `openebs-hostpath` storage class. We will save this YAML using the name openebs-localpv-stateful.yaml, and this can be deployed using kubectl create:\r\n\r\n    kubectl apply -f openebs-localpv-stateful.yaml\r\n\r\nYou can verify the respective pv and pvc:\r\n\r\n    root@openebs-k8s-server:~/openebs-localpv# kubectl  get pvc\r\n    NAME                                    STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS       AGE\r\n    openebs-localpv-hostpath-local-test-0   Bound    pvc-e61a4156-b0bb-4199-b991-9c42b1830ec5   5G         RWO            openebs-hostpath   17s\r\n    root@openebs-k8s-server:~/openebs-localpv# kubectl  get pv\r\n    NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                           STORAGECLASS       REASON   AGE\r\n    pvc-e61a4156-b0bb-4199-b991-9c42b1830ec5   5G         RWO            Delete           Bound    default/openebs-localpv-hostpath-local-test-0   openebs-hostpath            18s\r\n\r\nOnce the volume is bound to the claim, the relevant pod i.e. local-test-0 comes up in running state:\r\n\r\n    root@openebs-k8s-server:~/openebs-localpv# kubectl  get pods --all-namespaces\r\n    NAMESPACE     NAME                                           READY   STATUS    RESTARTS   AGE\r\n    default       local-test-0                                   1/1     Running   0          13s\r\n    kube-system   coredns-66bff467f8-njjc9                       1/1     Running   0          21h\r\n    kube-system   coredns-66bff467f8-tndsx                       1/1     Running   0          21h\r\n    kube-system   etcd-openebs-k8s-server                        1/1     Running   0          21h\r\n    kube-system   kube-apiserver-openebs-k8s-server              1/1     Running   0          21h\r\n    kube-system   kube-controller-manager-openebs-k8s-server     1/1     Running   0          21h\r\n    kube-system   kube-proxy-55fbj                               1/1     Running   0          21h\r\n    kube-system   kube-proxy-gt5rw                               1/1     Running   0          21h\r\n    kube-system   kube-proxy-l5pz2                               1/1     Running   0          21h\r\n    kube-system   kube-scheduler-openebs-k8s-server              1/1     Running   0          21h\r\n    kube-system   weave-net-c2gmk                                2/2     Running   1          21h\r\n    kube-system   weave-net-qp5c7                                2/2     Running   0          21h\r\n    kube-system   weave-net-trgr6                                2/2     Running   1          21h\r\n    openebs       openebs-localpv-provisioner-6fc9664557-njvbg   1/1     Running   0          24m\r\n    openebs       openebs-ndm-754qs                              1/1     Running   0          24m\r\n    openebs       openebs-ndm-operator-798f74c6b9-24jvv          1/1     Running   0          24m\r\n    openebs       openebs-ndm-x96ks                              1/1     Running   0          24m\r\n\r\nIf you describe the pvc, you can see the volume is being provisioned using openebs-localpv-provsioner:\r\n\r\n    root@openebs-k8s-server:~/openebs-localpv# kubectl  describe pvc\r\n    Name:          openebs-localpv-hostpath-local-test-0\r\n    Namespace:     default\r\n    StorageClass:  openebs-hostpath\r\n    Status:        Bound\r\n    Volume:        pvc-b89a1c70-beeb-4bdc-a555-348b01832443\r\n    Labels:        app=local-test\r\n    Annotations:   pv.kubernetes.io/bind-completed: yes\r\n                   pv.kubernetes.io/bound-by-controller: yes\r\n                   volume.beta.kubernetes.io/storage-provisioner: openebs.io/local\r\n                   volume.kubernetes.io/selected-node: openebs-worker-1\r\n    Finalizers:    [kubernetes.io/pvc-protection]\r\n    Capacity:      5G\r\n    Access Modes:  RWO\r\n    VolumeMode:    Filesystem\r\n    Mounted By:    local-test-0\r\n    Events:\r\n      Type    Reason                 Age                From                                                                                                Message\r\n      ----    ------                 ----               ----                                                                                                -------\r\n      Normal  WaitForFirstConsumer   13s                persistentvolume-controller                                                                         waiting for first consumer to be created before binding\r\n      Normal  ExternalProvisioning   13s (x2 over 13s)  persistentvolume-controller                                                                         waiting for a volume to be created, either by external provisioner \"openebs.io/local\" or manually created by system administrator\r\n      Normal  Provisioning           13s                openebs.io/local_openebs-localpv-provisioner-6fc9664557-njvbg_884920b8-e474-4635-9daf-8b4a8f113b10  External provisioner is provisioning volume for claim \"default/openebs-localpv-hostpath-local-test-0\"\r\n      Normal  ProvisioningSucceeded  11s                openebs.io/local_openebs-localpv-provisioner-6fc9664557-njvbg_884920b8-e474-4635-9daf-8b4a8f113b10  Successfully provisioned volume pvc-b89a1c70-beeb-4bdc-a555-348b01832443\r\n\r\nYou can cleanup the whole setup using:\r\n\r\n    kubectl delete -f openebs-localpv-stateful.yaml\r\n    kubectl delete -f openebs-lite-sc.yaml\r\n    kubectl delete -f openebs-operator-lite-ppc64le.yaml\r\n\r\n### About the author:\r\n\r\nPeeyush Gupta is a cloud enthusiast with 5+ years of experience in developing cloud platforms and helping customers migrate their legacy applications to the cloud. He has also been a speaker at multiple meetups and loves to contribute to open-source projects. He is currently working with DigitalOcean as Sr. Developer Advocate.\r\n","slug":"kubernetes-statefulset-on-ppc64le-using-openebs-localpv-provisioner"},{"id":22,"title":"Data Migration Within Kubernetes Clusters\r","author":"Sai Chaithanya\r","author_info":"A developer who is always eager to learn, loves algorithms, maths, Kubernetes, and programming, passionate about Data Science. Enjoys playing kabaddi and traveling.\r","date":"02-07-2020\r","tags":["Kubernetes"],"excerpt":"In this blog, we'll talk about migrating data within Kubernetes from one node to another without any downtime of the application.\r","content":"\r\nIn large scale environments, storage is one of the hard things to manage, and it will be the most crucial component as it has DATA with it. OpenEBS, leading open source Cloud Native Storage, makes managing storage easier in Kubernetes environments. MayaData, the company behind the OpenEBS project, has the vision of achieving data agility by transforming Kubernetes as a data plane. cStor is one of the storage engines of OpenEBS. \r\nThis blog is for OpenEBS users, specifically **cStor CSI** users looking to **migrate data within Kubernetes** from one node to another without any downtime of the application.\r\n\r\n![Data Migration within Kubernetes from Node2 to Node3](/images/blog/Data-migration-diagram.png)\r\n\r\n### Create cStor Pools(CSPC):\r\n\r\nCreate cStor pools by following the steps mentioned [here](https://github.com/openebs/cstor-operators/blob/master/docs/quick.md). Once the pools are created, wait till all the cStor pools marked as Healthy. Check the cStor pools status by executing `kubectl get cspc -n openebs` command(cspc - cStorPoolCluster)\r\n\r\n    NAME            HEALTHYINSTANCES   PROVISIONEDINSTANCES   DESIREDINSTANCES   AGE\r\n    cspc-stripe-pool   3                  3                       3              4m13s\r\n\r\nFollowing command `kubectl get cspi -n openebs`(cStorPoolInstances) will be helpful to know more information about the pool.\r\n\r\n    NAME                   HOSTNAME   ALLOCATED FREE CAPACITY READONLY  TYPE   STATUS  AGE\r\n    cspc-stripe-pool-6qkw  e2e1-node1   230k    9630M   10G   false   stripe   ONLINE  21m\r\n    cspc-stripe-pool-pn9p  e2e1-node2   230k    9630M   10G   false   stripe   ONLINE  12s\r\n    cspc-stripe-pool-psz5  e2e1-node3   230k    9630M   10G   false   stripe   ONLINE  21m\r\n\r\n### Create CSI Volume:\r\n\r\nCreate CSI volumes on cStor pools created above by following the steps mentioned [here](https://github.com/openebs/cstor-csi#provision-a-cstor-volume-using-openebs-cstor-csi-driver). As part of volume provisioning, a resource called `CStorVolumeConfig` will be created. Once the volume is provisioned successfully, then CVC(cStorVolumeConfig) status will update to Bound, which means all the CStorVolume resources are successfully created. Following is the command which will help to get CVC status `kubectl get cvc -n openebs`.\r\n\r\n    NAME                                       STATUS     AGE\r\n    pvc-d1b26676-5035-4e5b-b564-68869b023306   Bound      5m56s\r\n    \r\n\r\n### **Inspect CVC**:\r\n\r\nInterfere CVC to know on which node data exists. When we do `kubectl get cvc <PV_NAME> -n <openebs_namespace> -o yaml`.\r\n\r\n    apiVersion: cstor.openebs.io/v1\r\n    kind: CStorVolumeConfig\r\n    name: pvc-d1b26676-5035-4e5b-b564-68869b023306\r\n    …\r\n    …\r\n    spec:\r\n      capacity:\r\n        storage: 5Gi\r\n    ...\r\n    ...\r\n      policy:\r\n        replicaPoolInfo:\r\n        - poolName: cspc-stripe-pool-6qkw\r\n        - poolName: cspc-stripe-pool-pn9p\r\n    status:\r\n      phase: Bound\r\n      poolInfo:\r\n      - cspc-stripe-pool-6qkw\r\n      - cspc-stripe-pool-pn9p\r\n\r\nFrom the above info CStorVolumeReplicas(CVR) are scheduled on cStor pools **cspc-stripe-pool-6qkw** and **cspc-stripe-pool-pn9p** from the **status.poolInfo** since above pools are on **e2e1-node1** and **e2e1-node2** (able to find node info from cspi output) sodata also will be available on the same node. Info under spec i.e **spec.policy.replicaPoolInfo** will convey where to schedule cStorVolumeReplicas.\r\n\r\nTo know more details of CVR we can get from `kubectl get cvr -n openebs`\r\n\r\n    NAME                                                             USED    ALLOCATED   STATUS     AGE\r\n    pvc-d1b26676-5035-4e5b-b564-68869b023306-cspc-stripe-pool-6qkw   1.47G    1.26G      Healthy    15h\r\n    pvc-d1b26676-5035-4e5b-b564-68869b023306-cspc-stripe-pool-pn9p   1.47G    1.26G      Healthy    15h\r\n\r\n**Steps to migrate data from one node to other:**\r\n\r\n1. Scale the CStorVolumeReplica to the desired Node.\r\n2. Scale down the CStorVolumeReplicas from unwanted Node.\r\n\r\n**Step1: Scale the CStorVolumeReplicas to the desired node**\r\n\r\nGet cStor pool name, which doesn’t have corresponding volume CVR in it and add it under **spec.policy.replicaPoolInfo** of CVC.\r\n\r\nWe can get pool name name which doesn’t have CVR in it by comparing outputs of `kubectl get cspi -n openebs -l openebs.io/cstor-pool-cluster=<cspc_name>` and `kubectl get cvc <pv_name> -o yaml` as stated inspect CVC. In this example CVR of volume pvc-d1b26676-5035-4e5b-b564-68869b023306 doesn’t not exist in cStor pool **cspc-stripe-pool-psz5.** After finding the pool name add it under **policy.replicaPoolInfo** list in CVC.\r\n\r\n    apiVersion: cstor.openebs.io/v1\r\n    kind: CStorVolumeConfig\r\n    name: pvc-d1b26676-5035-4e5b-b564-68869b023306\r\n    …\r\n    …\r\n    spec:\r\n    …\r\n    ...\r\n      policy:\r\n        replicaPoolInfo:\r\n        - poolName: cspc-stripe-pool-6qkw\r\n        - poolName: cspc-stripe-pool-pn9p\r\n        - poolName: cspc-stripe-pool-psz5\r\n    …\r\n    …\r\n    status:\r\n      poolInfo:\r\n      - cspc-stripe-pool-6qkw\r\n      - cspc-stripe-pool-pn9p\r\n      - cspc-stripe-pool-psz5\r\n\r\n**Superb!**\r\nOnce the pool was added into the `spec.replicaPoolInfo` then the status of CVC will be updated with a new pool name as shown above, and raise an event which means that CVR was created on a newly added pool. We can get the CVR status by executing `kubectl get cvr -n openebs`\r\n\r\n**Events**: Events on corresponding CVC\r\n\r\n    Events:\r\n    Type        Reason                Age                 From                         Message\r\n    ----      ------                  ----                ----                         -------\r\n    Normal   ScalingVolumeReplicas  14s (x2 over 15h)   cstorvolumeclaim-controller  successfully scaled volume replicas to 3\r\n\r\n**CVR status(by executing the command)**:\r\n\r\n    NAME                                                             USED    ALLOCATED           STATUS              AGE\r\n    pvc-d1b26676-5035-4e5b-b564-68869b023306-cspc-stripe-pool-6qkw   1.48G    1.25G              Healthy             16h\r\n    pvc-d1b26676-5035-4e5b-b564-68869b023306-cspc-stripe-pool-pn9p   1.48G    1.26G              Healthy             16h\r\n    pvc-d1b26676-5035-4e5b-b564-68869b023306-cspc-stripe-pool-psz5   91.4M    42.4M   ReconstructingNewReplica       33s\r\n\r\nIn the above output, newly created CVRs convey that it reconstructed data from scratch by talking to peer replicas. Wait till the newly created CVR marked as **Healthy**. To know status periodically execute `kubectl get cvr -n openebs` command.\r\n\r\n    NAME                                                             USED    ALLOCATED           STATUS           AGE\r\n    pvc-d1b26676-5035-4e5b-b564-68869b023306-cspc-stripe-pool-6qkw   1.48G     1.25G             Healthy          16h\r\n    pvc-d1b26676-5035-4e5b-b564-68869b023306-cspc-stripe-pool-pn9p   1.48G     1.25G             Healthy          16h\r\n    pvc-d1b26676-5035-4e5b-b564-68869b023306-cspc-stripe-pool-psz5   1.48G     1.25G             Healthy          5m28s\r\n\r\nNote:\r\n\r\n- Reconstructing will take time, depending on the amount of data it has to rebuild.\r\n\r\n**Step2: Scale down the CStorVolumeReplicas from unwanted nodes**\r\n\r\nOnce the newly created CVR is marked as Healthy, then we can remove the unwanted pool name from Spec of CVC replicaInfo and save it. \r\n\r\nIn this example, I need to remove the data from the pool **cspc-stripe-pool-pn9p**, scheduled on **e2e1-node2**. Once the pool name is removed from CVC **spec.policy.replicaPoolInfo**, then corresponding CVR in that pool will be deleted. CVC will generate events and status of CVC also will be updated.\r\n\r\nEvents on CVR:\r\n\r\n    Events:\r\n    Type       Reason                  Age                       From                            Message\r\n    ----       ------                  ----                       ----                            -------\r\n    Warning    ScalingVolumeReplicas   4s (x2 over 64m)     cstorvolumeclaim-controller     Scaling down volume replicas from 3 to 2 is in progress\r\n    Normal     ScalingVolumeReplicas   4s (x2 over 64m)     cstorvolumeclaim-controller     successfully scaled volume replicas to 2\r\n\r\nFrom output of `kubectl get cspi -n openebs`\r\n\r\n    NAME                     HOSTNAME       ALLOCATED   FREE     CAPACITY    READONLY     TYPE       STATUS    AGE\r\n    cspc-stripe-pool-6qkw    e2e1-node1      1260M      8370M    9630M         false      stripe      ONLINE   17h\r\n    cspc-stripe-pool-pn9p    e2e1-node2      230k       9630M    9630M         false      stripe      ONLINE   16h\r\n    cspc-stripe-pool-psz5    e2e1-node3      1260M      8370M    9630M         false      stripe      ONLINE   17h\r\n\r\n**Perfect!**\r\n\r\nFrom the above storage usage, I can successfully migrate the data from one node to another without any downtime of the application.\r\n","slug":"data-migration-within-kubernetes-clusters"},{"id":23,"title":"Restricting cStor pool usage within a specified threshold value\r","author":"Giridhara Prasad\r","author_info":"Lead Engineer at Mayadata Inc. Giridhar is experienced in software test automation, chaos engineering. Currently, he's working on Litmus, an Open Source chaos engineering project.\r","date":"20-05-2020\r","tags":["OpenEBS"," cStor"],"excerpt":"Learn how to restrict cStor pool usage within a specified threshold value\r","content":"\r\ncStor is one of the storage engines provided by OpenEBS. The integral component of the cStor engine is its storage pool from which the volumes are created. The storage pool is constructed with the collection of block devices. When the pool is completely utilized, it may misbehave in such a way that the pool itself cannot be imported successfully to recover from failures.\r\n\r\nIn order to overcome this situation, cStor recommends the optimal usage of storage capacity in the pool by restricting the write I/Os by converting it into read-only when the threshold limit is exceeded. While creating cStor SPC, the field *roThresholdLimit* has to be specified in percentage value under pool spec as follows:\r\n\r\n    apiVersion: openebs.io/v1alpha1\r\n    kind: StoragePoolClaim\r\n    metadata:\r\n      name: cstor-pool\r\n      annotations:\r\n        cas.openebs.io/config: |\r\n          - name: PoolResourceRequests\r\n            value: |-\r\n                memory: 2Gi\r\n          - name: PoolResourceLimits\r\n            value: |-\r\n                memory: 4Gi\r\n    spec:\r\n      name: cstor-pool\r\n      type: disk\r\n      poolSpec:\r\n        poolType: striped\r\n        roThresholdLimit: 80\r\n      blockDevices:\r\n        blockDeviceList:\r\n        - blockdevice-31e0768585cb80ed2352affa73ec94e2\r\n        - blockdevice-ab636ddeba8f8cd45f7e91a6b55c15e5\r\n        - blockdevice-75275112e966e43c2ac1311a7a492fac\r\n\r\nIn the above snippet, *roThresholdLimit: 80*  indicates that the pool will become read-only when the usage exceeds 80% of its total capacity. Upon trying to create the above SPC, the following CSPs will be created.\r\n\r\n    NAME              ALLOCATED   FREE    CAPACITY   STATUS    READONLY   TYPE      AGE\r\n    cstor-pool-0vl0   45G         4.7G   49.8G      Healthy   true      striped   2m8s\r\n    cstor-pool-qnm1   77K         49.7G   49.8G      Healthy   false      striped   2m8s\r\n    cstor-pool-x4gj   77K         49.7G   49.8G      Healthy   false      striped   2m8s\r\n\r\nThe read-only status of each CSP is indicated, as shown in the above template.\r\n\r\nWhen the usage of the pool crosses 80% of its actual capacity, it will become read-only. It means all the replicas in that pool won’t serve further write IOs irrespective of the amount of space they consumed. As an impact, if the persistent volumes do not have enough healthy storage replicas, then the volume will become read-only.\r\n\r\nThe status of active replica where write IOs were happening turns offline when the pool becomes read-only whereas, for the idle replica, it remains healthy. The sample output of CVR is as below. Here, one replica is in Offline state as its pool is in a read-only state.\r\n\r\n    k8s@master:kubectl get cvr -n openebs\r\n    NAME                                                                  USED    ALLOCATED   STATUS    AGE\r\n    pvc-261d6832-8b23-476c-8aa3-b95104e20030-cstor-pool-0vl0   1.15G   1.04G       Offline   23m\r\n    pvc-f38f5517-a7bc-492d-a6eb-27ac510ced3b-cstor-pool-qnm1   74.7K   17.7K       Healthy   23m56s\r\n\r\nThe *roThresholdLimit* is the configurable value. In case, if you want to increase/decrease the percentage value, it has to be modified at each CSP level. Editing at SPC config won’t be effective. In case if the administrator didn’t set the *roThresholdLimit* field during SPC creation, the default value would be set to, 85% considering it as the optimal value for usage. Administrators can set the roThresholdLimit value in CSP from 0 to 100 though the OpenEBS team won't recommend setting it to 100 percent.\r\nWhen the pool became read-only, the administrator can either increase the pool capacity by executing the steps specified [here](https://github.com/openebs/openebs-docs/blob/day_2_ops/docs/cstor_add_disks_to_spc.md) or increase the roThresholdLimit value in that CSP to make pool RW.\r\n","slug":"restricting-cstor-pool-usage-within-a-specified-threshold-value"},{"id":24,"title":"Getting started with K3s in vSphere and OpenEBS cStor\r","author":"Giridhara Prasad\r","author_info":"Lead Engineer at Mayadata Inc. Giridhar is experienced in software test automation, chaos engineering. Currently, he's working on Litmus, an Open Source chaos engineering project.\r","date":"26-03-2020\r","tags":["OpenEBS"],"excerpt":"In this blog, more of a tutorial, I will walk you through the steps to install K3OS and setup OpenEBS.\r","content":"\r\n[K3OS](https://github.com/rancher/k3os/) is a Linux distribution built to run lightweight Kubernetes clusters called [K3s](https://github.com/rancher/k3s/). It is specifically designed only to have what is needed to run [k3s](https://github.com/rancher/k3s).\r\n\r\nIn this blog, more of a tutorial, I will walk you through the steps to install K3OS and setup OpenEBS, a CNCF project, and leading Open Source Container Attached Storage solution for Kubernetes Stateful Workloads.\r\n\r\n#### **Setting up K3OS in vSphere**\r\n\r\nK3OS kernel is forked from Ubuntu-18.04 LTS, and its userspace binaries are from alpine. So, you need to select Ubuntu Linux (64 bit) as the guest operating system while creating a virtual machine.\r\n\r\n![Select guest operating system](/images/blog/114---getting-started-with-k3s-in-vsphere-and-use-openebs-cstor-for-its-persistent-storage.png)\r\n\r\nDownload the latest K3OS iso file (currently v0.9.0) from its [GitHub release](https://github.com/rancher/k3os/releases) page. Attach the iso file into a virtual machine and start it with the live installation option, as shown below.\r\n\r\nSelect the option *K3OS LiveCD & install* and boot the operating system.\r\n\r\n![Live installation](/images/blog/114---getting-started-with-k3s-in-vsphere-and-use-openebs-cstor-for-its-persistent-storage-3.png)\r\n\r\nAfter booting up successfully, you will be landed in a login prompt. The default user in K3OS is rancher. You can login as rancher user without any password.\r\n\r\n![Login prompt](/images/blog/114---getting-started-with-k3s-in-vsphere-and-use-openebs-cstor-for-its-persistent-storage-6.png)\r\n\r\nAfter performing a live install, You need to install the Operating System into a disk and can configure the machine either as a server(Master) or an agent(worker). This can be performed by executing the command `sudo k3os install`.\r\n\r\nSelect option 1. Install to disk to install K3OS into the disk. In the preceding questions, set up a new password for rancher user for enabling ssh communication to the server.\r\n\r\n![Installing into disk](/images/blog/114---getting-started-with-k3s-in-vsphere-and-use-openebs-cstor-for-its-persistent-storage-4.png)\r\n\r\n### \r\n**Installing into disk**\r\n\r\nYou need to select either server or agent to install the relevant components in the machine. Select 1.server to deploy K3s server components. You can set up a token or cluster secret that could be used while joining K3s agents to the server.\r\n\r\n![server installation](/images/blog/114---getting-started-with-k3s-in-vsphere-and-use-openebs-cstor-for-its-persistent-storage-7.png)\r\n\r\nAfter completing the installation, a screen similar to the following one will be displayed.\r\n\r\n![Login prompt](/images/blog/114---getting-started-with-k3s-in-vsphere-and-use-openebs-cstor-for-its-persistent-storage-1.png)\r\n\r\nThus, the K3s server can be configured successfully. In case if DHCP is not configured, you need to assign an IP address and other networking details using connmanctl utility. Login into the server as rancher user and enter the password configured in the previous step.\r\n\r\nLet us find the connman network service bound to the eth0 device by executing the below command.\r\n\r\n    sudo connmanctl services\r\n\r\nThe above command will list the services below.\r\n\r\n![connmanctl services](/images/blog/114---getting-started-with-k3s-in-vsphere-and-use-openebs-cstor-for-its-persistent-storage-5.png)\r\n\r\nAfter identifying the service, you can assign the IP address, netmask, gateway, and DNS server through the following command.\r\n\r\n    sudo connmanctl config <ethernet service> --ipv4 manual <IP Address> <Netmask> <gateway> --nameservers <DNS Address>\r\n\r\nAfter executing the above command, ensure if the network is configured correctly through `ifconfig` command.\r\n\r\nReboot the machine after setting up networking.\r\n\r\n#### **Install K3s agent**\r\n\r\nIn K3s nomenclature, Kubernetes workers are called as agents. While installing k3os into a disk, you need to select the option 2. agent to configure K3s agent in the machine.\r\n\r\n![Run K3s agent](/images/blog/114---getting-started-with-k3s-in-vsphere-and-use-openebs-cstor-for-its-persistent-storage-2.png)\r\n\r\nAfter selecting Agent, you need to provide the URL of the server to which the agent has to be configured. The URL of the k3s server could be formed in the following way.\r\n\r\n    https://<K3s Server IP Address>:6443\r\n\r\nAfter entering the URL, you need to provide the cluster secret, which was configured during server installation.\r\n\r\nAfter providing all the above inputs, initiate the agent deployment.\r\n\r\nConfigure networking in the same way as performed above for server and reboot the machine.\r\n\r\nAfter rebooting the agent machine, check the cluster status in the server as follows.\r\n\r\n    k3os-1374 [~]$ kubectl get nodes\r\n    NAME         STATUS   ROLES    AGE     VERSION\r\n    k3os-1374    Ready    master   10m    v1.17.2+k3s1\r\n    k3os-15360   Ready    <none>   10m    v1.17.2+k3s1\r\n    k3os-1091    Ready    <none>   10m    v1.17.2+k3s1\r\n\r\nCheck if all the cluster components are configured successfully and all the pods are running successfully by executing the below command.\r\n\r\n    k3os-1374 [~]$ kubectl get pods -n kube-system\r\n    NAME                                      READY   STATUS      RESTARTS   AGE\r\n    helm-install-traefik-nmjvj                0/1     Completed   0          3d\r\n    svclb-traefik-gp9ff                       2/2     Running     1         2d23h\r\n    svclb-traefik-qgdlx                       2/2     Running     0         2d23h\r\n    local-path-provisioner-58fb86bdfd-wkdtm   1/1     Running     1         3d\r\n    metrics-server-6d684c7b5-mrxsr            1/1     Running     0         3d\r\n    svclb-traefik-c4v7l                       2/2     Running     0         3d\r\n    coredns-d798c9dd-td5tr                    1/1     Running     0         3d\r\n    traefik-6787cddb4b-n57jz                  1/1     Running     0         3d\r\n\r\n#### **Install OpenEBS**\r\n\r\nOpenEBS is a CNCF project delivering persistent block storage to the workloads deployed in Kubernetes.[cStor](https://docs.openebs.io/docs/next/cstor.html?__hstc=216392137.6a5433d986ca5a9bb31cbcea3a03df67.1585216160857.1585216160857.1585216160857.1&amp;__hssc=216392137.1.1585216160858&amp;__hsfp=170476807)  is one of the storage engines provided by OpenEBS besides [Jiva](https://docs.openebs.io/docs/next/jiva.html?__hstc=216392137.6a5433d986ca5a9bb31cbcea3a03df67.1585216160857.1585216160857.1585216160857.1&amp;__hssc=216392137.1.1585216160858&amp;__hsfp=170476807) and [Local PV.](https://docs.openebs.io/docs/next/localpv.html?__hstc=216392137.6a5433d986ca5a9bb31cbcea3a03df67.1585216160857.1585216160857.1585216160857.1&amp;__hssc=216392137.1.1585216160858&amp;__hsfp=170476807).\r\n\r\ncStor was not supported in K3OS till k3os-v0.8.0 due to this [issue](https://github.com/rancher/k3os/issues/151). This issue has been addressed in v0.9.0 by adding udev support.\r\n\r\n    k3os-1374 [~]$ kubectl apply -f openebs-operator-1.7.0.yaml \r\n    namespace/openebs created\r\n    serviceaccount/openebs-maya-operator created\r\n    clusterrole.rbac.authorization.k8s.io/openebs-maya-operator created\r\n    clusterrolebinding.rbac.authorization.k8s.io/openebs-maya-operator created\r\n    deployment.apps/maya-apiserver created\r\n    service/maya-apiserver-service created\r\n    deployment.apps/openebs-provisioner created\r\n    deployment.apps/openebs-snapshot-operator created\r\n    configmap/openebs-ndm-config created\r\n    daemonset.apps/openebs-ndm created\r\n    deployment.apps/openebs-ndm-operator created\r\n    deployment.apps/openebs-admission-server created\r\n    deployment.apps/openebs-localpv-provisioner created\r\n\r\nCheck if all the OpenEBS components are running successfully.\r\n\r\n    k3os-1374 [~]$ kubectl get pods -n openebs\r\n    NAME                                           READY   STATUS    RESTARTS   AGE\r\n    openebs-admission-server-f67f77588-8kl78       1/1     Running   0          65s\r\n    openebs-provisioner-7b8c68bf44-7bjw8           1/1     Running   0          66s\r\n    openebs-ndm-qp26v                              1/1     Running   0          66s\r\n    openebs-ndm-84zb4                              1/1     Running   0          66s\r\n    openebs-ndm-dzghs                              1/1     Running   0          66s\r\n    openebs-localpv-provisioner-5c87bbd974-55486   1/1     Running   0          65s\r\n    openebs-ndm-operator-5fccfb7976-dvhj6          1/1     Running   0          66s\r\n    openebs-snapshot-operator-6c4c64d4bc-qxdwd     2/2     Running   0          66s\r\n    maya-apiserver-84785d7fbd-ck7sh                1/1     Running   0          66s\r\n\r\nOpenEBS cStor engine requires external disks to be attached to the agents which group to form cStor Pools.\r\n\r\nThe disks or block devices are managed by the component called *Node disk manager*, shortly called as *NDM*. After attaching the disks to agent machines, check the block devices by executing the following command.\r\n\r\n    k3os-1374 [~]$ kubectl get blockdevices -n openebs\r\n    NAME                                           NODENAME     SIZE          CLAIMSTATE   STATUS   AGE\r\n    blockdevice-30a3eb18f5b9e2d470de45e39f1036b0   k3os-15360   17179869184   Unclaimed    Active   1h\r\n    blockdevice-86fc964305abe8970fc1508538a61dbc   k3os-1374    17179869184   Unclaimed    Active   1h\r\n    blockdevice-b8735721689d5843bca10e7028f60a4e   k3os-1091    17179869184   Unclaimed    Active   1h\r\n\r\nIn this case, one block device has been attached to each K3s agent machine. Let us populate these block devices in the below pool creation manifest under *spec.blockDevices* and create the pool.\r\n\r\n    apiVersion: openebs.io/v1alpha1\r\n    kind: StoragePoolClaim\r\n    metadata:\r\n      name: cstor-disk-pool\r\n      annotations:\r\n        cas.openebs.io/config: |\r\n          - name: PoolResourceRequests\r\n            value: |-\r\n                memory: 2Gi\r\n          - name: PoolResourceLimits\r\n            value: |-\r\n                memory: 4Gi\r\n    spec:\r\n      name: cstor-disk-pool\r\n      type: disk\r\n      poolSpec:\r\n        poolType: striped\r\n      blockDevices:\r\n        blockDeviceList:\r\n        - blockdevice-30a3eb18f5b9e2d470de45e39f1036b0\r\n        - blockdevice-86fc964305abe8970fc1508538a61dbc \r\n        - blockdevice-b8735721689d5843bca10e7028f60a4e\r\n\r\nAfter applying the above definition, check if the pools are created successfully by executing the following command.\r\n\r\n    k3os-1374 [~]$ kubectl get csp\r\n    NAME                   ALLOCATED   FREE    CAPACITY   STATUS    TYPE      AGE\r\n    cstor-disk-pool-rgy3   270K        15.9G   15.9G      Healthy   striped   2m3s\r\n    cstor-disk-pool-gij4   270K        15.9G   15.9G      Healthy   striped   2m2s\r\n    cstor-disk-pool-09l1   270K        15.9G   15.9G      Healthy   striped   2m2s\r\n\r\nAll the pool instances should be healthy and each instance runs a pod which can be found by executing the following command.\r\n\r\n    k3os-1374 [~]$ kubectl get pods -n openebs -l app=cstor-pool\r\n    NAME                                    READY   STATUS    RESTARTS   AGE\r\n    cstor-disk-pool-rgy3-57f965b48c-srz2x   3/3     Running   0          8m33s\r\n    cstor-disk-pool-gij4-77bb4b8f44-s6k89   3/3     Running   0          8m33s\r\n    cstor-disk-pool-09l1-56d444996b-m698h   3/3     Running   0          8m33s\r\n\r\nAfter creating cStor pool, we can proceed to create volume. For illustration, let us deploy a busybox with cstor volume as its persistent storage. Before creating a pool, we need to create a storage class specifying the storagePoolClaim that was created in the above step as follows:\r\n\r\n    apiVersion: storage.k8s.io/v1\r\n    kind: StorageClass\r\n    metadata:\r\n      name: openebs-cstor\r\n      annotations:\r\n        openebs.io/cas-type: cstor\r\n        cas.openebs.io/config: |\r\n          - name: StoragePoolClaim\r\n            value: \"cstor-disk-pool\"\r\n          - name: ReplicaCount\r\n            value: \"3\"\r\n    provisioner: openebs.io/provisioner-iscsi\r\n\r\nPopulate storagePoolClaim and ReplicaCount as per your requirement in the above definition and create storage class. You have to use this storage class while creating PVC.\r\n\r\n    kind: PersistentVolumeClaim\r\n    apiVersion: v1\r\n    metadata:\r\n      name: openebs-pvc\r\n    spec:\r\n      storageClassName: openebs-cstor\r\n      accessModes:\r\n        - ReadWriteOnce\r\n      resources:\r\n        requests:\r\n          storage: 10Gi\r\n    ---\r\n    apiVersion: v1\r\n    kind: Service\r\n    metadata:\r\n      labels:\r\n        name: busybox\r\n      name: busybox\r\n    spec:\r\n      clusterIP: None\r\n      selector:\r\n        app: busybox\r\n    ---\r\n    apiVersion: apps/v1\r\n    kind: Deployment\r\n    metadata:\r\n      name: busybox\r\n      labels:\r\n        app: busybox\r\n    spec:\r\n      selector:\r\n        matchLabels:\r\n          app: busybox\r\n      template:\r\n        metadata:\r\n          labels:\r\n            app: busybox\r\n        spec:\r\n          containers:\r\n          - name: app-busybox\r\n            imagePullPolicy: IfNotPresent\r\n            image: busybox\r\n            command: [\"/bin/sh\"]\r\n            args: [\"-c\", \"while true; do sleep 10;done\"]\r\n            env:\r\n            volumeMounts:\r\n            - name: data-vol\r\n              mountPath: /busybox\r\n          volumes:\r\n          - name: data-vol\r\n            persistentVolumeClaim:\r\n              claimName: openebs-pvc\r\n\r\nAfter updating the storage class in the above manifest, let us deploy the busybox application by applying the above definition.\r\n\r\nCheck if the PVC is created and mounted successfully on the application pod by checking their status.\r\n\r\n    k3os-1374 [~]$ kubectl get pvc\r\n    NAME          STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS    AGE\r\n    openebs-pvc   Bound    pvc-6cd2b30a-49ed-4605-b1e0-dd23c45e548d   10Gi       RWO            openebs-cstor   4m35s\r\n    \r\n    k3os-1374 [~]$ kubectl get pods\r\n    NAME                       READY   STATUS    RESTARTS   AGE\r\n    busybox-748fb77c75-9lwzz   1/1     Running   0          4m42s\r\n\r\nAs we specified ReplicaCount as 3 in the storage class, 3 volume replicas will be created which can be found by executing the following command.\r\n\r\n    k3os-1374 [~]$ kubectl get cvr -n openebs\r\n    NAME                                                            USED    ALLOCATED   STATUS    AGE\r\n    pvc-6cd2b30a-49ed-4605-b1e0-dd23c45e548d-cstor-disk-pool-09l1   7.95M   116K        Healthy   6m37s\r\n    pvc-6cd2b30a-49ed-4605-b1e0-dd23c45e548d-cstor-disk-pool-rgy3   7.95M   116K        Healthy   6m37s\r\n    pvc-6cd2b30a-49ed-4605-b1e0-dd23c45e548d-cstor-disk-pool-gij4   7.95M   116K        Healthy   6m37s\r\n\r\nThus, the cStor engine can be used to provision persistent volume for the workloads in K3s.\r\n\r\nPlease leave your valuable comments or feedback in the comment section below if you find this tutorial helpful.\r\n","slug":"getting-started-with-k3s-in-vsphere-and-openebs-cstor"},{"id":25,"title":"Resizing the ZFS-LocalPV Volumes\r","author":"Pawan Prakash Sharma\r","author_info":"It's been an amazing experience in Software Engineering because of my love for coding. In my free time, I read books, play table tennis and watch tv series\r","date":"26-03-2020\r","tags":["LocalPV"," OpenEBS"],"excerpt":"In this post, we will focus on how we can resize the volumes provisioned by ZFS-LocalPV without restarting the application.\r","content":"\r\nBefore reading this post, please read my previous [post](https://blog.openebs.io/openebs-dynamic-volume-provisioning-on-zfs-d8670720181d?__hstc=216392137.7dc0753f698b104ea002a16b84268b54.1580207831486.1580207831486.1580207831486.1&amp;__hssc=216392137.1.1580207831487&amp;__hsfp=818904025) for instructions on setting up the ZFS-LocalPV for dynamically provisioning the volumes on the ZFS storage. Here, we will focus on how we can resize the volumes provisioned by ZFS-LocalPV without restarting the application.\r\n\r\n### **Prerequisite**\r\n\r\nPlease make sure you have installed the ZFS-LocalPV Driver version v0.5 or later:\r\n\r\n    $ kubectl apply -f\r\n    https://raw.githubusercontent.com/openebs/zfs-localpv/v0.5.x/deploy/zfs-operator.yaml\r\n\r\nMake sure you are using k8s version 1.16+ as this feature is in beta. In Kubernetes 1.14 and 1.15, this feature was in alpha status and required enabling the following feature gate:\r\n\r\n    --feature-gates=ExpandCSIVolumes=true\r\n\r\nAlso for Kubernetes 1.14 and 1.15, online expansion feature gate has to be enabled explicitly:\r\n\r\n    --feature-gates=ExpandInUsePersistentVolumes=true\r\n\r\n### **Introduction**\r\n\r\nThe ZFS-LocalPV CSI driver supports ONLINE volume expansion, which means, if the application is using the volume, you can perform the volume expansion. This also means that the volume expansion will be performed when an application is using that volume. So, if an application is not running and we have performed the resize operation, the Driver will wait for the application to start for the resize operation to complete.\r\n\r\n### **Setup**\r\n\r\nCreate the StorageClass with allowVolumeExpansion as true. We can resize only those volumes which are using the StorageClass with this flag as true.\r\n\r\n    $ cat sc.yaml\r\n    apiVersion: storage.k8s.io/v1\r\n    kind: StorageClass\r\n    metadata:\r\n     name: openebs-zfspv\r\n    allowVolumeExpansion: true\r\n    parameters:\r\n     poolname: \"zfspv-pool\"\r\n    provisioner: zfs.csi.openebs.io\r\n    $ kubectl apply -f sc.yaml\r\n    storageclass.storage.k8s.io/openebs-zfspv created\r\n\r\nCreate the PVC using the above StorageClass:\r\n\r\n    $ cat pvc.yaml\r\n    kind: PersistentVolumeClaim\r\n    apiVersion: v1\r\n    metadata:\r\n     name: csi-zfspv\r\n    spec:\r\n     storageClassName: openebs-zfspv\r\n     accessModes:\r\n       - ReadWriteOnce\r\n     resources:\r\n       requests:\r\n         storage: 5Gi\r\n    $ kubectl apply -f pvc.yaml\r\n    persistentvolumeclaim/csi-zfspv created\r\n\r\nNow deploy the application using the above PVC. Here, we will be using below Percona application:\r\n\r\n    $ cat percona.yaml\r\n    apiVersion: v1\r\n    kind: ConfigMap\r\n    metadata:\r\n     annotations:\r\n     name: sqltest\r\n     namespace: default\r\n    data:\r\n     sql-test.sh: |\r\n       #!/bin/bash\r\n    DB_PREFIX=\"Inventory\"\r\n       DB_SUFFIX=`echo $(mktemp) | cut -d '.' -f 2`\r\n       DB_NAME=\"${DB_PREFIX}_${DB_SUFFIX}\"\r\n    echo -e \"\\nWaiting for mysql server to start accepting connections..\"\r\n       retries=10;wait_retry=30\r\n       for i in `seq 1 $retries`; do\r\n         mysql -uroot -pk8sDem0 -e 'status' > /dev/null 2>&1\r\n         rc=$?\r\n         [ $rc -eq 0 ] && break\r\n         sleep $wait_retry\r\n       done\r\n    if [ $rc -ne 0 ];\r\n       then\r\n         echo -e \"\\nFailed to connect to db server after trying for $(($retries * $wait_retry))s, exiting\\n\"\r\n         exit 1\r\n       fi\r\n       mysql -uroot -pk8sDem0 -e \"CREATE DATABASE $DB_NAME;\"\r\n       mysql -uroot -pk8sDem0 -e \"CREATE TABLE Hardware (id INTEGER, name VARCHAR(20), owner VARCHAR(20),description VARCHAR(20));\" $DB_NAME\r\n       mysql -uroot -pk8sDem0 -e \"INSERT INTO Hardware (id, name, owner, description) values (1, \"dellserver\", \"basavaraj\", \"controller\");\" $DB_NAME\r\n       mysql -uroot -pk8sDem0 -e \"DROP DATABASE $DB_NAME;\"\r\n    ---\r\n    apiVersion: apps/v1\r\n    kind: Deployment\r\n    metadata:\r\n     name: percona\r\n     labels:\r\n       name: percona\r\n    spec:\r\n     replicas: 1\r\n     selector:\r\n       matchLabels:\r\n         name: percona\r\n     template:\r\n       metadata:\r\n         labels:\r\n           name: percona\r\n       spec:\r\n         containers:\r\n           - resources:\r\n             name: percona\r\n             image: openebs/tests-custom-percona:latest\r\n             imagePullPolicy: IfNotPresent\r\n             args:\r\n               - \"--ignore-db-dir\"\r\n               - \"lost+found\"\r\n             env:\r\n               - name: MYSQL_ROOT_PASSWORD\r\n                 value: k8sDem0\r\n             ports:\r\n               - containerPort: 3306\r\n                 name: percona\r\n             volumeMounts:\r\n               - mountPath: /var/lib/mysql\r\n                 name: demo-vol1\r\n               - mountPath: /sql-test.sh\r\n                 subPath: sql-test.sh\r\n                 name: sqltest-configmap\r\n             livenessProbe:\r\n               exec:\r\n                 command: [\"bash\", \"sql-test.sh\"]\r\n               initialDelaySeconds: 30\r\n               periodSeconds: 1\r\n               timeoutSeconds: 10\r\n         volumes:\r\n           - name: demo-vol1\r\n             persistentVolumeClaim:\r\n               claimName: csi-zfspv\r\n           - name: sqltest-configmap\r\n             configMap:\r\n               name: sqltest\r\n    ---\r\n    apiVersion: v1\r\n    kind: Service\r\n    metadata:\r\n     name: percona-mysql\r\n     labels:\r\n       name: percona-mysql\r\n    spec:\r\n     ports:\r\n       - port: 3306\r\n         targetPort: 3306\r\n     selector:\r\n         name: percona\r\n\r\nApply the above YAML to deploy the Percona application:\r\n\r\n    $ kubectl apply -f percona.yaml\r\n    configmap/sqltest created\r\n    deployment.apps/percona created\r\n    service/percona-mysql created\r\n\r\nNow the setup is ready and the application is running:\r\n\r\n    $ kubectl get po\r\n    NAME                      READY   STATUS    RESTARTS   AGE\r\n    percona-9449b4b9c-48qpw   1/1     Running   0          38s\r\n\r\nCheck the volume size at the application size:\r\n\r\n    $ kubectl exec -it percona-9449b4b9c-48qpw bash\r\n    root@percona-9449b4b9c-48qpw:/# df -h\r\n    Filesystem      Size  Used Avail Use% Mounted on\r\n    none             91G   18G   69G  21% /\r\n    tmpfs           3.9G     0  3.9G   0% /dev\r\n    tmpfs           3.9G     0  3.9G   0% /sys/fs/cgroup\r\n    /dev/sda1        91G   18G   69G  21% /etc/hosts\r\n    shm              64M     0   64M   0% /dev/shm\r\n    /dev/zd0        4.9G  234M  4.7G   5% /var/lib/mysql\r\n    tmpfs           3.9G   12K  3.9G   1% /run/secrets/kubernetes.io/serviceaccount\r\n    tmpfs           3.9G     0  3.9G   0% /sys/firmware\r\n\r\nFrom above o/p we can see that the volume has been created of size 5Gi and it is attached to the application at the given mount point (/var/lib/mysql).\r\n\r\n### **Volume Resize**\r\n\r\nHere, we just have to update the PVC with the new size and apply it. Please note that volume shrinking is not supported, so you have to change the size to a higher value. Here, in our case, we will update the size to 8Gi\r\n\r\n    $ cat pvc.yaml\r\n    kind: PersistentVolumeClaim\r\n    apiVersion: v1\r\n    metadata:\r\n     name: csi-zfspv\r\n    spec:\r\n     storageClassName: openebs-zfspv\r\n     accessModes:\r\n       - ReadWriteOnce\r\n     resources:\r\n       requests:\r\n         storage: 8Gi\r\n\r\nApply the above YAML to perform the resize:\r\n\r\n    $ kubectl apply -f pvc.yaml\r\n    persistentvolumeclaim/csi-zfspv configured\r\n\r\nNow, we can keep checking the PVC for the new size to be updated, it may take a while. Once resize operation is done we can see the PVC output with the updated size:\r\n\r\n    $ kubectl get pvc\r\n    NAME        STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS    AGE\r\n    csi-zfspv   Bound    pvc-9b5c22a5-29be-428e-aa96-5e183c1c4c62   8Gi        RWO            openebs-zfspv   33m\r\n\r\nWe can also exec into the application pod and verify that the new size is visible to the application:\r\n\r\n    $ kubectl exec -it percona-9449b4b9c-48qpw bash\r\n    root@percona-9449b4b9c-48qpw:/# df -h\r\n    Filesystem        Size      Used    Avail     Use%    Mounted on\r\n    none               91G       18G      69G      21%    /\r\n    tmpfs             3.9G         0     3.9G       0%    /dev\r\n    tmpfs             3.9G         0     3.9G       0%    /sys/fs/cgroup\r\n    /dev/sda1          91G       18G      69G      21%    /etc/hosts\r\n    shm                64M         0      64M       0%    /dev/shm\r\n    /dev/zd0          7.9G      237M     7.6G       3%    /var/lib/mysql\r\n    tmpfs             3.9G       12K     3.9G       1%    /run/secrets/kubernetes.io/serviceaccount\r\n    tmpfs             3.9G         0     3.9G       0%    /sys/firmware\r\n\r\nI hope you find this post useful. Feel free to contact me with any feedback or questions by using the comment section below.\r\n","slug":"resizing-the-zfslocalpv-volumes"},{"id":26,"title":"Snapshot and Clone for ZFS LocalPV\r","author":"Pawan Prakash Sharma\r","author_info":"It's been an amazing experience in Software Engineering because of my love for coding. In my free time, I read books, play table tennis and watch tv series\r","date":"03-03-2020\r","tags":["OpenEBS"," ZFS"," Open Source"],"excerpt":"In this post, we will focus on how we can create a snapshot and clone for volumes provisioned by ZFS-LocalPV.\r","content":"\r\nBefore reading this post, please read my previous [post](https://blog.openebs.io/openebs-dynamic-volume-provisioning-on-zfs-d8670720181d?__hstc=216392137.2b738ae93497639f7465a332e1aef247.1584602510099.1584602510099.1584602510099.1&amp;__hssc=216392137.1.1584602510100&amp;__hsfp=2870217423) for instructions on setting up the ZFS-LocalPV for dynamically provisioning the volumes on the ZFS storage. Here, we will focus on how we can create a snapshot and clone for volumes provisioned by ZFS-LocalPV.\r\n\r\n#### **Prerequisite**\r\n\r\nFor clone, we need to have VolumeSnapshotDataSource support, which is in beta in Kubernetes 1.17. If you are using the Kubernetes version less than 1.17, you have to enable the VolumeSnapshotDataSource feature gate at kubelet and kube-apiserver.\r\n\r\n#### **Snapshot**\r\n\r\nWe can create a snapshot of a volume that can be used further for creating a clone and for taking a backup. To create a snapshot, we have to first create a SnapshotClass just like a storage class where you can provide deletionPolicy as Retain or Delete.\r\n\r\n    $ cat snapshotclass.yaml\r\n    kind: VolumeSnapshotClass\r\n    apiVersion: snapshot.storage.k8s.io/v1beta1\r\n    metadata:\r\n      name: zfspv-snapclass\r\n      annotations:\r\n        snapshot.storage.kubernetes.io/is-default-class: \"true\"\r\n    driver: zfs.csi.openebs.io\r\n    deletionPolicy: Delete\r\n\r\nApply the snapshotclass YAML:\r\n\r\n    $ kubectl apply -f snapshotclass.yaml\r\n    volumesnapshotclass.snapshot.storage.k8s.io/zfspv-snapclass created\r\n\r\nFind a PVC for which snapshot has to be created\r\n\r\n    $ kubectl get pvc\r\n    NAME        STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS    AGE\r\n    csi-zfspv   Bound    pvc-73402f6e-d054-4ec2-95a4-eb8452724afb   4Gi        RWO            openebs-zfspv   2m35s\r\n\r\nCreate the snapshot using the created SnapshotClass for the selected PVC\r\n\r\n    $ cat snapshot.yaml\r\n    apiVersion: snapshot.storage.k8s.io/v1beta1\r\n    kind: VolumeSnapshot\r\n    metadata:\r\n      name: zfspv-snap\r\n    spec:\r\n      volumeSnapshotClassName: zfspv-snapclass\r\n      source:\r\n        persistentVolumeClaimName: csi-zfspv\r\n\r\nApply the snapshot.yaml\r\n\r\n    $ kubectl apply -f snapshot.yaml\r\n    volumesnapshot.snapshot.storage.k8s.io/zfspv-snap created\r\n\r\nPlease note that you have to create the snapshot in the same namespace where the PVC is created. Check the created snapshot resource, make sure readyToUsefield is true, before using this snapshot for any purpose.\r\n\r\n    $ kubectl get volumesnapshot.snapshot\r\n    NAME         AGE\r\n    zfspv-snap   2m8s\r\n    \r\n    $ kubectl get volumesnapshot.snapshot zfspv-snap -o yaml\r\n    apiVersion: snapshot.storage.k8s.io/v1beta1\r\n    kind: VolumeSnapshot\r\n    metadata:\r\n      annotations:\r\n        kubectl.kubernetes.io/last-applied-configuration: |\r\n          {\"apiVersion\":\"snapshot.storage.k8s.io/v1beta1\",\"kind\":\"VolumeSnapshot\",\"metadata\":{\"annotations\":{},\"name\":\"zfspv-snap\",\"namespace\":\"default\"},\"spec\":{\"source\":{\"persistentVolumeClaimName\":\"csi-zfspv\"},\"volumeSnapshotClassName\":\"zfspv-snapclass\"}}\r\n      creationTimestamp: \"2020-02-25T08:25:51Z\"\r\n      finalizers:\r\n      - snapshot.storage.kubernetes.io/volumesnapshot-as-source-protection\r\n      - snapshot.storage.kubernetes.io/volumesnapshot-bound-protection\r\n      generation: 1\r\n      name: zfspv-snap\r\n      namespace: default\r\n      resourceVersion: \"447494\"\r\n      selfLink: /apis/snapshot.storage.k8s.io/v1beta1/namespaces/default/volumesnapshots/zfspv-snap\r\n      uid: 3cbd5e59-4c6f-4bd6-95ba-7f72c9f12fcd\r\n    spec:\r\n      source:\r\n        persistentVolumeClaimName: csi-zfspv\r\n      volumeSnapshotClassName: zfspv-snapclass\r\n    status:\r\n      boundVolumeSnapshotContentName: snapcontent-3cbd5e59-4c6f-4bd6-95ba-7f72c9f12fcd\r\n      creationTime: \"2020-02-25T08:25:51Z\"\r\n      readyToUse: true\r\n      restoreSize: \"0\"\r\n\r\nCheck the OpenEBS resource for the created snapshot. Check, status should be Ready.\r\n\r\n    $ kubectl get zfssnap -n openebs\r\n    NAME                                            AGE\r\n    snapshot-3cbd5e59-4c6f-4bd6-95ba-7f72c9f12fcd   3m32s\r\n    \r\n    $ kubectl get zfssnap snapshot-3cbd5e59-4c6f-4bd6-95ba-7f72c9f12fcd -n openebs -oyaml\r\n    apiVersion: openebs.io/v1alpha1\r\n    kind: ZFSSnapshot\r\n    metadata:\r\n      creationTimestamp: \"2020-02-25T08:25:51Z\"\r\n      finalizers:\r\n      - zfs.openebs.io/finalizer\r\n      generation: 2\r\n      labels:\r\n        kubernetes.io/nodename: e2e1-node2\r\n        openebs.io/persistent-volume: pvc-73402f6e-d054-4ec2-95a4-eb8452724afb\r\n      name: snapshot-3cbd5e59-4c6f-4bd6-95ba-7f72c9f12fcd\r\n      namespace: openebs\r\n      resourceVersion: \"447328\"\r\n      selfLink: /apis/openebs.io/v1alpha1/namespaces/openebs/zfssnapshots/snapshot-3cbd5e59-4c6f-4bd6-95ba-7f72c9f12fcd\r\n      uid: 6142492c-3785-498f-aa4a-569ec6c0e2b8\r\n    spec:\r\n      capacity: \"4294967296\"\r\n      fsType: zfs\r\n      ownerNodeID: e2e1-node2\r\n      poolName: test-pool\r\n      volumeType: DATASET\r\n    status:\r\n      state: Ready\r\n\r\nWe can go to the node and confirm that snapshot has been created:\r\n\r\n    # zfs list -t all\r\n    NAME                                                                                               USED  AVAIL  REFER  MOUNTPOINT\r\n    test-pool                                                                                          818K  9.63G    24K  /test-pool\r\n    test-pool/pvc-73402f6e-d054-4ec2-95a4-eb8452724afb                                                  24K  4.00G    24K  /var/lib/kubelet/pods/3862895a-8a67-446e-80f7-f3c18881e391/volumes/kubernetes.io~csi/pvc-73402f6e-d054-4ec2-95a4-eb8452724afb/mount\r\n    test-pool/pvc-73402f6e-d054-4ec2-95a4-eb8452724afb@snapshot-3cbd5e59-4c6f-4bd6-95ba-7f72c9f12fcd     0B      -    24K  -\r\n\r\n#### **Clone**\r\n\r\nWe can create a clone volume from a snapshot and use that volume for some application. We can create a PVC YAML and mention the snapshot name in the datasource.\r\n\r\n    $ cat clone.yaml\r\n    kind: PersistentVolumeClaim\r\n    apiVersion: v1\r\n    metadata:\r\n      name: zfspv-clone\r\n    spec:\r\n      storageClassName: openebs-zfspv\r\n      dataSource:\r\n        name: zfspv-snap\r\n        kind: VolumeSnapshot\r\n        apiGroup: snapshot.storage.k8s.io\r\n      accessModes:\r\n        - ReadWriteOnce\r\n      resources:\r\n        requests:\r\n          storage: 4Gi\r\n\r\nThe above YAML says that create a volume from the snapshot zfspv-snap. Applying the above YAML will create a clone volume on the same node where the original volume is present. The newly created clone PV will also be there on the same node where the original PV is there. Apply the clone YAML\r\n\r\n    $ kubectl apply -f clone.yaml \r\n    persistentvolumeclaim/zfspv-clone created\r\n\r\nNote that the clone PVC should also be of the same size as that of the original volume. Currently resize is not supported. Also, note that the poolname should also be same, as across the ZPOOL clone is not supported. So, if you are using a separate storageclass for the clone PVC, please make sure it refers to the same ZPOOL.\r\n\r\n    $ kubectl get pvc\r\n    NAME          STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS    AGE\r\n    csi-zfspv     Bound    pvc-73402f6e-d054-4ec2-95a4-eb8452724afb   4Gi        RWO            openebs-zfspv   13m\r\n    zfspv-clone   Bound    pvc-c095aa52-8d09-4bbe-ac3c-bb88a0e7be19   4Gi        RWO            openebs-zfspv   34s\r\n\r\nWe can see in the above output that zfspv-clone claim has been created and it is bound. Also, we can check the zfs list on node and verify that clone volume is created.\r\n\r\n    $ zfs list -t all\r\n    NAME                                                                                               USED  AVAIL  REFER  MOUNTPOINT\r\n    test-pool                                                                                          834K  9.63G    24K  /test-pool\r\n    test-pool/pvc-73402f6e-d054-4ec2-95a4-eb8452724afb                                                  24K  4.00G    24K  /var/lib/kubelet/pods/3862895a-8a67-446e-80f7-f3c18881e391/volumes/kubernetes.io~csi/pvc-73402f6e-d054-4ec2-95a4-eb8452724afb/mount\r\n    test-pool/pvc-73402f6e-d054-4ec2-95a4-eb8452724afb@snapshot-3cbd5e59-4c6f-4bd6-95ba-7f72c9f12fcd     0B      -    24K  -\r\n    test-pool/pvc-c095aa52-8d09-4bbe-ac3c-bb88a0e7be19                                                   0B  9.63G    24K  none\r\n\r\nThe clone volume will have properties same as snapshot properties which are the properties when that snapshot has been created. The ZFSVolume object for the clone volume will be something like below:\r\n\r\n    $ kubectl describe zv pvc-c095aa52-8d09-4bbe-ac3c-bb88a0e7be19 -n openebs\r\n    Name:         pvc-c095aa52-8d09-4bbe-ac3c-bb88a0e7be19\r\n    Namespace:    openebs\r\n    Labels:       kubernetes.io/nodename=e2e1-node2\r\n    Annotations:  none\r\n    API Version:  openebs.io/v1alpha1\r\n    Kind:         ZFSVolume\r\n    Metadata:\r\n      Creation Timestamp:  2020-02-25T08:34:25Z\r\n      Finalizers:\r\n        zfs.openebs.io/finalizer\r\n      Generation:        1\r\n      Resource Version:  448930\r\n      Self Link:         /apis/openebs.io/v1alpha1/namespaces/openebs/zfsvolumes/pvc-c095aa52-8d09-4bbe-ac3c-bb88a0e7be19\r\n      UID:               e38a9f9a-fb76-466b-a6f9-8d070e0bec6f\r\n    Spec:\r\n      Capacity:       4294967296\r\n      Fs Type:        zfs\r\n      Owner Node ID:  e2e1-node2\r\n      Pool Name:      test-pool\r\n      Snapname:       pvc-73402f6e-d054-4ec2-95a4-eb8452724afb@snapshot-3cbd5e59-4c6f-4bd6-95ba-7f72c9f12fcd\r\n      Volume Type:    DATASET\r\n    Events:           none\r\n\r\nHere you can note that this resource has Snapname field which tells that this volume is created from that snapshot.\r\n\r\nI hope you found this post useful. Feel free to contact me with any feedback or questions by using the comment section below.\r\n","slug":"snapshot-and-clone-for-zfs-localpv"},{"id":27,"title":"Setup Continuous Integration for Helm chart\r","author":"Intakhab Ali\r","author_info":"Software Engineer at MayaData\r","date":"05-02-2020\r","tags":["Helm"," OpenEBS"," Tutorials"," Kubernetes"],"excerpt":"In this blog, we'll set up a continuous integration of the Helm chart. We'll package the Helm chart with the help of CI tools & push them to chart registry.\r","content":"\r\n[Helm](https://www.helm.sh/) is a package manager for Kubernetes that allows developers and operators to easily package, configure, and deploy applications and services onto Kubernetes clusters.\r\n\r\nHelm is now an official Kubernetes project and is part of the[ Cloud Native Computing Foundation](https://www.cncf.io/), a non-profit Linux Foundation that supports Open Source projects in and around the Kubernetes ecosystem.\r\n\r\nIn this tutorial, we will set up a continuous integration of the Helm chart. We will package the Helm chart with the help of CI tools like (Travis, Jenkins), and push it to chart registries like (Harbor, Chartmuseum).\r\n\r\n## Prerequisites:\r\n\r\n- Registry to store Helm like Harbor or Chartmuseum\r\n- Understanding of Helm and any of the CI platforms (Travis, Jenkins, circle, CI)\r\n- A Git repository to maintain version control of helm chart\r\n\r\n**I am going to use Travis as a CI platform and Harbor as a Helm registry to host the helm.**\r\n\r\n**As I choose Travis here, .travis.yml consists of the job lifecycle. Let’s write job cycle for the helm chart.**\r\n\r\n### Lifecycle 1:\r\n\r\nChoose the base language as Python\r\n\r\n    ---\r\n    language: python\r\n\r\nWe need to have some environment variables so that we can update whenever there’s a new version of the Helm release or change of the registry URL.\r\n\r\nHere is the list of a variable that we’ll need:\r\n\r\n***HELM_URL=[https://storage.googleapis.com/kubernetes-helm](https://storage.googleapis.com/kubernetes-helm) (this is the URL where we can download the helm package)***\r\n\r\n***HELM_TGZ=helm-v2.4.2-linux-amd64.tar.gz (this is the Helm tar filename)***\r\n\r\n***REPO_DIR=/home/travis/build/inyee786/test-helm (this is the path where Travis keep Git folder)***\r\n\r\n***YAMLLINT_VERSION=1.8.1 (this is yamllint version which is used to check lint of file)***\r\n\r\n***HARBOR_CHART_URL=https://harbor-test.mayadata.io/chartrepo (change this according to your chart registry url{harbor or Chartmuseum}***\r\n\r\n***HARBOR_PROJECT_NAME=maya (this is the Harbor project name, where we will store the chart)***\r\n\r\n***CHART_FOLDER=charts (this is the folder name, where we can keep the Helm charts)***\r\n\r\nIt looks like this\r\n\r\n    env:\r\n     global:\r\n       - HELM_URL=https://storage.googleapis.com/kubernetes-helm\r\n       - HELM_TGZ=helm-v2.4.2-linux-amd64.tar.gz\r\n       - REPO_DIR=/home/travis/build/inyee786/test-helm\r\n       - YAMLLINT_VERSION=1.8.1\r\n       - HARBOR_CHART_URL=https://harbor-\r\n    test.mayadata.io/chartrepo\r\n       - HARBOR_PROJECT_NAME=maya\r\n       - CHART_FOLDER=charts\r\n\r\nWe need some private variables, where we can store the credentials and push it to the Helm registry (Harbor has an excellent feature where we can have bot user, and you can use the bot credential). All we have to feed is-\r\n\r\n    HARBOR_USERNAME:\r\n    HARBOR_PASSWORD:\r\n\r\nInside Travis, go to (****settings > Environment Variables****) to set the private env\r\n\r\n![Environment variables](/images/blog/environment-variables.png)\r\n\r\n### Lifecycle 2 :\r\n\r\nInstall the Prerequisites to Set up a CI environment to build and check the YAML lint.\r\n\r\nDownload helm and ****untar**** the chart after downloading\r\n\r\n- wget ${HELM_URL}/${HELM_TGZ}\r\n- tar xzfv ${HELM_TGZ}\r\n- PATH=`pwd`/linux-amd64/:$PATH\r\n\r\nInitialize the helm client and update the helm repo\r\n\r\n- Helm init — client-only\r\n- Helm repo update\r\n\r\nInstall helm plugin to push chart on the registry\r\n\r\n- Helm plugin install[ https://github.com/chartmuseum/helm-push](https://github.com/chartmuseum/helm-push) — version v0.7.1\r\n\r\nInstall yamllint python package to check the lint\r\n\r\n- sudo pip install yamllint==”${YAMLLINT_VERSION}”\r\n\r\nIt looks like the below config\r\n\r\n    install:\r\n    # Installing Helm\r\n     - wget ${HELM_URL}/${HELM_TGZ}\r\n     - tar xzfv ${HELM_TGZ}\r\n     - PATH=`pwd`/linux-amd64/:$PATH\r\n     - helm init --client-only\r\n     # helm plugin to push helm chart\r\n     - helm plugin install https://github.com/chartmuseum/helm-\r\n    push --version v0.7.1\r\n     # Installing pip deps\r\n     - sudo pip install yamllint==\"${YAMLLINT_VERSION}\"\r\n     - helm repo update\r\n\r\n### Lifecycle 3 :\r\n\r\nBefore going further to build a chart, we need to run some script to check the lint in the chart and Travis file. It is a good practice to check the lint\r\n\r\nCheck the Helm lint of all Helm chart\r\n\r\n- For dir in `ls ${REPO_DIR}/${CHART_FOLDER}`; do\r\nhelm lint ${REPO_DIR}/${CHART_FOLDER}/$dir\r\nif [ $? != 0 ]; then\r\ntravis_terminate 1\r\nfi\r\n\r\nTo check the YAML lint for travis.yml, chart.yaml and value.yaml, we use the yamllint python package. We need the rule to check the lint.\r\n\r\n- yamllint -c .yamllint.yml -s .travis.yml .yamllint.yml\r\n- yamllint -c .yamllint.yml -s $(find . -type f -name “Chart.yaml”)\r\n- yamllint -c .yamllint.yml -s $(find . -type f -name “values.yaml”)\r\n\r\nThe script section should look like the below config\r\n\r\n    script:\r\n      # Check charts format\r\n      - >\r\n         for dir in `ls ${REPO_DIR}/${CHART_FOLDER}`; do\r\n          helm lint ${REPO_DIR}/${CHART_FOLDER}/$dir\r\n          if [ $? != 0 ]; then\r\n           travis_terminate 1\r\n          fi\r\n         done\r\n      # Check YAML styling\r\n      - yamllint -c .yamllint.yml -s .travis.yml .yamllint.yml\r\n      - yamllint -c .yamllint.yml -s $(find . -type f -name \"Chart.yaml\")\r\n      - yamllint -c .yamllint.yml -s $(find . -type f -name \"values.yaml\")\r\n\r\nHere comes the interesting part where we are going to build and package the chart.\r\n\r\n****Lifecycle 4:****\r\n\r\nIt’s better to build and push when we merge the chart in the **master** branch. So we run the below command when we merge the chart in the **master** branch\r\n\r\nWe need a temporary directory where we will build and package the chart\r\n\r\n- BUILD_DIR=$(mktemp -d)\r\n\r\nRun a loop to all the charts to build, package, and push it to the registry. The below commands will run on each chart\r\n\r\n- helm dep update ${REPO_DIR}/${CHART_FOLDER}/$dir\r\n\r\nPackage the chart with the below command\r\n\r\n- helm package ${REPO_DIR}/${CHART_FOLDER}/$dir\r\n\r\nThen push the chart to registry\r\n\r\n- helm push — username ${HARBOR_USERNAME} — password ${HARBOR_PASSWORD} ${REPO_DIR}/${CHART_FOLDER}/$dir ${HARBOR_CHART_URL}/maya\r\n\r\nBelow is the what the config will look like\r\n\r\n    # Temporary dir for storing new packaged charts and index files\r\n          BUILD_DIR=$(mktemp -d)      # Push temporary directory to the stack\r\n          pushd $BUILD_DIR      # Iterate over all charts are package them push it to Harbor\r\n          for dir in `ls ${REPO_DIR}/${CHART_FOLDER}`; do\r\n           helm dep update ${REPO_DIR}/${CHART_FOLDER}/$dir\r\n           helm package ${REPO_DIR}/${CHART_FOLDER}/$dir\r\n           helm push --username ${HARBOR_USERNAME} --password ${HARBOR_PASSWORD}  ${REPO_DIR}/${CHART_FOLDER}/$dir ${HARBOR_CHART_URL}/maya\r\n           if [ $? != 0 ]; then\r\n            travis_terminate 1\r\n           fi\r\n          done# Pop temporary directory from the stack\r\n          popd\r\n\r\nWow! We have successfully completed all the steps. Now, our setup is ready to build and push the helm chart to the registry.\r\n\r\n![Project Dashboard](/images/blog/project-dashboard.png)\r\n\r\nHere is the full Travis file\r\n[https://gist.github.com/inyee786/d779f347d7fa272aed4ee8457182af35.js](https://gist.github.com/inyee786/d779f347d7fa272aed4ee8457182af35.js)\r\n\r\nHere is .yamllint.yml file which contains lint rule for charts.yaml values.yaml and .travis.yaml\r\n[https://gist.github.com/inyee786/ef15b05c98bb4761b41af5f4fe268239.js](https://gist.github.com/inyee786/ef15b05c98bb4761b41af5f4fe268239.js)\r\n\r\n## Conclusion:\r\n\r\nHere we packaged the helm chart and pushed it to the helm registry.\r\n\r\n## About me\r\n\r\nYou can follow me at the below profiles and can ask any questions related to Angular, JavaScript, Travis, Kubernetes, etc.\r\n\r\n- [GitHub](https://github.com/inyee786/)\r\n- [Linkedin](https://www.linkedin.com/in/intakhab-ali/)\r\n- [Medium](https://medium.com/@intakhab.cusat)\r\n\r\nThis blog was originally published on 28th Jan 2020 on [MayaData’s blog](https://blog.mayadata.io/openebs/setup-continuous-integration-for-helm-chart).\r\n","slug":"setup-continuous-integration-for-helm-chart"},{"id":28,"title":"Monitoring ZFS-LocalPV Volumes\r","author":"Pawan Prakash Sharma\r","author_info":"It's been an amazing experience in Software Engineering because of my love for coding. In my free time, I read books, play table tennis and watch tv series\r","date":"28-01-2020\r","tags":["OpenEBS"," LocalPV"," ZFS"],"excerpt":"In this post, we will focus on how we can set up the Prometheus alert for Provisioned volumes when space utilization has reached a critical point.\r","content":"\r\nBefore reading this post, please read my previous [post](https://blog.openebs.io/openebs-dynamic-volume-provisioning-on-zfs-d8670720181d?__hstc=216392137.7dc0753f698b104ea002a16b84268b54.1580207831486.1580207831486.1580207831486.1&amp;__hssc=216392137.1.1580207831487&amp;__hsfp=818904025) for instructions on setting up the ZFS-LocalPV for dynamically provisioning the volumes on the ZFS storage. Here, we will focus on how we can set up the Prometheus alert for Provisioned volumes when space utilization has reached a critical point.\r\n\r\n### Prerequisite\r\n\r\nMake sure you are using k8s version 1.15+ to access the CSI volume metrics.\r\n\r\n### Setup helm\r\n\r\nThis step uses helm as the Kubernetes package manager. If you have not setup the helm, execute the below configuration. Otherwise, you can move on to the next step.\r\n\r\n    $ helm version\r\n    Client: &version.Version{SemVer:\"v2.16.1\", GitCommit:\"bbdfe5e7803a12bbdf97e94cd847859890cf4050\", GitTreeState:\"clean\"}\r\n    Server: &version.Version{SemVer:\"v2.16.1\", GitCommit:\"bbdfe5e7803a12bbdf97e94cd847859890cf4050\", GitTreeState:\"clean\"}\r\n    \r\n    $ helm init\r\n    Tiller (the Helm server-side component) has been installed into your Kubernetes Cluster.\r\n    \r\n    Please note: By default, Tiller is deployed with an insecure 'allow unauthenticated users' policy.\r\n    To prevent this, run `helm init` with the --tiller-tls-verify flag.\r\n    For more information on securing your installation see: (https://docs.helm.sh/using_helm/#securing-your-helm-installation)[https://docs.helm.sh/using_helm/#securing-your-helm-installation]\r\n    \r\n    $ kubectl create serviceaccount --namespace kube-system tiller\r\n    serviceaccount/tiller created\r\n    \r\n    $ kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller\r\n    clusterrolebinding.rbac.authorization.k8s.io/tiller-cluster-rule created\r\n    \r\n    $ kubectl patch deploy --namespace kube-system tiller-deploy -p '{\"spec\":{\"template\":{\"spec\":{\"serviceAccount\":\"tiller\"}}}}'\r\n    deployment.extensions/tiller-deploy patched\r\n\r\n### Install Prometheus Operator\r\n\r\nOnce the helm is ready and the related tiller pods are up and running, use the Prometheus chart from the helm repository.\r\n\r\n    $ helm install stable/prometheus-operator --name prometheus-operator\r\n\r\nCheck all the required pods are up and running\r\n\r\n    $ kubectl get pods -l \"release=prometheus-operator\"\r\n    NAME                                                 READY   STATUS    RESTARTS   AGE\r\n    prometheus-operator-grafana-85bb5d49d-bffdg          2/2     Running   0          2m21s\r\n    prometheus-operator-operator-64844759f7-rpwws        2/2     Running   0          2m21s\r\n    prometheus-operator-prometheus-node-exporter-p9rl8   1/1     Running   0          2m21s\r\n\r\n### Set up the alert rule\r\n\r\nCheck all the rules available in the system:\r\n\r\n    $ kubectl get PrometheusRule\r\n    NAME                                                       AGE\r\n    prometheus-operator-alertmanager.rules                     4m21s\r\n    prometheus-operator-etcd                                   4m21s\r\n    prometheus-operator-general.rules                          4m21s\r\n    prometheus-operator-k8s.rules                              4m21s\r\n    prometheus-operator-kube-apiserver-error                   4m21s\r\n    prometheus-operator-kube-apiserver.rules                   4m21s\r\n    prometheus-operator-kube-prometheus-node-recording.rules   4m21s\r\n    prometheus-operator-kube-scheduler.rules                   4m21s\r\n    prometheus-operator-kubernetes-absent                      4m21s\r\n    prometheus-operator-kubernetes-apps                        4m21s\r\n    prometheus-operator-kubernetes-resources                   4m21s\r\n    prometheus-operator-kubernetes-storage                     4m21s\r\n    prometheus-operator-kubernetes-system                      4m21s\r\n    prometheus-operator-kubernetes-system-apiserver            4m21s\r\n    prometheus-operator-kubernetes-system-controller-manager   4m21s\r\n    prometheus-operator-kubernetes-system-kubelet              4m21s\r\n    prometheus-operator-kubernetes-system-scheduler            4m21s\r\n    prometheus-operator-node-exporter                          4m21s\r\n    prometheus-operator-node-exporter.rules                    4m21s\r\n    prometheus-operator-node-network                           4m21s\r\n    prometheus-operator-node-time                              4m21s\r\n    prometheus-operator-node.rules                             4m21s\r\n    prometheus-operator-prometheus                             4m21s\r\n    prometheus-operator-prometheus-operator                    4m21s\r\n\r\nYou can edit any of the default rules or create a new rule to get the alerts. Below is a sample rule to start generating alerts when available storage space is less than 10%.\r\n\r\n    apiVersion: monitoring.coreos.com/v1\r\n    kind: PrometheusRule\r\n    metadata:\r\n      labels:\r\n        app: prometheus-operator\r\n        chart: prometheus-operator-8.5.4\r\n        heritage: Tiller\r\n        release: prometheus-operator\r\n      name: prometheus-operator-zfs-alertmanager.rules\r\n      namespace: default\r\n    spec:\r\n      groups:\r\n      - name: zfsalertmanager.rules\r\n        rules:\r\n        - alert: ZFSVolumeUsageCritical\r\n          annotations:\r\n            message: The PersistentVolume claimed by {{ $labels.persistentvolumeclaim\r\n              }} in Namespace {{ $labels.namespace }} is only {{ printf \"%0.2f\" $value\r\n              }}% free.\r\n          expr: |\r\n            100 * kubelet_volume_stats_available_bytes{job=\"kubelet\"}\r\n              /\r\n            kubelet_volume_stats_capacity_bytes{job=\"kubelet\"}\r\n              < 10\r\n          for: 1m\r\n          labels:\r\n            severity: critical\r\n\r\nNow apply the above YAML so that Prometheus can fire the alerts when available space is less than 10%.\r\n\r\n### Check the Prometheus alert\r\n\r\nTo view the Prometheus web UI, you must expose it through a Service. A simple way to accomplish this is to use a Service of type NodePort.\r\n\r\n    $ cat prometheus-service.yaml\r\n    apiVersion: v1\r\n    kind: Service\r\n    metadata:\r\n      name: prometheus-service\r\n    spec:\r\n      type: NodePort\r\n      ports:\r\n      - name: web\r\n        nodePort: 30090\r\n        port: 9090\r\n        protocol: TCP\r\n        targetPort: web\r\n      selector:\r\n        prometheus: prometheus-operator-prometheus\r\n\r\nApply the above YAML\r\n\r\n    $ kubectl apply -f prometheus-service.yaml\r\n    service/prometheus-service created\r\n\r\nNow you can access the alert manager UI via “node’s-external-ip:30090”.\r\n\r\n    $ kubectl get nodes -owide\r\n    NAME                                         STATUS   ROLES    AGE    VERSION          INTERNAL-IP   EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION   CONTAINER-RUNTIME\r\n    gke-zfspv-pawan-default-pool-3e407350-xvzp   Ready    <none>   103m   v1.15.4-gke.22   10.168.0.45   34.94.3.140   Ubuntu 18.04.3 LTS   5.0.0-1022-gke   docker://19.3.2\r\n\r\nHere, we can access the alert manager via URL: [http://34.94.3.140:30090/](http://34.94.3.140:30090/)\r\n\r\n### Check the Alert Manager\r\n\r\nTo view the Alert Manager web UI, expose it through a Service of type NodePort.\r\n\r\n    $ cat alertmanager-service.yaml\r\n    apiVersion: v1\r\n    kind: Service\r\n    metadata:\r\n      name: alertmanager-service\r\n    spec:\r\n      type: NodePort\r\n      ports:\r\n      - name: web\r\n        nodePort: 30093\r\n        port: 9093\r\n        protocol: TCP\r\n        targetPort: web\r\n      selector:\r\n        alertmanager: prometheus-operator-alertmanager\r\n\r\nApply the above YAML\r\n\r\n    $ kubectl apply -f alertmanager-service.yaml\r\n    service/alertmanager-service created\r\n\r\nNow you can access the alert manager UI via “node’s-external-ip:30093”.\r\n\r\n    $ kubectl get nodes -owide\r\n    NAME                                         STATUS   ROLES    AGE    VERSION          INTERNAL-IP   EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION   CONTAINER-RUNTIME\r\n    gke-zfspv-pawan-default-pool-3e407350-xvzp   Ready    <none>   103m   v1.15.4-gke.22   10.168.0.45   34.94.3.140   Ubuntu 18.04.3 LTS   5.0.0-1022-gke   docker://19.3.2\r\n\r\nAgain, we can access the alert manager via URL: [http://34.94.3.140:30093/.](http://34.94.3.140:30093/)\r\n\r\nI hope you found this post to be useful. Feel free to contact me with any feedback or questions by using the comment section below.\r\n\r\nThis blog was originally published on [Jan 22, 2020, on the MayaData blog](https://blog.mayadata.io/openebs/monitoring-zfs-localpv-volumes).\r\n","slug":"monitoring-zfslocalpv-volumes"},{"id":29,"title":"Uniquely identifying disks in OpenEBS on VMWare platform\r","author":"Akhil Mohan\r","author_info":"Software Engineer @ MayaData, working on Cloud Native Tech.\r","date":"22-01-2020\r","tags":["OpenEBS"," Vmware"," Vcenter"," Virtual Disk"," Kubernetes"],"excerpt":"A little bit of background. I work at a company called MayaData who develops a very cool Open Source software called OpenEBS (CNCF Sandbox project) that simplifies the deployment of stateful applications on Kubernetes.\r","content":"\r\nA little bit of background. I work at a company called [MayaData](https://mayadata.io/) who develops a very cool Open Source software called OpenEBS (CNCF Sandbox project) that simplifies the deployment of stateful applications on Kubernetes. You should check it out at [www.openebs.io](http://www.openebs.io/?__hstc=216392137.84d52389458ef57b0491fddb252202d6.1570688281471.1578466343199.1578469779597.19&amp;__hssc=216392137.2.1578469779597&amp;__hsfp=2854279793).\r\n\r\nKubernetes can be installed on any type of machine; be it a Virtual Machine, bare metal, or cloud machine. Kubernetes abstracts away most of the significant bits of a system, except storage. When it comes to storage, the main reason an abstraction will not work is that there is no uniqueness among the storage devices themselves. Every vendor and every virtualization platform implements it differently.\r\n\r\nWe hit this issue of unique virtual disks while deploying OpenEBS on Kubernetes backed by VMware VMS or other virtualization platforms because OpenEBS NDM is not able to uniquely identify the block devices themselves.\r\n\r\nChanging the absolute configuration on the Virtual Machine can help you get around this issue.\r\n\r\nHere are the steps to enable unique disk IDs in VMware via vSphere client:\r\n\r\n1. Right-click the virtual machine for which you want to enable the disk UUID attribute, and select Power > Power Off.\r\n2. The virtual machine powers off.\r\n3. Right-click the virtual machine, and click Edit Settings.\r\n4. Click the Options tab, and select the General entry in the settings column.\r\n5. Click Configuration Parameters. The Configuration Parameters window appears.\r\n6. Click Add Row.\r\n7. In the Name column, enter disk.Enable UUID\r\n8. In the Value column, enter TRUE.\r\n9. Click OK and click Save.\r\n10. Power on the virtual machine.\r\n\r\nThis will assign WWN to each disk in the Virtual Machine\r\n\r\nThat is it for today’s tutorial. If you have any questions, feedback, or any topic that you feel I should cover next, feel free to comment on our blog or reach out to us on our [Slack](https://slack.openebs.io./) channel.\r\n\r\nThis blog was originally published on [Oct 01, 2019, on the MayaData blog](https://blog.mayadata.io/openebs/uniquely-identifying-disks-in-openebs-on-vmware-platform).\r\n","slug":"uniquely-identifying-disks-in-openebs-on-vmware-platform"},{"id":30,"title":"Creating manual BlockDevice\r","author":"Akhil Mohan\r","author_info":"Software Engineer @ MayaData, working on Cloud Native Tech.\r","date":"16-01-2020\r","tags":["Block Devices"," Docker"," Uncategorized"," Disk"," OpenEBS"," Kubernetes"],"excerpt":"BlockDevices are the consumable units of storage in the OpenEBS storage solution. Users can create BlockDevices manually to support custom partitions/lvms, etc., which are not detected by NDM. To create a manual BlockDevice, follow the steps below\r","content":"\r\nBlockDevices are the consumable units of storage in the OpenEBS storage solution. Currently, NDM supports the discovery and management of only a complete disk.\r\n\r\nHowever, users can create BlockDevices manually to support custom partitions/lvms, etc., which are not detected by NDM. To create a manual BlockDevice, follow the steps below:\r\n\r\n1. Download the sample block device custom resource YAML file. \r\n    ```\r\n    wget\r\n    https://raw.githubusercontent.com/openebs/node-disk-manager/master/deploy/crds/openebs_v1alpha1_blockdevice_cr.yaml\r\n    ```\r\n\r\n2.  Edit the file and fill in the details of the blockdevice. Fields marked with optional are not mandatory and can be removed. All other fields are required and information provided will be used while claiming.\r\n    ```\r\n    apiVersion: openebs.io/v1alpha1\r\n    kind: BlockDevice\r\n    metadata:\r\n      name: example-blockdevice\r\n      labels:\r\n        kubernetes.io/hostname: <host name of the node in which disk/blockdevice is attached> # like gke-openebs-user-default-pool-044afcb8-bmc0\r\n        ndm.io/managed: \"false\" # for manual disk creation put false\r\n        ndm.io/blockdevice-type: blockdevice\r\n    status:\r\n      claimState: Unclaimed\r\n      state: Active\r\n    spec:\r\n      capacity:\r\n           storage: <total capacity in bytes> #like 53687091200\r\n      details:\r\n        firmwareRevision: <firmware revision> #optional\r\n        model: <model name of blockdevice> # like PersistentDisk, optional\r\n        serial: <serial no of disk> # like google-disk-2, optional\r\n        compliance: <compliance of disk> #like \"SPC-4\", optional\r\n        vendor: <vendor of disk> #like Google, optional\r\n      devlinks:\r\n      - kind: by-id\r\n        links:\r\n        - <link1> # like /dev/disk/by-id/scsi-0Google_PersistentDisk_disk-2\r\n        - <link2> # like /dev/disk/by-id/google-disk-2\r\n      - kind: by-path\r\n        links:\r\n        - <link1> # like /dev/disk/by-path/virtio-pci-0000:00:03.0-scsi-0:0:2:0\r\n      nodeAttributes:\r\n        nodeName: <node name> # output of `kubectl get nodes` can be used\r\n      path: <devpath> # like /dev/sdb\r\n      ```\r\n3.  Apply the YAML file.\r\n    ```\r\n    kubectl apply -f openebs_v1alpha1_blockdevice_cr.yaml\r\n    ```\r\n\r\nThe BlockDevice CR will be created and is then used by NDM Operator for claiming, but it won’t be managed by NDM Daemon for any changes that happen on the device. However, all the Claim/Unclaim operations and cleanup operations will be performed on this BlockDevice.\r\n\r\nPlease provide your valuable feedback & comments below and let me know what I can cover in my next blog.\r\n\r\nThis blog was originally published on Oct 22nd, 2019, on the [MayaData blog](https://blog.mayadata.io/openebs/creating-manual-blockdevice).\r\n","slug":"creating-manual-blockdevice"},{"id":31,"title":"OpenEBS Node Device Management (NDM) — Troubleshooting tips\r","author":"Akhil Mohan\r","author_info":"Software Engineer @ MayaData, working on Cloud Native Tech.\r","date":"08-01-2020\r","tags":["Docker"," OpenEBS"," Uncategorized"," Troubleshooting"," Tutorials"],"excerpt":"OpenEBS Node Device Management (aka NDM) helps in discovering the block devices attached to Kubernetes nodes. In this blog, I will walk through some of the scenarios I have seen working with users on the OpenEBS Slack Channel.\r","content":"\r\nOpenEBS Node Device Management (aka NDM) helps in discovering the block devices attached to Kubernetes nodes. For many clusters, the default configuration of NDM suffices, however there are some cases where further customizations are required.\r\n\r\n> In this blog, I will walk through some of the scenarios I have seen working with Users on the [OpenEBS Slack Channel](http://slack.openebs.io/)\r\n\r\n---\r\n\r\n### NDM Quick Overview\r\n\r\nFor setting up NDM in secure mode, please see my previous [blog](https://blog.mayadata.io/openebs/configuring-openebs-to-run-with-security-enhanced-linux), and you can learn how NDM works [here](https://docs.openebs.io/docs/next/ndm.html). Here is a quick snapshot of the key components of NDM.\r\n\r\n- NDM components are installed in the OpenEBS Namespace. Ensure that NDM pods part of the NDM DaemonSet are running on all the storage nodes. NDM Operator helps with allocating Block Devices to Block Device Claims and should be running.\r\n- NDM DaemonSet pod discovers all the block devices attached to the node and creates BlockDevice custom resource for each device. Note that NDM will filter out some of the devices like loopback device and so forth as configured in the NDM ConfigMap. `kubectl get bd -n openebs`\r\n- NDM creates a special type of devices called sparse devices depending on the `SPARSE_FILE_COUNT` and `SPARSE_FILE_SIZE` passed to the NDM Daemon. These devices are used in cases where nodes do not have any additional devices attached to the node and users would like to run their applications by carving out some spaces from the OS disk. The creation of sparse devices is disabled by default from OpenEBS 1.3.\r\n- Users or Operators like cStor Operator, Local PV provisioner interact with NDM by creating a BlockDeviceClaim CR. The BlockDeviceClaim will have properties like nodeName, required Capacity etc., The NDM operator will match these properties with the available BlockDevices and associate the one that matches all the requirements to BlockDeviceClaim.\r\n\r\n---\r\n\r\n### NDM Known Issues / Future Development Items\r\n\r\n- BlockDevices are not created for Partitions and LVM devices. If you need to use them, you have to manually create BlockDevice CR. The steps are mentioned in this [blog](https://blog.mayadata.io/openebs/creating-manual-blockdevice).\r\n\r\nOK. Let us get started with some common issues reported and how to troubleshoot them.\r\n\r\n---\r\n\r\n#### Scenario #1\r\n\r\n**BlockDevice CR is not created for a device available on my node.**\r\n\r\nI have some disks attached to the node. Installed OpenEBS, but blockdevice resources are not created for the devices.\r\n\r\n**Symptom:** I have some disks attached to the node. Installed OpenEBS, but blockdevice resources are not created for the devices.\r\n\r\n**Troubleshooting:**\r\n\r\n1. Check `lsblk` output of the node\r\n2. Get the NDM config map.\r\n3. Check if the mount point of the disk is excluded in the filter configurations in configmap.\r\n4. From lsblk output check if the blockdevice you want to use is an LVM/software raid/ partition/LUKS filesystem. NDM currently does not support these types.\r\n5. If none of the above works, the logs of NDM daemonset can be checked. It will have information of disk being detected, and at what point the disk was excluded from blockdevice creation, (like `excluded by path-filter`)\r\n\r\n    ![blockdevice creation](https://cdn-images-1.medium.com/max/800/0*q8rBQFw284gRYqjg)\r\n\r\n**Resolution:** Update the filter configuration in configmap and restart the NDM DaemonSet pod. This will create the blockdevices.\r\n\r\n---\r\n\r\n#### Scenario #2\r\n\r\n**After node reboot, one blockdevice became inactive and another blockdevice was created.**\r\n\r\n**Symptom:** When a node in the cluster is rebooted, A blockdevice resource on that node was marked as inactive and a new resource was created. The new blockdevice also has the same details as the old one.\r\n\r\n**Troubleshooting:**\r\n\r\n1. Check `lsblk` output of the node\r\n2. Get the yaml of both blockdevices and compare them.\r\n3. Check to see `spec.Path` is different in both outputs.\r\n4. If yes, then the new blockdevice resource was created because the path changed\r\n5. Check if `kubernetes.io/hostname` is different, if yes, then the blockdevice was created because the hostname of the node changed.\r\n\r\n**Resolution:** If using cStor, the newly generated BD can be added in both SPC and CSP instead of the old BD resource. Thus the storage engine will claim the new BD resource and start using it.\r\n\r\n**Root Cause:** Whenever the NDM deamonset pods shutdown, all the devices on that node will be marked into an Unknown state. When the pod comes backup, all the devices on that node are marked as inactive, and then individual devices are processed for their statuses.\r\n\r\nNDM uses an md5 sum of WWN+Model+Serial of the disk to create its unique name. If none of these fields are available then NDM uses device path and hostname to create the blockdevice. There are chances that the device path/hostname has changed after reboot. If the path/hostname changes a new blockdevice resource will be created, and the old one will still be in the inactive state.\r\n\r\n---\r\n\r\n#### Scenario #3\r\n\r\n**BlockDevices are created for already used disks in which OS is installed**\r\n\r\n**Symptom:** NDM created blockdevice resources for disks which are already used for OS partitions. By default NDM excludes the blockdevices that are mounted at `/, /boot, /etc/hosts`. If these mount points are on an LVM or SoftRaid, NDM will not be able to identify that.\r\n\r\n**Resolution:** Support for LVM and software RAID is in the design phase. Once it is supported the issue will be resolved.\r\n\r\n---\r\n\r\n#### Scenario #4\r\n\r\n**Only one Blockdevice is created, when devices are connected in multipath configuration**\r\n\r\n**Symptom:** There is a disk attached in multipath configuration to a node. i.e both sdb & sdc are the same devices. But blockdevice resource is created only for sdc.\r\n\r\n**Resolution:** Support for detecting disks in multipath configuration and attaching the same disk to multiple nodes will be available in the future versions of NDM\r\n\r\n**Root Cause:** NDM generates the UID for disk identification using the disk details like WWN, Serial, etc that are fetched from the disk. In case of a disk attached in multipath configuration, the details from both sdb and sdc will be the same. Therefore, NDM will first create a blockdevice for sdb, and then moves on to create for `sdc`. But at this stage, it will find that a blockdevice with that UID already exists and will update the blockdevice information with the new path `sdc`. This results in a blockdevice existing only for sdc.\r\n\r\n---\r\n\r\n#### Scenario #5\r\n\r\n**Only single BlockDevice resource is created in a multi-node Kubernetes cluster on GKE.**\r\n\r\n**Symptom:** On a multinode kubernetes cluster in GKE, with an external GPD attached to each node. NDM is creating only one blockdevice resource, instead of one blockdevice resource per node.\r\n\r\n**Troubleshooting:**\r\n\r\n1. Was the GPD added using the gcloud CLI or google cloud console web UI?\r\n2. If the disk was added using gcloud CLI, check whether the ` — device-name` flag was specified during attaching the disk.\r\n\r\n**Resolution:** The command to add disk using gcloud CLI should be\r\n\r\n    gcloud compute instances attach-disk <node-name> --disk=disk-1 **--device-name=disk-1**\r\n\r\n**Root Cause:** gcloud CLI uses the value provided in the `device-name` flag as the serial number of the GPD when it is attached to the node. If it is left blank, Google will assign a default serial number that is unique only to the node. When multiple nodes are present, and NDM generates the UID for the blockdevice, the disks on both nodes will have the same serial number and thus the same UID.\r\n\r\nNDM from one node will create the blockdevice resource and when the other NDM daemon tries to create the resource, it finds that a resource already exists and just updates the resource.\r\n\r\nThis blog was originally published on Jan 7th, 2020 on [MayaData blog](https://blog.mayadata.io/openebs/openebs-node-device-management-ndm-troubleshooting-tips).\r\n","slug":"openebs-node-device-management-ndmtroubleshooting-tips"},{"id":32,"title":"cStor Pool Operations via CSPC in OpenEBS\r","author":"Ashutosh Kumar\r","author_info":"Software Engineer at MayaData | OpenEBS Reviewer and Contributor | CKA | Gopher | Kubernaut\r","date":"03-01-2020\r","tags":["Container Attached Storage"," Cspc"," Kubernetes"," OpenEBS"," Operations"],"excerpt":"CStor Data Engine is popular for workloads needing efficient capacity management, replicas, point in time snapshots, incremental backups, etc. The tutorial will provision striped cStor pools and perform operations on them.\r","content":"\r\n**An enhanced schema for OpenEBS cStor Pool Management**\r\n\r\nCStor Data Engine is popular for workloads needing efficient capacity management, replicas, point in time snapshots, incremental backups, etc. Since achieving Beta last year, cStor Data Engine has been powering many Stateful Applications, including a variety of databases.\r\n\r\nWhile users love cStor for its data management capabilities, they have been providing feedback that it is not as easy to use as Jiva. We have started working on user feedback starting with OpenEBS 1.2 release and incrementally enhancing the cStor functionality.\r\n\r\nAs cStor is already running in production, the new changes are being introduced via a set of new cStor Custom Resources, which will get into in a bit. The users can continue to use the current schema, as we stabilize the new design and support a seamless migration. You can help us improve by providing feedback on the new design [here](https://github.com/openebs/openebs/tree/master/contribute/design/1.x/cstor-operator) or by raising [issues](https://github.com/openebs/openebs/issues).\r\n\r\nTo give a high-level overview of the new design, the following will be changed:\r\n\r\n- A new component/deployment called cspc-operator will be deployed for managing the new custom resources.\r\n- CSPC — cStor Pool Cluster will be replacing the SPC. The spec of the CSPC has been modified to provide cleaner abstractions for managing blockdevices on each node.\r\n- CSPI — cStor Pool Instance will be replacing CSP.\r\n\r\nThe new schema will only support manual cStor Pools creation as we learned that supporting both manual and auto using a single customer CR can lead to more confusion. In future releases, a new schema will be introduced to support the automatic creation of the cStor Pools.\r\n\r\nCSPC can be used to provision cStor pool as well as carry out day 2 pool operations such as: Following storage day 2 operations are supported via the CSPC schema:\r\n\r\n- Pool Expansion ( Supported in OpenEBS version >=1.2, alpha )\r\n- Pool Deletion ( Supported in OpenEBS version >=1.2, alpha )\r\n- Pool Scale Up ( Supported in OpenEBS version >=1.2, alpha )\r\n- Block Device Replacement ( Supported in OpenEBS version >=1.5, alpha)\r\n\r\nLet us go through a short hands-on tutorial to understand these.\r\n\r\nThe tutorial will provision striped cStor pools and perform operations on them (this can be done for other cStor raid groups too and I will post that in a separate blog).\r\n\r\n#### Prerequisite Steps\r\n\r\n- Kubernetes cluster of version >= 1.14 with 3 worker nodes.\r\n- Attach at least 2 disks to each of the nodes to follow up with the tutorial. I am using GKE and steps to create and attach a disk to a node are given in the following link :\r\n[https://cloud.google.com/sdk/gcloud/reference/compute/disks/create\r\n](https://cloud.google.com/sdk/gcloud/reference/compute/disks/create)[https://cloud.google.com/sdk/gcloud/reference/compute/instances/attach-disk\r\n](https://cloud.google.com/sdk/gcloud/reference/compute/instances/attach-disk)If you are using other providers, check with their reference manuals on how to attach a disk. Also, feel free to reach out on the OpenEBS slack channel if you need any assistance.\r\n- I have used the following script to create 6 disks.\r\n  *{ for i in {1..6}; do gcloud compute disks create demo-disk-$i — zone=us-central1-a — size=100GB; done; }*\r\n- Now, I will attach 2 disks to each of the nodes. I have used the following commands to attach.\r\n\r\n  *for i in {1..2}; do gcloud compute instances attach-disk gke-cstor-demo-default-pool-3385ab41–2ldq — disk demo-disk-$i — device-name demo-disk-$i — zone us-central1-a; done*\r\n\r\n  *for i in {3..4}; do gcloud compute instances attach-disk gke-cstor-demo-default-pool-3385ab41-bb69 — disk demo-disk-$i — device-name demo-disk-$i — zone us-central1-a; done*\r\n\r\n  *for i in {5..6}; do gcloud compute instances attach-disk gke-cstor-demo-default-pool-3385ab41-hrmr — disk demo-disk-$i — device-name demo-disk-$i — zone us-central1-a; done*\r\n\r\n- Install OpenEBS 1.5. Run following to install: (Note that block device replacement support starts from OpenEBS version 1.5. There will be a separate blog post to describe that.)\r\n    ```\r\n    kubectl apply -f [https://openebs.github.io/charts/openebs-operator-1.5.0.yaml](https://openebs.github.io/charts/openebs-operator-1.6.0.yaml)\r\n    ```\r\n- Install CStor-Operator. Run following to install:\r\n    ```\r\n    kubectl apply -f [https://raw.githubusercontent.com/openebs/openebs/master/k8s/cstor-operator.yaml](https://raw.githubusercontent.com/openebs/openebs/master/k8s/cstor-operator.yaml)\r\n    ```\r\n\r\n#### Pool Provisioning\r\n\r\nYou need to specify cStor pool intent in a CSPC YAML to provision cStor pools on nodes. I am going to provision 3 stripe cStor pools. Let us prepare a CSPC YAML now.\r\n\r\nFollowing command list all block devices which represent your attached disks. I am going to pick 1 block device from each node to form a CSPC YAML.\r\n\r\n    $ kubectl get bd -n openebs\r\n    NAME                                           NODENAME                                    SIZE           CLAIMSTATE   STATUS   AGE\r\n\r\n    blockdevice-474d20376a541a8fb372d44f5bc361ea   gke-cstor-demo-default-pool-3385ab41-hrmr   107374182400   Unclaimed    Active   34s\r\n\r\n    blockdevice-9773ccb731e4e3e10c2838411f5f8b2a   gke-cstor-demo-default-pool-3385ab41-bb69   107374182400   Unclaimed    Active   37s\r\n\r\n    blockdevice-9c8df120e17379bfd1fe5c3ce9aa8185   gke-cstor-demo-default-pool-3385ab41-bb69   107374182400   Unclaimed    Active   37s\r\n\r\n    blockdevice-ada8ef910929513c1ad650c08fbe3f36   gke-cstor-demo-default-pool-3385ab41-2ldq   107374182400   Unclaimed    Active   34s\r\n\r\n    blockdevice-d2d59218ed78560b206143ab0641470c   gke-cstor-demo-default-pool-3385ab41-hrmr   107374182400   Unclaimed    Active   34s\r\n\r\n    blockdevice-f6408e135943e1ee45171034655a8b88   gke-cstor-demo-default-pool-3385ab41-2ldq   107374182400   Unclaimed    Active   34s\r\n\r\nMy CSPC YAML is on the following link (you can copy/download and make changes accordingly).\r\n\r\n[https://raw.githubusercontent.com/openebs/elves/a8ce5d6401f1ab829a35214ea01c284ccfb03c13/demo/cspc/cspc-stripe.yaml](https://raw.githubusercontent.com/openebs/elves/a8ce5d6401f1ab829a35214ea01c284ccfb03c13/demo/cspc/cspc-stripe.yaml)\r\n\r\nSave the above file with your changes and apply the above YAML to provision cStor pools.\r\n\r\n    $ kubectl apply -f https://raw.githubusercontent.com/openebs/elves/a8ce5d6401f1ab829a35214ea01c284ccfb03c13/demo/cspc/cspc-stripe.yaml\r\n    cstorpoolcluster.openebs.io/cspc-stripe created\r\n\r\n    $ kubectl get cspi -n openebs\r\n\r\n    NAME               HOSTNAME                                    ALLOCATED   FREE    CAPACITY   STATUS   AGE\r\n\r\n    cspc-stripe-8vtx   gke-cstor-demo-default-pool-3385ab41-2ldq   69.5K       99.5G   99.5G      ONLINE   99s\r\n\r\n    cspc-stripe-h7kl   gke-cstor-demo-default-pool-3385ab41-bb69   69.5K       99.5G   99.5G      ONLINE   99s\r\n\r\n    cspc-stripe-x9pw   gke-cstor-demo-default-pool-3385ab41-hrmr   69.5K       99.5G   99.5G      ONLINE   99s\r\n\r\nIf you want to deploy a workload to use the cStor pool, go through the following cStor CSI driver link:\r\n[https://github.com/openebs/cstor-csi/blob/master/README.md](https://github.com/openebs/cstor-csi/blob/master/README.md)\r\n\r\nIn the next section, we will do pool expansion.\r\n\r\n#### Pool Expansion\r\n\r\nLet us expand one cStor stripe pool on a node by editing the CSPC cspc-stripe.\r\n\r\n    $ kubectl edit cspc cspc-stripe -n openebs\r\n\r\nSimply, add one more block device as follows. Make sure you do not put a block device that is a part of any other CSPC. I have added block device *blockdevice-d2d59218ed78560b206143ab0641470c* in my case.\r\n\r\n    $ kubectl edit cspc cspc-stripe -n openebs\r\n\r\n    ...\r\n    spec:\r\n      pools:\r\n      - nodeSelector:\r\n          kubernetes.io/hostname: gke-cstor-demo-default-pool-3385ab41-hrmr\r\n        poolConfig:\r\n          cacheFile: \"\"\r\n          compression: \"off\"\r\n          defaultRaidGroupType: stripe\r\n          overProvisioning: false\r\n        raidGroups:\r\n        - blockDevices:\r\n          - blockDeviceName: blockdevice-474d20376a541a8fb372d44f5bc361ea\r\n            capacity: \"\"\r\n            devLink: \"\"\r\n    # Block  device added. This must be attached to node\r\n    # gke-cstor-demo-default-pool-3385ab41-hrmr and should not be used by any other CSPC.\r\n          - blockDeviceName: blockdevice-d2d59218ed78560b206143ab0641470c\r\n\r\n          isReadCache: false\r\n          isSpare: false\r\n          isWriteCache: false\r\n          type: stripe\r\n    ...\r\n\r\nSave the above changes.\r\n\r\n    $ kubectl get cspi -n openebs\r\n\r\n    NAME               HOSTNAME                                    ALLOCATED   FREE    CAPACITY   STATUS   AGE\r\n\r\n    cspc-stripe-8vtx   gke-cstor-demo-default-pool-3385ab41-2ldq   268K        99.5G   99.5G      ONLINE   17m\r\n\r\n    cspc-stripe-h7kl   gke-cstor-demo-default-pool-3385ab41-bb69   292K        99.5G   99.5G      ONLINE   17m\r\n\r\n    cspc-stripe-x9pw   gke-cstor-demo-default-pool-3385ab41-hrmr   232K        199G    199G       ONLINE   17m\r\n\r\nYou can see that the pool cspc-stripe-x9pw got expanded. (Re-run the get cspi command if the bigger size is not shown instantaneously). Similarly, you can expand the other stripe cStor pools of the CSPC.\r\n\r\n#### Pool Deletion\r\n\r\nTo delete a cStor pool from node simple remove the node configuration from the CSPC.\r\n\r\nLet us delete one pool from CSPC cspc-stripe.\r\n\r\n    $ kubectl edit cspc cspc-stripe -n openebs\r\n    I have removed following entire config from the CSPC to delete pool on host gke-cstor-demo-default-pool-3385ab41-2ldq.\r\n    ...\r\n      - nodeSelector:\r\n          kubernetes.io/hostname: gke-cstor-demo-default-pool-3385ab41-2ldq\r\n        poolConfig:\r\n          cacheFile: \"\"\r\n          compression: \"off\"\r\n          defaultRaidGroupType: stripe\r\n          overProvisioning: false\r\n        raidGroups:\r\n        - blockDevices:\r\n          - blockDeviceName: blockdevice-ada8ef910929513c1ad650c08fbe3f36\r\n            capacity: \"\"\r\n            devLink: \"\"\r\n\r\n          isReadCache: false\r\n          isSpare: false\r\n          isWriteCache: false\r\n          type: stripe\r\n    ...\r\n\r\nAfter you are done removing, save it and you will see that pool on that node has been deleted.\r\n\r\n    $ kubectl get cspi -n openebs\r\n    NAME               HOSTNAME                                    ALLOCATED   FREE    CAPACITY   STATUS   AGE\r\n\r\n    cspc-stripe-h7kl   gke-cstor-demo-default-pool-3385ab41-bb69   335K        99.5G   99.5G      ONLINE   25m\r\n\r\n    cspc-stripe-x9pw   gke-cstor-demo-default-pool-3385ab41-hrmr   372K        199G    199G       ONLINE   25m\r\n\r\nYou can see that only two stripe pools are present.\r\n\r\n#### Pool Scale Up\r\n\r\nWe can even create a pool on other nodes by adding node config to the CSPC YAML. It is just the reverse of pool deletion.\r\n\r\nLet us try to add the same node config that we removed to again create the pool on the node. Make sure that while copy, pasting and editing indentation of YAML is not disturbed else error will be thrown and YAML will not be persisted.\r\n\r\nAdd the removed config from the pool deletion section to the CSPC.\r\n\r\n    $ kubectl get cspi -n openebs\r\n    NAME               HOSTNAME                                    ALLOCATED   FREE    CAPACITY   STATUS   AGE\r\n\r\n    cspc-stripe-h7kl   gke-cstor-demo-default-pool-3385ab41-bb69   318K        99.5G   99.5G      ONLINE   30m\r\n\r\n    cspc-stripe-twvv   gke-cstor-demo-default-pool-3385ab41-2ldq   50K         99.5G   99.5G      ONLINE   9s\r\n\r\n    cspc-stripe-x9pw   gke-cstor-demo-default-pool-3385ab41-hrmr   380K        199G    199G       ONLINE   30m\r\n\r\nYou can see that a new pool cspc-stripe-twvv has come up online.\r\n\r\nYou can also delete the CStorPoolCluster too. If you do so, all the CStorPoolInstances associated with it will get deleted.\r\n\r\nThe command is :\r\n    ```\r\n    $ kubectl delete cspc <cspc-name> <cspc-namespace>\r\n    ```\r\nNOTES:\r\n\r\n- Whenever a block device is used for pool creation or expansion a blockdeviceclaim CR is created and the block device will show a Claimed status.\r\n  The following are the commands to visualize this.\r\n    ```\r\n    kubectl get blockdevice -n openebs \r\n    kubectl get blockdeviceclaim -n openebs\r\n    ```\r\n- Whenever a pool is deleted for a CSPC by removing the node config, the associated block-device is not ‘Unclaimed’ and if the same block device needs to be used in another CSPC, the associated blockdeviceclaim needs to be cleared manually. Although, the block-device can be again used for the same CSPC.  \r\n\r\nTo unclaim a block device claim, below are the steps.\r\n\r\n\r\n    $ kubectl get bdc -n openebs\r\n      NAME                                             BLOCKDEVICENAME                                PHASE   AGE\r\n\r\n      bdc-cstor-83b8e958-d978-11e9-b0e6-42010a800189   blockdevice-9773ccb731e4e3e10c2838411f5f8b2a   Bound   32m\r\n\r\n      bdc-cstor-8581dac0-d978-11e9-b0e6-42010a800189   blockdevice-ada8ef910929513c1ad650c08fbe3f36   Bound   32m\r\n\r\n      bdc-cstor-85bddd0e-d978-11e9-b0e6-42010a800189   blockdevice-474d20376a541a8fb372d44f5bc361ea   Bound   32m\r\n\r\n      bdc-cstor-85c0fd2a-d978-11e9-b0e6-42010a800189   blockdevice-d2d59218ed78560b206143ab0641470c   Bound   15m\r\n\r\nLet us say, we want to unclaim block device blockdevice-d2d59218ed78560b206143ab0641470c, then we need to delete the associated blockdeviceclaim i.e. bdc-cstor-85c0fd2a-d978–11e9-b0e6–42010a800189.\r\n\r\n    $ kubectl edit bdc bdc-cstor-85c0fd2a-d978-11e9-b0e6-42010a800189 -n openebs\r\n      Remove the finalizer \"cstorpoolcluster.openebs.io/finalizer\" by editing the bdc from above command.\r\n      After that, execute following\r\n\r\n    $ kubectl delete bdc bdc-cstor-85c0fd2a-d978-11e9-b0e6-42010a800189 -n openebs\r\n\r\nNow the device will get unclaimed. Please note the following:\r\nBDC CRs should be deleted only when their association with CSPC has been removed. Otherwise, data corruption can happen.\r\n\r\n#### Block Device Replacement\r\n\r\nThe CSPC operator in OpenEBS (≥1.5 version ) enables you to do the replacement of the block devices in case it has gone bad. I will follow up with another blog post that will cover this block device replacement scenario.\r\n\r\nHope that the tutorial helps in understanding the pool operations steps.\r\n\r\nIf you have any questions or face any problems, feel free to reach out to me on OpenEBS slack channel.\r\n\r\nThank You!\r\n\r\nThis blog was originally published on Dec 13, 2019 on [MayaData blog](https://blog.mayadata.io/openebs/cstor-pool-operations-via-cspc-in-openebs).\r\n","slug":"cstor-pool-operations-via-cspc-in-openebs"},{"id":33,"title":"OpenEBS Dynamic Volume Provisioning on ZFS\r","author":"Pawan Prakash Sharma\r","author_info":"It's been an amazing experience in Software Engineering because of my love for coding. In my free time, I read books, play table tennis and watch tv series\r","date":"13-12-2019\r","tags":["CNCF"," Kubernetes"," Persistent Volume"," ZFS"," OpenEBS"],"excerpt":"OpenEBS’ ZFS driver binds a ZFS file system into the Kubernetes environment and allows users to provision and de-provision volumes dynamically. This blog will demonstrate how to deploy a Percona application on the ZFS storage system with OpenEBS.\r","content":"\r\nOpenEBS’ ZFS driver binds a ZFS file system into the Kubernetes environment and allows users to provision and de-provision volumes dynamically. This blog will demonstrate how to deploy a Percona application on the ZFS storage system with OpenEBS.\r\n\r\nUsing a ZFS Local PV has the following advantages — as opposed to Kubernetes native Local PV backed by direct attached devices:\r\n\r\n- Sharing of the devices among multiple application pods.\r\n- Enforcing quota on the volumes, making sure the pods don’t consume more than the capacity allocated to them.\r\n- Ability to take snapshots of the Local PV\r\n- Ability to sustain the disk failures — using the ZPOOL RAID functionality\r\n- Ability to use data services like compression and encryption.\r\n\r\nIn this post, I will demonstrate how we can use ZFS Local PV for deploying a Percona application.\r\n\r\n**Setup**\r\n\r\nWe will be using GKE with Kubernetes 1.14+ version with Ubuntu 18.4 installed on each node. We have to set up the node with ZFS utility once the cluster is up and running. We need to install [zfsutils-linux](https://packages.ubuntu.com/bionic/zfsutils-linux) on each node and use [ZFS commands](https://www.thegeekdiary.com/solaris-zfs-command-line-reference-cheat-sheet/) to set up a storage pool.\r\n\r\n    $ apt-get install -y zfsutils-linux\r\n\r\nCreate and attach the disk (if not already attached) to the nodes for setting up the ZPOOL:\r\n\r\n    $ gcloud compute disks create <disk-name> --size <size> --type pd-standard  --zone us-central1-a\r\n\r\n    $ gcloud compute instances attach-disk <node-name> --disk <disk-name> --zone us-central1-a\r\n\r\nCreate the zpool on each node using the attached disks (sdb and sdc):\r\n\r\n    $ zpool create zfspv-pool mirror /dev/sdb /dev/sdc\r\n\r\nHere we are creating a mirrored ZPOOL, we can create any kind of pool as per our requirement (raidz, striped or mirror).\r\n\r\nCheck the zpool list:\r\n\r\n    $ zfs list\r\n    NAME USED AVAIL REFER MOUNTPOINT\r\n\r\n    zfspv-pool 644K 96.4G 176K /zfspv-pool\r\n\r\nInstall OpenEBS ZFS driver :\r\n\r\n    $ kubectl apply -f [https://raw.githubusercontent.com/openebs/zfs-localpv/master/deploy/zfs-operator.yaml](https://raw.githubusercontent.com/openebs/zfs-localpv/master/deploy/zfs-operator.yaml)\r\n\r\nCheck that the driver is installed:\r\n\r\n    $ kubectl get pods -n kube-system -l role=openebs-zfs\r\n\r\n    NAME READY STATUS RESTARTS AGE\r\n\r\n    openebs-zfs-controller-0 4/4 Running 0 5h28m\r\n\r\n    openebs-zfs-node-4d94n 2/2 Running 0 5h28m\r\n\r\n    openebs-zfs-node-gssh8 2/2 Running 0 5h28m\r\n\r\n    openebs-zfs-node-twmx8 2/2 Running 0 5h28m\r\n\r\n**Create The Storage Class:**\r\n\r\n    $ cat sc.yaml\r\n    apiVersion: storage.k8s.io/v1\r\n    kind: StorageClass\r\n    metadata:\r\n      name: percona-sc\r\n    allowVolumeExpansion: true\r\n    parameters:\r\n      poolname: \"zfspv-pool\"\r\n    provisioner: zfs.csi.openebs.io\r\n\r\nThe storage class has a *poolname* parameter, which means that any volume provisioned using this storage class will be provisioned in this pool (zfspv-pool here). The provisioner *zfs.csi.openebs.io* is the provisioner name for the ZFS driver. You can change the poolname to the name of the ZPOOL which you have created for the provisioning. Apply the YAML to create the storage class:\r\n\r\n    $ kubectl apply -f sc.yaml\r\n\r\n    storageclass.storage.k8s.io/percona-sc created\r\n\r\n**Create The PVC:**\r\n\r\n    kind: PersistentVolumeClaim\r\n    apiVersion: v1\r\n    metadata:\r\n      name: percona-pvc\r\n    spec:\r\n      storageClassName: percona-sc\r\n      accessModes:\r\n        - ReadWriteOnce\r\n      resources:\r\n        requests:\r\n          storage: 4Gi\r\n\r\nCreate the PVC using the storage class created for the ZFS driver. You can request for the storage space via storage parameter as shown in above PVC for putting a request for 4Gi storage. Apply the YAML to create the PVC request.\r\n\r\n    $ kubectl apply -f pvc.yaml\r\n\r\n    persistentvolumeclaim/percona-pvc\r\n\r\nCheck the PVC\r\n\r\n    $ kubectl get pvc\r\n\r\n    NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE\r\n\r\n    percona-pvc Bound pvc-ecdb16e2-e03a-11e9-b418–42010a80006b 4Gi RWO percona-sc 5m39s\r\n\r\nHere, we can see that the PVC has been created and bound also as well.\r\n\r\n**Percona YAML:**\r\n\r\n    apiVersion: v1\r\n    kind: ConfigMap\r\n    metadata:\r\n      annotations:\r\n      name: sqltest\r\n      namespace: default\r\n    data:\r\n      sql-test.sh: |\r\n        #!/bin/bash\r\n\r\n    DB_PREFIX=\"Inventory\"\r\n        DB_SUFFIX=`echo $(mktemp) | cut -d '.' -f 2`\r\n        DB_NAME=\"${DB_PREFIX}_${DB_SUFFIX}\"\r\n\r\n    echo -e \"nWaiting for mysql server to start accepting connections..\"\r\n        retries=10;wait_retry=30\r\n        for i in `seq 1 $retries`; do\r\n          mysql -uroot -pk8sDem0 -e 'status' > /dev/null 2>&1\r\n          rc=$?\r\n          [ $rc -eq 0 ] && break\r\n          sleep $wait_retry\r\n        done\r\n\r\n    if [ $rc -ne 0 ];\r\n        then\r\n          echo -e \"nFailed to connect to db server after trying for $(($retries * $wait_retry))s, exitingn\"\r\n          exit 1\r\n        fi\r\n        mysql -uroot -pk8sDem0 -e \"CREATE DATABASE $DB_NAME;\"\r\n        mysql -uroot -pk8sDem0 -e \"CREATE TABLE Hardware (id INTEGER, name VARCHAR(20), owner VARCHAR(20),description VARCHAR(20));\" $DB_NAME\r\n        mysql -uroot -pk8sDem0 -e \"INSERT INTO Hardware (id, name, owner, description) values (1, \"dellserver\", \"basavaraj\", \"controller\");\" $DB_NAME\r\n        mysql -uroot -pk8sDem0 -e \"DROP DATABASE $DB_NAME;\"\r\n    ---\r\n    apiVersion: apps/v1\r\n    kind: Deployment\r\n    metadata:\r\n      name: percona\r\n      labels:\r\n        name: percona\r\n    spec:\r\n      replicas: 1\r\n      selector:\r\n        matchLabels:\r\n          name: percona\r\n      template:\r\n        metadata:\r\n          labels:\r\n            name: percona\r\n        spec:\r\n          containers:\r\n            - resources:\r\n              name: percona\r\n              image: openebs/tests-custom-percona:latest\r\n              imagePullPolicy: IfNotPresent\r\n              args:\r\n                - \"--ignore-db-dir\"\r\n                - \"lost+found\"\r\n              env:\r\n                - name: MYSQL_ROOT_PASSWORD\r\n                  value: k8sDem0\r\n              ports:\r\n                - containerPort: 3306\r\n                  name: percona\r\n              volumeMounts:\r\n                - mountPath: /var/lib/mysql\r\n                  name: demo-vol1\r\n                - mountPath: /sql-test.sh\r\n                  subPath: sql-test.sh\r\n                  name: sqltest-configmap\r\n              livenessProbe:\r\n                exec:\r\n                  command: [\"bash\", \"sql-test.sh\"]\r\n                initialDelaySeconds: 30\r\n                periodSeconds: 1\r\n                timeoutSeconds: 10\r\n          volumes:\r\n            - name: demo-vol1\r\n              persistentVolumeClaim:\r\n                claimName: percona-pvc\r\n            - name: sqltest-configmap\r\n              configMap:\r\n                name: sqltest\r\n\r\n    ---\r\n    apiVersion: v1\r\n    kind: Service\r\n    metadata:\r\n      name: percona-mysql\r\n      labels:\r\n        name: percona-mysql\r\n    spec:\r\n      ports:\r\n        - port: 3306\r\n          targetPort: 3306\r\n      selector:\r\n          name: percona\r\n\r\nApply the configuration:\r\n\r\n    $ kubectl apply -f percona.yaml\r\n\r\n    configmap/sqltest created\r\n    deployment.apps/percona created\r\n    service/percona-mysql created\r\n\r\nCheck the status of the Pod.\r\n\r\n    $ kubectl get po\r\n\r\n    NAME READY STATUS RESTARTS AGE\r\n\r\n    percona-7456dc6f7b-nnfcz 1/1 Running 0 67s\r\n\r\nWe can go the node where percona pod is scheduled and see that a volume has been created in the pool zfspv-pool using the ZFS list command,:-\r\n\r\n    $ zfs list\r\n\r\n    NAME USED AVAIL REFER MOUNTPOINT\r\n\r\n    zfspv-pool 115M 96.3G 176K /zfspv-pool\r\n\r\n    zfspv-pool/pvc-ecdb16e2-e03a-11e9-b418–42010a80006b 102M 96.3G 102M -\r\n\r\n### Summary\r\n\r\nAs demonstrated in this blog, OpenEBS makes it easy for the Kubernetes applications to take advantage of all the technical features provided by ZFS storage.\r\n\r\n### Important links\r\n\r\n[https://github.com/openebs/zfs-localpv](https://github.com/openebs/zfs-localpv)\r\n","slug":"openebs-dynamic-volume-provisioning-on-zfs"},{"id":34,"title":"Cloud Native Chaos Engineering — Enhancing Kubernetes Application Resiliency\r","author":"Uma Mukkara\r","author_info":"Contributor at openebs.io, Co-founder & COO@MayaData. Uma led product development in the early days of MayaData (CloudByte).\r","date":"25-11-2019\r","tags":["Chaos Engineering"," Cloud Native"," Docker"," Kubernetes"," Uncategorized"],"excerpt":"In this blog, I would like to introduce a relatively new or less frequently used term called “Cloud Native Chaos Engineering”, defined as engineering practices focused on (and built on) Kubernetes environments, applications, microservices, and infrastructure.\r","content":"\r\n## Extending Cloud Native Principles to Chaos Engineering\r\n\r\nFaults are bound to happen no matter how hard you test to find them before putting your software into production — clouds and availability zones will have issues, networks will drop, and, yes, bugs will make their presence felt. Resilience is how well a system withstands such faults — a highly resilient system, for example, one built with loosely coupled micro services that can themselves be restarted and scaled easily, overcomes such faults without impacting users. Chaos Engineering is the practice of injecting faults into a system before they naturally occur. Chaos Engineering is now accepted as an essential approach for ensuring that today’s frequently changing and highly complex systems are achieving the resilience required. Through chaos engineering, unanticipated failure scenarios can be discovered and corrected before causing user issues.\r\n\r\nBroad adoption has made Kubernetes one of the most important platforms for software development and operations. The word “Cloud Native” is an overloaded term that has been co-opted by many traditional vendors to mean almost anything; even CNCF has allowed the use of the term cloud native to describe technologies that predate the cloud native pattern by, in some cases, decades. For the purposes of this blog, I’d like to use a more technical definition of cloud native; cloud native is here defined as an architecture where the components are microservices that are loosely coupled and, more specifically, are deployed in containers that are orchestrated by Kubernetes and related projects.\r\n\r\nIn this blog, I would like to introduce a relatively new or less frequently used term called “Cloud Native Chaos Engineering”, defined as engineering practices focused on (and built on) Kubernetes environments, applications, microservices, and infrastructure.\r\n\r\nCNCF is, first and foremost, an open-source community (while some projects may not be strictly cloud native, they are all open-source). If Kubernetes had not been open-source, it would not have become the defacto platform for software development and operations. With that in mind, I’d like to stake the claim that Cloud Native Chaos Engineering is necessarily based on open source technologies.\r\n\r\n## 4 Principles of a Cloud Native Chaos Engineering Framework\r\n\r\n1. Open source — The framework has to be completely open-source under the Apache2 License to encourage broader community participation and inspection. The number of applications moving to the Kubernetes platform is limitless. At such a large scale, only the Open Chaos model will thrive and get the required adoption.\r\n2. CRDs for Chaos Management — Kubernetes native — defined here as using Kubernetes CRDs as APIs for both Developers and SREs to build and orchestrate chaos testing. The CRDs act as standard APIs to provision and manage the chaos.\r\n3. Extensible and pluggable — One lesson learned why cloud native approaches are winning is that their components can be relatively easily swapped out and new ones introduced as needed. Any standard chaos library or functionality developed by other open-source developers should be able to be integrated into and orchestrated for testing via this pluggable framework.\r\n4. Broad Community adoption — Once we have the APIs, Operator, and plugin framework, we have all the ingredients needed for a common way of injecting chaos. The chaos will be run against a well-known infrastructure like Kubernetes or applications like databases or other infrastructure components like storage or networking. These chaos experiments can be reused, and a broad-based community is useful for identifying and contributing to other high-value scenarios. Hence a Chaos Engineering framework should provide a central hub or forge where open-source chaos experiments are shared, and collaboration via code is enabled.\r\n\r\n## Introduction to Litmus\r\n\r\nLitmus is a cloud native chaos Engineering framework for Kubernetes. It is unique in fulfilling all 4 of the above parameters. Litmus originally started as a chaos toolset to run E2E pipelines for the CNCF SandBox project OpenEBS — powering, for example, [OpenEBS.ci](https://openebs.ci/) — and has evolved into a completely open-source framework for building and operating chaos tests on Kubernetes based systems. It consists of four main components-\r\n\r\n- Chaos CRDs or API\r\n- Chaos Operator\r\n- Chaos libraries and plugin framework\r\n- Chaos Hub\r\n\r\n![Introduction to Litmus](https://cdn-images-1.medium.com/max/800/0*GSvTfFh5KgBKM7M5.png)\r\n\r\n## Chaos API\r\n\r\nCurrently, Litmus provides three APIs:\r\n\r\n- ChaosEngine\r\n- ChaosExperiment\r\n- ChaosResult\r\n\r\n*ChaosEngine:* ChaosEngine CR is created for a given application and is tagged with appLabel. This CR ties one or more ChaosExperiments to an application.\r\n\r\n*ChaosExperiment:* ChaosExperiment CR is created to hold and operate the details of actual chaos on an application. It defines the type of experiment and key parameters of the experiment.\r\n\r\n*ChaosResult:* ChaosResult CR is created by the operator after an experiment is run. One ChaosResult CR is maintained per ChaosEngine. The ChaosResult CR is useful in making sense of a given ChaosExperiment. This CR is used for generating chaos analytics which can be extremely useful — for example when certain components are upgraded between the chaos experiments, and the results need to be easily compared\r\n\r\n## Chaos Operator\r\n\r\nThe Litmus Operator is implemented using the Operator-SDK. This operator manages the lifecycle of the chaos CRs. The lifecycle of Litmus itself can be managed using this operator as it follows the lifecycle management API requirements. The chaos operator is also available at [operatorhub.io](https://operatorhub.io/operator/litmuschaos)\r\n\r\n## Chaos Libraries and external Plugins\r\n\r\nThe actual injection of chaos is done by chaos libraries or chaos executors. For example, the Litmus project has already built a chaos library called “LitmusLib”. LitmusLib is aware of how to kill a pod, how to introduce a CPU hog, how to hog memory or how to kill a node, and several other faults and degradations. Like LitmusLib, there are other open-source chaos projects like Pumba or PowerfulSeal. The CNCF landscape has more details of various chaos engineering projects. As shown below, the Litmus plugin framework allows other chaos projects to make use of Litmus for chaos orchestration. For example, one can create a chaos chart for the pod-kill experiment using Pumba or PowerfulSeal and execute it via the Litmus framework.\r\n\r\n![Chaos Libraries and external Plugins](https://cdn-images-1.medium.com/max/800/0*0vm-YfScAxXoijFd.png)\r\n\r\n**PowerfulSeal and Pumba are shown as examples.**\r\n\r\n## Chaos Hub\r\n\r\nChaos charts are located at [hub.litmuschaos.io](https://hub.litmuschaos.io/). ChaosHub brings all the reusable chaos experiments together. Application developers and SRE share their chaos experiences for others to reuse. The goal of the hub is to have the developers share the failure tests that they are using to validate their applications in CI pipelines to their users, who are typically SREs.\r\n\r\n![Chaos Hub](https://cdn-images-1.medium.com/max/800/0*22JUDGxtNFNcgU5J.png)\r\n\r\nCurrently, the chaos hub contains charts for Kubernetes chaos and OpenEBS chaos. We expect to receive more contributions from the community going forward.\r\n\r\n### Example use cases of Litmus:\r\n\r\nThe most simple use case of Litmus is application developers using Litmus in the development phase itself. Chaos Engineering has been limited to the Production environment, and lately, we are seeing this practice being adopted in CI pipelines. But with Litmus, chaos testing is possible during development as well. Like Unit Testing, Integration Testing, and Behavior-Driven Testing, Chaos Testing is a test philosophy for developers to carry out the negative test scenarios to test the resiliency of the code before the code is merged to the repository. Chaos testing can be appended very easily to the application, as shown below:\r\n\r\n![Cloud native api for Chaos engineering](https://cdn-images-1.medium.com/max/800/0*xT_x1Wd2TFyM2LfR.gif)\r\n\r\nOther use cases of Litmus are for inducing chaos in CI pipelines and production environments.\r\n\r\n## Summary\r\n\r\nWith the introduction of chaos operator, chaos CRDs, and chaos hub, Litmus has all the key ingredients of Cloud Native Chaos Engineering.\r\n\r\n### Important links:\r\n\r\nGitHub: [github.com/litmuschaos](https://github.com/litmuschaos/litmus)\r\n\r\nTwitter: [@litmuschaos](https://twitter.com/litmuschaos)\r\n\r\nChaos Charts: [hub.litmuschaos.io](https://hub.litmuschaos.io/)\r\n\r\nCommunity Slack: [#litmus channel on K8S Slack](https://kubernetes.slack.com/messages/CNXNB0ZTN)\r\n\r\nThis post was originally published by Umasankar Mukkara, on [Nov. 06, 2019 on CNCF’s blog](https://www.cncf.io/blog/2019/11/06/cloud-native-chaos-engineering-enhancing-kubernetes-application-resiliency/).\r\n","slug":"cloud-native-chaos-engineeringenhancing-kubernetes-application-resiliency"},{"id":35,"title":"ECK & OpenEBS — Data Ops Streamlines Deployment\r","author":"Uma Mukkara\r","author_info":"Contributor at openebs.io, Co-founder & COO@MayaData. Uma led product development in the early days of MayaData (CloudByte).\r","date":"23-08-2019\r","tags":["Eck"," Elasticsearch"," Kubernetes"," LocalPV"," OpenEBS"],"excerpt":"Using OpenEBS, administrators can easily manage local PV storage resources for ECK seamlessly across both on-premises and multiple clouds, simplifying ElasticSearch ECK scaling and resilience while finally delivering a completely declaratively-managed application stack.\r","content":"\r\n### TL;DR\r\n\r\nUsing OpenEBS, administrators can easily manage local PV storage resources for ECK seamlessly across both on-premises and multiple clouds, simplifying ElasticSearch ECK scaling and resilience while finally delivering a completely declaratively-managed application stack. Let’s review how.\r\n\r\n**Good News: The recently shipped** [**Elastic Cloud on Kubernetes (ECK)**](https://www.elastic.co/blog/introducing-elastic-cloud-on-kubernetes-the-elasticsearch-operator-and-beyond) delivers Elasticsearch clusters as native, distributed Kubernetes Operators. Elasticsearch is a distributed, open source search and analytics engine for all types of data. Widely used, Elasticsearch is storage-intensive because it builds an inverted index of collections of JSON objects that are related to each other to allow very fast full-text searches. The result is a simplified deployment of ElasticSearch for the Kubernetes admins or SREs as well as a simplified developer experience.\r\n\r\n**Bad News: ElasticSearch uses fast local storage but it does not address storage provisioning and management.** ECK use of the [static provisioner for Local](https://github.com/kubernetes-sigs/sig-storage-local-static-provisioner) PV requires administrators to manually format, mount, and configure disks on Kubernetes nodes. This is a PITA, as they say.\r\n\r\n**Good News: OpenEBS removes the burden of Storage Operations for ECK Deployments.** With OpenEBS, administrators can easily manage local PV storage resources for ECK seamlessly across both on-premises and multiple clouds, simplifying ElasticSearch scaling and resilience.\r\n\r\n### Vanilla K8s (PITA)\r\n\r\nTypically, ElasticSearch is deployed one of two ways:\r\n\r\n- **Dedicated mode:** Elastic pods are using LocalPV which are real disks, and they need to be dynamically provisioned as the pods’ scale.\r\n- **Shared mode:** Elastic pods are using LocalPVs from shared storage for better capacity economics.\r\n\r\n  Here is the detail on K8s static provisioners from [K8s documentation](https://github.com/kubernetes-sigs/sig-storage-local-static-provisioner)\r\n\r\n  *Note that the local storage provisioner is different from most provisioners and does not support dynamic provisioning. Instead, it requires that administrators preconfigure the local volumes on each node and if volumes are supposed to be*\r\n\r\n- *Filesystem volumeMode (default) PVs — mount them under discovery directories.*\r\n- *Block volumeMode PVs — create a symbolic link under discovery directory to the block device on the node.*\r\n\r\n  *The provisioner will manage the volumes under the discovery directories by creating and cleaning up PersistentVolumes for each volume.*\r\n\r\n  *This means a Kubernetes administrator must manually manage storage operations outside of the ECK operator itself. Specifically,*\r\n\r\n  *– Capacity resize of underlying volumes.*\r\n\r\n  *– Capacity management of shared storage when deployed in shared mode.*\r\n\r\n  *– Shifting of some of the data volumes from one node to another automatically in case a node has to be cordoned or drained.*\r\n\r\n  *– Move data to other Kubernetes clusters.*\r\n\r\n**Note: insert administrator sweat equity here^.**\r\n\r\n### OpenEBS LocalPV + Data Ops (Good)\r\n\r\nAn OpenEBS storage cluster, itself Kubernetes-native, simplifies and automates storage provisioning and management operations either on your data center or in the cloud (or spanning both!). OpenEBS provisioners use OpenEBS disk pool operators and built-in data management capabilities to dynamically provision LocalPVs in a host path or in a disk mode to ECK pods.\r\n\r\n![Multiple elastic data nodes sharing a pool of disks for thim provisioning effect](https://cdn-images-1.medium.com/max/800/1*PHw4zrcvJF_w-VcTI90RbA.png)\r\n\r\n### K8s Advantage: Declarative Data Plane\r\n\r\nOpenEBS uses a Declarative Data Plane to manage storage operations which aligns architecturally with Kubernetes Operators generally, and specifically with the ECK operator. Storage is typically the last “architectural mile” of Kubernetes deployments. Storage has gravity for applications that tends to tie Kubernetes clusters to the storage infrastructure beneath it. The OpenEBS Declarative Data Plane removes that last architectural mile by providing a completely Kubernetes-native software-defined storage infrastructure that spans on-premise and cloud resources and lets administrators manage Kubernetes application gravity consistently across all sites.\r\n\r\n**OpenEBS-managed storage means that the end-to-end operations of the entire Kubernetes application stack is finally managed, top to bottom, in a completely declarative way.**\r\n\r\n### Configuring a Dynamic localPV for ECK\r\n\r\nThe StorageClass spec for [OpenEBS LocalPV](https://docs.openebs.io/docs/next/uglocalpv.html) for automatically choosing an available disk on the node and mounting that disk with ext4 volume would look like the following:\r\n\r\n    cat <<EOF | kubectl apply -f -\r\n    apiVersion: elasticsearch.k8s.elastic.co/v1alpha1\r\n    kind: Elasticsearch\r\n    metadata:\r\n     name: quickstart\r\n    spec:\r\n     version: 7.2.0\r\n     nodes:\r\n     — nodeCount: 3\r\n     config:\r\n     node.master: true\r\n     node.data: true\r\n     node.ingest: true\r\n     volumeClaimTemplates:\r\n     — metadata:\r\n     name: elasticsearch-data # note: elasticsearch-data must be the name of the Elasticsearch volume\r\n     spec:\r\n     accessModes:\r\n     — ReadWriteOnce\r\n     resources:\r\n     requests:\r\n     storage: 10Gi\r\n     storageClassName: OpenEBS-LocalPV\r\n    EOF\r\n\r\nThe StorageClass spec for [OpenEBS LocalPV](https://docs.openebs.io/docs/next/uglocalpv.html) for automatically choosing an available disk on the node and mounting that disk with ext4 volume would look like the following:\r\n\r\n    apiVersion: storage.k8s.io/v1\r\n    kind: StorageClass\r\n    metadata:\r\n      name: openebs-localpv-disk\r\n      annotations:\r\n        openebs.io/cas-type: local\r\n        cas.openebs.io/config: |\r\n          - name: StorageType\r\n            value: \"device\"\r\n          - name: FSType\r\n            value: ext4\r\n    provisioner: openebs.io/local\r\n    volumeBindingMode: WaitForFirstConsumer\r\n    reclaimPolicy: Delete\r\n    ---\r\n\r\nIn my next blog, I will give a simple tutorial of how to configure OpenEBS and ECK to realize the dynamic local PV allocations.\r\n\r\n### Summary\r\n\r\nUsing OpenEBS administrators can easily manage local PV storage resources for ECK seamlessly across both on-premises and multiple clouds, simplifying ElasticSearch ECK scaling and resilience while finally delivering a completely declaratively-managed application stack.\r\n\r\n### Important links\r\n\r\n- Haven’t joined our wonderful OpenEBS community? Join [here](https://slack.openebs.io).\r\n- [Free forever Kubernetes visibility](https://director.mayadata.io).\r\n","slug":"eck-openebsdata-ops-streamlines-deployment"},{"id":36,"title":"The Myth of THE database\r","author":"Evan Powell\r","author_info":"Founding CEO of a few companies including StackStorm (BRCD) and Nexenta — and CEO & Chairman of OpenEBS/MayaData. ML and DevOps and Python, oh my!\r","date":"21-08-2019\r","tags":["DevOps"," Kubernetes"," OpenEBS"," Postgresql"," Database"],"excerpt":"In this blog I briefly discuss the disaggregation of the DB at what might be called the macro or architecture level and then at the micro or intra DB level. \r","content":"\r\nI feel blessed these days to be on the front lines of Kubernetes becoming the preferred platform for running all workloads, including high value stateful workloads.\r\n\r\nOne pattern many of my investor friends — and even new MayaData team members not already encamped in the CNCF ecosystem may be overlooking — is the demise of the THE database pattern. Actually looking back at a DBaaS on Kubernetes blog I wrote less than a year ago I think I didn’t emphasize enough that there is rarely one layer, or one DB at the core of it all. (see that blog [here](https://blog.openebs.io/running-your-own-dbaas-based-on-your-preferred-dbs-kubernetes-operators-and-containerized-storage-3cc36ba115b8) if you are curious — it is a popular one :))\r\n\r\nIn *this* blog I briefly discuss the disaggregation of the DB at what might be called the macro or architecture level and then at the micro or intra DB level. I then offer a couple of considerations.\r\n\r\n### Macro level — the THE database evaporates\r\n\r\nAs has been explained by Zhamak Deghani of ThoughtWorks in her excellent blog How to [Move Beyond a Monolithic Data Lake to a Distributed Data Mesh](https://martinfowler.com/articles/data-monolith-to-mesh.html) and on [Software Engineering Daily ](https://softwareengineeringdaily.com/2019/07/29/data-mesh-with-zhamak-deghani)— the data mesh pattern implies:\r\n\r\n- Disaggregating or distributing responsibility and autonomy\r\n- Disaggregating or distributing the role of the DB itself\r\n\r\nTypically this pattern can be easily identified when chatting with a larger user of OpenEBS when we ask “so, what DBs and other stateful workloads like logging systems are you running?”\r\n\r\nIf they give us an answer such as MySql, Prometheus, one of the 438 new *SQL projects* and maybe Elastic and then *stop* — then we know they are either early in their Kubernetes deployment or that IT still runs the show. As such they may not be a great fit for doing the work necessary to achieve the data agility that comes from containerizing and distributing your data and data management in a cloud native and cloud agnostic way.\r\n\r\nConversely if their reply to the question is to sort of look at us like that’s an *interesting* question — and reply by saying “pretty much all of them — whatever the teams need” then we are off and running — we’ve found a kindred spirit and we typically dig into a discussion covering all sorts of topics such as:\r\n\r\n- How they use GitOps to manage storage classes and possibly extend them to cover data resilience and back up?\r\n- What do they do about anti patterns that persist — such as the use of NFS?\r\n- What is the average tenure of a cluster? (often not long)\r\n- Rolling upgrades of stateful workloads?\r\n- Favorite and not so favorite operators?\r\n- WeaveScope / Kubera director for visualization or something else?\r\n- Lock-in — anyone care? (meh — bosses do)\r\n- Blast radius — anyone care? (generally yes)\r\n- How about consistency between dev, test, and production?\r\n- Encryption — key management — in flight and at rest?\r\n\r\nWe invariably learn a lot and by sharing what we have learned we teach a bit as well. I had such a conversation before sitting down to write this and the lessons the engineer had learned while helping to build a very large container based environment at a NYC financial environments were priceless.\r\n\r\nIn short, instead of having a central database to store all the things — or a data lake or similar — one disaggregates control over the data in order to “shift left” and enable small teams to move faster. A primary role of Kubernetes engineers working with data — sometimes the data ops or analytics infrastructure teams — then becomes to provide paved paths that come with compliance, back-up, monitoring and more “for free” from the perspective of the small loosely coupled teams building particular stateful microservices.\r\n\r\n### Micro level — the THE database itself is complex\r\n\r\nExamine any database closely and you’ll find that it is comprised of a number of components and that increasingly the architecture is pluggable — so you can have many different flavors of a database.\r\n\r\nAn example PostgreSQL has 5 primary types of configurations to consider — as explained in this well written blog by Chitji Chauhan of severalnines.\r\n\r\n[https://severalnines.com/database-blog/guide-postgresql-server-configuration-parameters](https://severalnines.com/database-blog/guide-postgresql-server-configuration-parameters)\r\n\r\nAnd choosing which one to use depends in part upon where the data is being stored and how that storage is configured.\r\n\r\nSo what can you do about it — how can you or your central committee of data architects pick THE right solution?\r\n\r\nAgain — the answer is to distribute the decision to those closest to the use cases for the data itself — the engineers building the microservices that include these workloads. Instead of endless meetings or design reviews to arrive at the perfect central DB or DB service — try what works for you and move along. If you run in a containerized way with the help of Kubernetes and a cloud agnostic storage layer like the CNCF project OpenEBS and you use something like Kafka or just NATS for messaging or maybe Pulsar for that matter — then you don’t have an irrevocable choice that may plague you for years to come and can better fit a particular database with a particular set of configurations for a particular job you want done.\r\n\r\nWe see users adopting OpenEBS for truly per workload, per DB storage, and deciding whether to use one of the storage engines within OpenEBS, either LocalPV or cStor, and settling upon some tuning and some patterns with the help of Litmus or other testing systems and Kubera Director or some other means of tracking performance and visualization. These best practices — for example which time series DB to use and how to configure it and even where to run it and how to back it up — are then encoded in YAML. And then something like Flux from Weaveworks or a home built GitOps solution is used to manage these artifacts. The promise is the ease of use of a public cloud — for the developer at least — with massively greater customization and control including freedom from cloud lock-in.\r\n\r\nDatabases will evolve further to leverage Kubernetes by using Kubernetes for capabilities that previously every distributed data system had to build and operate itself. As an example you have in almost all distributed systems including DBs a means of determining what resources are available — if you know Kubernetes than you’ll know that etcd plays this role in Kubernetes and that when it comes to storage resources such as disks and cloud volumes that the NDM components of OpenEBS extend etcd to play this role. Increasingly we see savvy technology companies looking at Kubernetes as their common denominator, and expecting their infrastructure to add to Kubernetes where appropriate as opposed to every piece of software reinventing the wheel.\r\n\r\n### TL;DR — Freedom from disaggregation is good\r\n\r\nThe good news is that it is increasingly less likely you’ll be stuck managing someone else’s NoSql or NewSql system du jour years after the choice was made. Yes, databases are sticky and important however increasingly they are also fit for *specific purposes* and able to be used and disposed of when no longer needed. As the team at MayaData has pointed out many times in various blogs and Slack sessions and talks, the average size of a database on Kubernetes in a microservices environment is smaller than in traditional centralized architectures featuring THE database.\r\n\r\nWhat is more — many of the benefits of going towards a distributed data model and moving beyond the “THE database” pattern are best captured if the underlying storage itself is disaggregated and distributed. Conversely, if you shift away from one central DB or data lake to a disaggregated model and then tie everything together with a single storage system or service or cloud then actually you’ve just shoved the issue and the constraints down a level. And they will bob to the surface when you are dealing with the rapids of the non happy path — for example, upgrades, or replacements, or migrations, or when you have an outage from which you need to recover.\r\n\r\nSo if you think that disaggregation and distributed control and responsibility are important for your databases, please do stop by and say hi to us in the OpenEBS community. There are a lot of folks there now helping to build the disaggregated data future — integrators, fellow developers, contributors from databases and OpenEBS and other projects.\r\n\r\nI hope to see you there. [https://openebs.io/join-our-slack-community](https://openebs.io/join-our-slack-community)\r\n\r\n![Join OpenEBS channel](https://cdn-images-1.medium.com/max/800/openebs-channel-slack.png)\r\n","slug":"the-myth-of-the-database"},{"id":37,"title":"Using Chaos Engineering to harden applications that use NuoDB, OpenEBS\r","author":"Sudarshan Darga\r","author_info":"Senior Software Engineer at MayaData\r","date":"14-08-2019\r","tags":["OpenEBS"," K8s"," Litmus"," Kubernetes"," Nuodb"," NoSQL"," Chaos Engineering"],"excerpt":"Developer agility is key to increasing the efficiency of software development. One of the primary areas in which development could be slowed down is the process that kicks in once the code is merged by the developers.\r","content":"\r\nDeveloper agility is key to increasing the efficiency of software development. One of the primary areas in which development could be slowed down is the process that kicks in once the code is merged by the developers. In a typical organization with DevOps practices in place, CI/CD is set up for the application development, where developers are involved in the process until the code is merged.\r\n\r\nThen, CI pipelines take over the process of doing e2e testing and provide feedback to the developers. With applications moving towards being more cloud native, the number of components that run in containers has become increasingly high. Because these components are also of a cloud native nature, their delivery becomes agile and the software updates to these components become more frequent. Realistically, it should be easy enough to test the changes in these components in the pipelines.\r\n\r\nThis leads to an important question:\r\n\r\n- **How do we build a CI pipeline where verification and hardening of the infrastructure components can be done easily and devote more time to developing the pipeline jobs related to the application business logic?**\r\n\r\n![Building CI/CD pipeline jobs for infrastructure components should not take much time.](/images/blog/building-cicd-pipelines-jobs.png)\r\n\r\nThe answer to this question lies in adopting the cloud native chaos engineering into the CI/CD pipelines. Chaos Engineering is quickly becoming the most sought after method wheb building resiliency into cloud native applications. In ideal chaos engineering applications, chaos should be inserted at all layers (application, database, networking, storage, and Kubernetes), both in the CI pipelines and in production. Litmus is a chaos engineering framework designed to help with this specific need. For a good introduction to Litmus, see the Litmus docs ([https://litmusdocs.openebs.io/](https://litmusdocs.openebs.io/?__hstc=216392137.c88247b0ad679226f41f93a581cb1abd.1579859560609.1579859560609.1579859560609.1&amp;__hssc=216392137.1.1579859560609&amp;__hsfp=3765904294) )\r\n\r\nIn this post, we specifically want to focus on what Litmus deployers and chaos jobs are available to build a CI/CD pipeline in order to harden an application using NuoDB on Kubernetes. Before we dive into NuoDB’s chaos engineering, let’s give a quick introduction to NuoDB.\r\n\r\n*NuoDB is an elastic SQL database designed with distributed application deployment challenges in mind. It’s a SQL service that provides all the properties of ACID-compliant transactions and standard relational SQL language support. It’s also designed from the start as a distributed system that scales the way a cloud service has to scale, providing high availability and resiliency with no single points of failure. Different from traditional shared-disk or shared- nothing architectures, NuoDB’s presents a new kind of peer-to-peer, on-demand independence that yields high availability, low-latency, and a deployment model that is easy to manage.*\r\n\r\n![NuoDB Overview and Benefits](/images/blog/nuodb-overview-and-benefits.png)\r\n\r\n## Full stack view of a cloud native application using NuoDB and Kubernetes\r\n\r\n![Full Stack View of an Application using NuoDB, OpenEBS and Kubernetes](/images/blog/full-stack-view.png)\r\n\r\nDevelopers and DevOps admins should really concentrate on building the test cases for the business logic involved in the application PODs. Pipelines for hardening the rest of the components of the stack, such as NuoDB implementation, OpenEBS implementation, and Kubernetes/OpenShift implementation, can be built using Litmus books. Later in this post, you will find reference implementation and example litmus books that you can use.\r\n\r\n## Elements of a NuoDB CI/CD pipeline\r\n\r\n![GitLab CI pipeline for NuoDB on OpenShift using OpenEBS as persistent storage](/images/blog/gitlab-cicd-pipeline-for-nuodb.png)\r\n\r\nThe figure above is a sample GitLab pipeline that is running OpenShift EE 3.11 and NuoDB 3.3 EE with Litmus. The stages are:\r\n\r\n- CLUSTER-Setup\r\n- OpenEBS-Setup\r\n- FUNCTIONAL\r\n- CHAOS\r\n- CLEANUP\r\n\r\nLitmus provides almost-ready books for every stage except FUNCTIONAL. Here, the Developers and DevOps admins should be spending time creating the tests for their applications. The remaining stages are generic enough that Litmus can accomplish the work for you with the tuning of the parameters.\r\n\r\n## A reference implementation of a NuoDB pipeline:\r\n\r\nThe NuoDB GitLab pipeline implementation for OpenShift EE platform and the corresponding Litmus books are all available in the OpenEBS GitHub repository at the following location.\r\n\r\n[openebs/e2e-openshiftAutomation of OpenEBS E2E testing on OpenShift On-Premise — openebs/e2e-openshiftgithub.com](https://github.com/openebs/e2e-openshift/blob/nuodb/.gitlab-ci.yml)\r\n\r\n## NuoDB Solution Guide:\r\n\r\nHere is a handy solution doc for implementing NuoDB using OpenEBS as persistent storage on OpenShift EE platform.\r\n\r\n[https://mayadata.io/assets/pdf/nuodb-openebs-solution-docs.pdf](https://mayadata.io/assets/pdf/nuodb-openebs-solution-docs.pdf)\r\n\r\nIf you are an ansible enthusiast or NuoDB user and wish to contribute to Litmus, feel free to join our community slack channel: slack.openebs.io and visit #litmus channel. We welcome any contributions and feedback!\r\n\r\n### Summary:\r\n\r\nBuilding CI/CD pipelines for applications built on NuoDB, OpenEBS and Kubernetes/OpenShift is quick and easy and most of the pipeline is readily available through Litmus. You can use the readily available Litmus books to build Chaos Engineering into your GitLab pipelines.\r\n\r\n*LITMUS* **—** *Make Chaos Engineering simple for Kubernetes*\r\n\r\n### Authors:\r\n\r\nUma Mukkara, COO @ MayaData ([Uma Mukkara](https://medium.com/@uma_mukkara))\r\n\r\nSudarshan Darga, Lead Engineer — Chaos Engineering @ MayaData ([Sudarshan Darga](https://medium.com/@sudarshan.darga))\r\n\r\n---\r\n\r\n## Example litmus jobs for OpenShift EE\r\n\r\n### Litmus book for OpenShift EE Cluster Setup\r\n\r\nLitmus job for creating OpenShift Enterprise 3.10 cluster on on-premise virtual machines.\r\n\r\n[https://raw.githubusercontent.com/openebs/litmus/master/k8s/on-prem/openshift-installer/create_openshift_cluster.yml](https://raw.githubusercontent.com/openebs/litmus/master/k8s/on-prem/openshift-installer/create_openshift_cluster.yml)\r\n\r\n    ---\r\n    - hosts: localhost\r\n    \r\n      vars_files:\r\n        - vars.yml\r\n      \r\n    \r\n      tasks:\r\n        - block:\r\n            \r\n            - name: Getting master ip\r\n              shell: cat ip.csv | awk 'NR == 1'\r\n              register: master_ip\r\n    \r\n            - name: Generating master SSH key\r\n              shell: ssh -o StrictHostKeyChecking=no root@ 'ssh-keygen -t rsa -N \\\"\\\" -f ~/.ssh/id_rsa -y'\r\n              register: master_key\r\n    \r\n            - name: Getting compute-nodes ip\r\n              shell: cat ip.csv | grep -v \r\n              register: compute_ip\r\n              \r\n            - name: Generating compute-node SSH key\r\n              shell: ssh -o StrictHostKeyChecking=no root@{{item}} 'ssh-keygen -t rsa -N \\\"\\\" -f ~/.ssh/id_rsa -y'\r\n              with_items: \"\"  \r\n    \r\n            - name: Copying ssh-key into master\r\n              shell: | \r\n                ssh -o StrictHostKeyChecking=no root@ 'echo  >> ~/.ssh/authorized_keys'  \r\n                eval 'ssh-agent'\r\n    \r\n            - name: Copying the SSH key into compute nodes\r\n              shell: |\r\n                ssh -o StrictHostKeyChecking=no root@{{item}} 'echo  >> ~/.ssh/authorized_keys'\r\n                eval 'ssh-agent' \r\n              with_items: \"\"\r\n     \r\n            - name: SSH from master to each Nodes \r\n              shell: ssh -o StrictHostKeyChecking=no root@ 'ssh -o StrictHostKeyChecking=no root@{{item}} ls'\r\n              with_lines: cat ./ip.csv\r\n    \r\n            - name: Generating random number\r\n              shell: date +%s\r\n              register: rand_num\r\n    \r\n            - name: Setting up the master hostname \r\n              shell: |\r\n                ssh -o StrictHostKeyChecking=no root@ 'echo master-. > /etc/hostname'\r\n                ssh -o StrictHostKeyChecking=no root@ 'systemctl start systemd-hostnamed'\r\n    \r\n            - name: Setting up the compute nodes hostname\r\n              shell: |\r\n                ssh -o StrictHostKeyChecking=no root@ 'echo node-. > /etc/hostname'\r\n                ssh -o StrictHostKeyChecking=no root@ 'systemctl start systemd-hostnamed'  \r\n              with_together: \r\n                - [ '1', '2', '3' ]\r\n                - \"\" \r\n    \r\n    #The VMs are already subscribed with some credentials. Need to unsubscribe the VMs & subscribe it again with new credentials.\r\n            - name: Unsubscribing the nodes\r\n              shell: ssh -o StrictHostKeyChecking=no root@{{item}} 'subscription-manager unregister'\r\n              ignore_errors: true\r\n              with_lines: cat ./ip.csv \r\n    \r\n            - name: Subscribing the nodes\r\n              shell: |\r\n                ssh -o StrictHostKeyChecking=no root@{{item}} 'subscription-manager register --username= --password='\r\n                ssh -o StrictHostKeyChecking=no root@{{item}} 'subscription-manager attach --auto'\r\n                ssh -o StrictHostKeyChecking=no root@{{item}} 'subscription-manager refresh'\r\n              with_lines: cat ./ip.csv\r\n    \r\n            - name: Getting the pool-id\r\n              shell: ssh -o StrictHostKeyChecking=no root@ 'subscription-manager list --available --matches '*OpenShift*' | grep \"Pool ID\" | awk '\\''NR == 1'\\'' | awk '\\''{print $3}'\\'''\r\n              register: pool_id\r\n    \r\n            - name: Attaching pool to each nodes\r\n              shell: | \r\n                ssh -o StrictHostKeyChecking=no root@{{item}} 'subscription-manager attach --pool='\r\n                ssh -o StrictHostKeyChecking=no root@{{item}} 'subscription-manager repos     --enable=\"rhel-7-server-rpms\"     --enable=\"rhel-7-server-extras-rpms\"     --enable=\"rhel-7-server-ose-3.10-rpms\"     --enable=\"rhel-7-server-ansible-2.4-rpms\"'\r\n              with_lines: cat ./ip.csv\r\n    \r\n            - name: Joining the nodes to the DNS Server\r\n              shell: ssh -o StrictHostKeyChecking=no root@{{item}} 'echo  | realm join --user=Administrator '\r\n              with_lines:  cat ./ip.csv\r\n    \r\n            - name: SSH from master to master using DNS\r\n              shell: ssh -o StrictHostKeyChecking=no root@ 'ssh -o StrictHostKeyChecking=no root@master-. ls'  \r\n    \r\n            - name: SSH from master to compute nodes using DNS\r\n              shell: ssh -o StrictHostKeyChecking=no root@ 'ssh -o StrictHostKeyChecking=no root@node{{item}}-. ls'\r\n              with_items: \r\n                - 1\r\n                - 2\r\n                - 3  \r\n    \r\n            - name: Replacing master ip in inventory\r\n              replace:\r\n                path: ./inventory.yml\r\n                regexp: \"master_ip\"\r\n                replace: \"\"  \r\n    \r\n            - name: Replace compute node ip in inventory\r\n              replace:\r\n                path: ./inventory.yml\r\n                regexp: \"\"\r\n                replace: \"\"\r\n              with_together: \r\n                - [ 'node1_ip', 'node2_ip', 'node3_ip' ]\r\n                - \"\"  \r\n    \r\n            - name: Replacing master DNS in inventory\r\n              replace:\r\n                path: ./inventory.yml\r\n                regexp: \"master_dns\"\r\n                replace: \"master-.\"\r\n    \r\n            - name: Replacing nodes DNS in inventory\r\n              replace:\r\n                path: ./inventory.yml\r\n                regexp: \"\"\r\n                replace: \"\"\r\n              with_together:\r\n                - [ 'node1_dns', 'node2_dns', 'node3_dns' ]\r\n                - [ 'node1-.', 'node2-.', 'node3-.' ]          \r\n    \r\n            - name: Copying inventory into master\r\n              shell: scp -o StrictHostKeyChecking=no inventory.yml root@:/root/openshift-ansible/inventory/\r\n    \r\n            - name: Checking out to release branch-3.10\r\n              shell: ssh -o StrictHostKeyChecking=no root@ 'cd /root/openshift-ansible && git checkout release-3.10'\r\n    \r\n            - name: Running Openshift pre-requisites\r\n              shell: ssh -o StrictHostKeyChecking=no root@ 'ansible-playbook -i /root/openshift-ansible/inventory/inventory.yml /root/openshift-ansible/playbooks/prerequisites.yml -vv'\r\n              \r\n            - name: Deploying openshift cluster\r\n              shell: ssh -o StrictHostKeyChecking=no root@ 'ansible-playbook -i /root/openshift-ansible/inventory/inventory.yml /root/openshift-ansible/playbooks/deploy_cluster.yml -vv'\r\n    \r\n            - name: Disabling selinux on each nodes \r\n              shell: ssh -o StrictHostKeyChecking=no root@{{item}} 'setenforce 0'\r\n              with_lines: cat ./ip.csv  \r\n    \r\n            - name: Copying bash file in master & Executing\r\n              shell: | \r\n                scp -o StrictHostKeyChecking=no post_install_setting.sh root@:/root/ \r\n                ssh -o StrictHostKeyChecking=no root@ 'bash post_install_setting.sh && rm post_install_setting.sh'\r\n\r\n### App deployers\r\n\r\nLitmus job for deploying NuoDB EE using OpenEBS volumes for database requirements.\r\n\r\nPrerequisites for running this litmus job is to have NuoDB Enterprise edition subscription and have docker images available in the cluster.\r\n\r\n[https://raw.githubusercontent.com/openebs/litmus/master/apps/nuodb/deployers/OpenShift/run_litmus_test.yml](https://raw.githubusercontent.com/openebs/litmus/master/apps/nuodb/deployers/OpenShift/run_litmus_test.yml)\r\n\r\n    ---\r\n    apiVersion: batch/v1\r\n    kind: Job\r\n    metadata:\r\n      generateName: litmus-nuodb-\r\n      namespace: litmus\r\n    spec:\r\n      template:\r\n        metadata:\r\n          name: litmus\r\n          labels:\r\n            app: nuodb-deployment\r\n    \r\n        spec:\r\n          serviceAccountName: litmus\r\n          restartPolicy: Never\r\n          containers:\r\n          - name: ansibletest\r\n            image: openebs/ansible-runner:ci\r\n            imagePullPolicy: Always\r\n    \r\n            env:\r\n              - name: ANSIBLE_STDOUT_CALLBACK\r\n                #value: log_plays, actionable, default\r\n                value: default\r\n    \r\n              - name: PROVIDER_STORAGE_CLASS\r\n                # Supported values: openebs-standard, local-storage, openebs-standalone\r\n                value: openebs-cstor-sparse\r\n    \r\n              - name: NUODB_VERSION\r\n                value: ee\r\n    \r\n              - name: APP_PVC\r\n                value: demo-vol-claim\r\n    \r\n              - name: APP_NAMESPACE\r\n                value: nuodbns\r\n    \r\n                # Application label\r\n              - name: APP_LABEL\r\n                value: 'app=nuodb'\r\n    \r\n                # Use 'deprovision' for app-clean up\r\n              - name: ACTION\r\n                value: provision\r\n    \r\n                # Set THP to disable in case platform is AWS or OpenShift\r\n              - name: THP\r\n                value: disable\r\n    \r\n            command: [\"/bin/bash\"]\r\n            args: [\"-c\", \"ansible-playbook ./nuodb/deployers/OpenShift/test.yml -i /etc/ansible/hosts -v; exit 0\"]\r\n\r\n### Chaos jobs — NuoDB\r\n\r\nLitmus job for inducing chaos on NuoDB application components such as Admin, Storage Manager and Transaction Engine.\r\n\r\nFor inducing various components chaos, user has to pass application component specific label as the Job Env to the litmus book.\r\n\r\n[https://raw.githubusercontent.com/openebs/litmus/master/apps/nuodb/chaos/app_pod_failure/run_litmus_test.yml](https://raw.githubusercontent.com/openebs/litmus/master/apps/nuodb/chaos/app_pod_failure/run_litmus_test.yml)\r\n\r\n    ---\r\n    apiVersion: batch/v1\r\n    kind: Job\r\n    metadata:\r\n      generateName: nuodb-app-chaos-\r\n      namespace: litmus\r\n    spec:\r\n      template:\r\n        metadata:\r\n          labels:\r\n            name: nuodb-app-chaos\r\n        spec:\r\n          serviceAccountName: litmus\r\n          restartPolicy: Never\r\n          containers:\r\n          - name: ansibletest\r\n            image: openebs/ansible-runner:ci\r\n            env:\r\n              - name: ANSIBLE_STDOUT_CALLBACK\r\n                value: default\r\n                \r\n              - name: APP_NAMESPACE\r\n                value: nuodbns \r\n                \r\n              - name: APP_LABEL\r\n                value: 'nodetype=sm'\r\n    \r\n              - name: DEPLOY_TYPE\r\n                value: statefulset\r\n    \r\n            command: [\"/bin/bash\"]\r\n            args: [\"-c\", \"ansible-playbook ./nuodb/chaos/app_pod_failure/test.yml -i /etc/ansible/hosts -vv; exit 0\"]\r\n\r\n### Chaos jobs — Networking\r\n\r\nLitmus job for inducing network delays between application and openebs target pod.\r\n\r\n[https://raw.githubusercontent.com/openebs/litmus/master/experiments/chaos/openebs_target_network_delay/run_litmus_test.yml](https://raw.githubusercontent.com/openebs/litmus/master/experiments/chaos/openebs_target_network_delay/run_litmus_test.yml)\r\n\r\n    ---\r\n    apiVersion: batch/v1\r\n    kind: Job\r\n    metadata:\r\n      generateName: nuodb-app-chaos-\r\n      namespace: litmus\r\n    spec:\r\n      template:\r\n        metadata:\r\n          labels:\r\n            name: nuodb-app-chaos\r\n        spec:\r\n          serviceAccountName: litmus\r\n          restartPolicy: Never\r\n          containers:\r\n          - name: ansibletest\r\n            image: openebs/ansible-runner:ci\r\n            env:\r\n              - name: ANSIBLE_STDOUT_CALLBACK\r\n                value: default\r\n    \r\n              - name: APP_NAMESPACE\r\n                value: nuodbns \r\n    \r\n              - name: APP_LABEL\r\n                value: 'nodetype=sm'\r\n    \r\n              - name: DEPLOY_TYPE\r\n                value: statefulset\r\n    \r\n            command: [\"/bin/bash\"]\r\n            args: [\"-c\", \"ansible-playbook ./nuodb/chaos/app_pod_failure/test.yml -i /etc/ansible/hosts -vv; exit 0\"]\r\n\r\n### Chaos jobs — Storage\r\n\r\nLitmus job for inducing OpenEBS cStor storage target kill and verify the application availability.\r\n\r\n    ---\r\n    apiVersion: batch/v1\r\n    kind: Job\r\n    metadata:\r\n      generateName: openebs-target-failure-\r\n      namespace: litmus\r\n    spec:\r\n      template:\r\n        metadata:\r\n          labels:\r\n            name: openebs-target-failure\r\n        spec:\r\n          serviceAccountName: litmus\r\n          restartPolicy: Never\r\n          containers:\r\n          - name: ansibletest\r\n            image: openebs/ansible-runner:ci\r\n            env:\r\n              - name: ANSIBLE_STDOUT_CALLBACK\r\n                #value: log_plays\r\n                #value: actionable\r\n                value: default\r\n    \r\n              - name: APP_NAMESPACE\r\n                value: nuodbns\r\n    \r\n              - name: TARGET_NAMESPACE\r\n                value: openebs\r\n    \r\n              - name: APP_LABEL\r\n                value: 'nodetype=sm'\r\n    \r\n              - name: APP_PVC\r\n                value: archive-sm-0\r\n    \r\n              - name: LIVENESS_APP_LABEL\r\n                value: \"\"\r\n    \r\n              - name: LIVENESS_APP_NAMESPACE\r\n                value: \"\"\r\n    \r\n              - name: DATA_PERSISTENCY\r\n                value: \"\"            \r\n    \r\n                # CHOS_TYPE values :  target-zrepl-kill , target-kill , target-delete \r\n              - name: CHAOS_TYPE\r\n                value: \"target-zrepl-kill\"\r\n                \r\n                # TARGET_CONTAINER values: cstor-volume-mgmt , cstor-istgt\r\n              - name: TARGET_CONTAINER\r\n                value: \"cstor-volume-mgmt\"\r\n    \r\n            command: [\"/bin/bash\"]\r\n            args: [\"-c\", \"ansible-playbook ./percona/chaos/openebs_target_failure/test.yml -i /etc/ansible/hosts -vv; exit 0\"]\r\n\r\nLitmus job for inducing OpenEBS cStor storage pool kill and verify the application availability.\r\n\r\n    ---\r\n    apiVersion: batch/v1\r\n    kind: Job\r\n    metadata:\r\n      generateName: openebs-pool-failure-\r\n      namespace: litmus\r\n    spec:\r\n      template:\r\n        metadata:\r\n          labels:\r\n            name: openebs-pool-failure\r\n        spec:\r\n          serviceAccountName: litmus\r\n          restartPolicy: Never\r\n    \r\n          containers:\r\n          - name: ansibletest\r\n            image: openebs/ansible-runner:ci\r\n            imagePullPolicy: Always\r\n            env:\r\n              - name: ANSIBLE_STDOUT_CALLBACK\r\n                #value: log_plays\r\n                #value: actionable\r\n                value: default\r\n    \r\n              - name: APP_NAMESPACE\r\n                value: nuodbns\r\n    \r\n              - name: APP_LABEL\r\n                value: 'nodetype=sm'\r\n    \r\n              - name: APP_PVC\r\n                value: archive-sm-0\r\n    \r\n              - name: LIVENESS_APP_LABEL\r\n                value: \"\"\r\n    \r\n              - name: LIVENESS_APP_NAMESPACE\r\n                value: \"\"\r\n    \r\n              - name: DATA_PERSISTENCY\r\n                value: \"\"  \r\n    \r\n              - name: CHAOS_TYPE\r\n                value: \"pool-kill\"\r\n    \r\n              - name: CHAOS_ITERATIONS\r\n                value: \"2\" \r\n    \r\n            command: [\"/bin/bash\"]\r\n            args: [\"-c\", \"ansible-playbook ./percona/chaos/openebs_pool_failure/test.yml -i /etc/ansible/hosts -vv; exit 0\"]\r\n\r\n### Chaos jobs — Kubernetes\r\n\r\nLitmus job for inducing kubelet/docker service crash and verify impact on the application running on the node.\r\n\r\nNote: This litmus job is specific to AWS platform.\r\n\r\n    ---\r\n    apiVersion: batch/v1\r\n    kind: Job\r\n    metadata:\r\n      generateName: openebs-app-svc-chaos-\r\n      namespace: litmus \r\n    spec:\r\n      template:\r\n        metadata:\r\n          labels:\r\n            name: openebs-app-svc-chaos\r\n        spec:\r\n          serviceAccountName: litmus\r\n          restartPolicy: Never\r\n    \r\n          #nodeSelector:\r\n          #  kubernetes.io/hostname:\r\n    \r\n          containers:\r\n          - name: ansibletest\r\n            image: openebs/ansible-runner:ci\r\n            imagePullPolicy: Always\r\n            env: \r\n              - name: ANSIBLE_STDOUT_CALLBACK\r\n                #value: log_plays\r\n                #value: actionable\r\n                value: default\r\n    \r\n              - name: OPERATOR_NAMESPACE\r\n                value: openebs\r\n     \r\n              - name: APP_NAMESPACE\r\n                value: nuodbns \r\n    \r\n              - name: APP_LABEL\r\n                value: 'nodetype=sm'\r\n    \r\n              - name: APP_PVC\r\n                value: archive-sm-0\r\n    \r\n              # Set value to kubelet/docker \r\n              - name: SVC_CHAOS\r\n                value: docker\r\n    \r\n              - name: CHAOS_DURATION\r\n                value: \"300\" # in seconds\r\n    \r\n              - name: LIVENESS_APP_LABEL\r\n                value: \"\"\r\n    \r\n              - name: LIVENESS_APP_NAMESPACE\r\n                value: \"\"\r\n    \r\n              - name: PLATFORM\r\n                value: \"AWS\"\r\n    \r\n            command: [\"/bin/bash\"]\r\n            args: [\"-c\", \"ansible-playbook ./percona/chaos/openebs_app_svc_chaos/test.yml -i /etc/ansible/hosts -vv; exit 0\"]\r\n","slug":"using-chaos-engineering-to-harden-applications-that-use-nuodb-openebs"},{"id":38,"title":"OpenEBS community releases v1.1, maintaining a faster release cadence.\r","author":"Kiran Mova\r","author_info":"Contributor and Maintainer OpenEBS projects. Chief Architect MayaData. Kiran leads overall architecture & is responsible for architecting, solution design & customer adoption of OpenEBS.\r","date":"08-08-2019\r","tags":["Kubernetes"," Microservices"," OpenEBS"," Persistent Volume"," Stateful Workloads"],"excerpt":"In this blog, I will provide a quick summary of the changes that were released as part of OpenEBS version 1.1 and also share some thoughts on the evolving project management process in OpenEBS and how it is helping to maintain a faster release cadence.\r","content":"\r\nIn this blog, I will provide a quick summary of the changes that were released as part of OpenEBS version 1.1 and also share some thoughts on the evolving project management process in OpenEBS and how it is helping to maintain a faster release cadence.\r\n\r\nOpenEBS Release 1.1 has been about fixing and documenting the cross-platform usability issues reported by users and also laying the foundation for some of the long-overdue backlogs like CSI Driver, automated upgrades, day 2 operations, and others.\r\n\r\nBefore we get into the specifics of the current release, the last three OpenEBS releases have set an interesting precedent towards attaining a *monthly release cadence*.\r\n\r\nOpenEBS was built by adopting the cloud-native and microservices principles, and it is almost only natural to also reap the benefits of true DevOps product with faster releases. It is easier said than done though! After having experimented with several tools and having looked at various open-source projects including Kubernetes, we have arrived at the following process, which is helping us maintain release cadence and thereby being responsive to the user requirements.\r\n\r\n- Responsiveness — Almost all the active contributors and maintainers of the OpenEBS project are reachable and online in the OpenEBS Community Slack. OpenEBS has been credited as being one of the most responsive CNCF community projects — and thanks to the community, OpenEBS Developers are getting feedback directly from end-users. This eliminates layers of requirements for implementation and improves the feedback loop.\r\n- Clarity of criteria for alpha and beta — Recently we clarified that our release gates are defined by OpenEBS Litmus based GitLab pipelines that run end-to-end tests on multiple different platforms and stateful workloads. Perhaps goes without saying — however we use these pipelines to catch any regressions. What is more — a feature is marked as Beta only after it has been added to the test pipelines. For example, LocalPV as of OpenEBS 1.1 is now Beta because it is passing these tests — and also is seeing a lot of production usage as well.\r\n- Backlog grooming — At the start of the release, we look at the backlogs which are on [GitHub](https://github.com/openebs/openebs/issues). Items are selected based on contributor availability and balancing the development of new features, fixing existing features, updating and improving documentation, improving e2e coverage, and hardening the usage of OpenEBS on new platforms. As an example of a new platform, we have seen quite a bit of usage of especially the low footprint Jiva on ARM and are now releasing container images for built for the ARM64 architecture, making OpenEBS operational on RPi4 as well as Amazon A1 instances or Packet’s powerful ARM Compute servers. As another example, we are hardening the use of OpenEBS for Konvoy from our friends at Day2IQ — and shortly we will see Konvoy on OpenEBS.ci. As reminder OpenEBS.ci is a public way for showing that all commits to OpenEBS master are tested against a set of workloads and platforms. OpenEBS also now appears in the [OpenShift Operator Hub](https://github.com/openebs/helm-operator/blob/master/olm/README.md) and on the [AWS Marketplace](https://aws.amazon.com/marketplace/pp/MayaData-OpenEBS-Cloud-Native-Storage/B07TFS9Q8D) as well\r\n- Tracking items — The list of selected items is tracked for the current release using these [Google Sheets](https://docs.google.com/spreadsheets/d/1bbphUqbxShBhgr1VHaEQUzIGMaJJacPNKc1ckNXU1QE/). It is not fancy, but it helps to get all the collaborators together and very easily provides a no-barrier objective follow-up — between release manager, leads, and reviewers. The format of the sheet is a modified version of what is used by Kubernetes sig-storage.\r\n- Role of core committers — As core contributors, our responsibility is to detail the design and to list the implementation tasks — including covering the integration and upgrade tests. Each granular task is updated in the above project sheet and then we ask for help from the community to fix some of these items. The designs themselves are discussed and maintained as GitHub PRs [here](https://github.com/openebs/openebs/tree/master/contribute/design).\r\n- Role of RC1 and RC2 — functionality must be checked into master before RC1 builds are started. Post RC1 it is mostly about corner cases, integration and upgrade tests. Only those features that can complete the upgrade testing within the RC2 timelines are considered for the current release.\r\n- Role of release manager — Conducts follow-ups via daily standups on pending items and mitigating the risks by seeking additional help or by pushing the feature out of the release.\r\n- The final two weeks — As we reach the end of a one month release cycle the focus turns to refactoring and adding more test cases while stabilizing the features rather than introducing new features. The last two weeks are also about polishing documentation and trying to reach out to users whose requests have been incorporated into the product to get some early feedback.\r\n- What else? I haven’t spoken about the role of beta tests or dogfooding of the releases by using OpenEBS in our own hosted services such as OpenEBS director. Perhaps I’ll dig into these in a future blog. Bookkeeping tasks that start after the release also take a lot of time. For example, OpenEBS can be deployed via different partner platforms, each of which maintains their repositories for their Helm charts. Each of these partners are evolving with new guidelines for check-ins and they tend to go at their own pace. There is definitely room for improvement here and hopefully, the way the kubernetes apps are delivered will be standardized so that such bookkeeping tasks can be reduced.\r\n\r\n*How do you run your Open Source projects? What tools do you use to improve productivity? Please drop in a comment. Would love to hear from you and improve the care and feeding of the OpenEBS community.*\r\n\r\nGetting back to OpenEBS 1.1. The major features, enhancements and bug fixes in this release include:\r\n\r\n- Upgrades! Support for the upgrade of OpenEBS storage pools and volumes through Kubernetes Job. As a user, you no longer have to download scripts to upgrade. The procedure to upgrade via Kubernetes Job is provided [here](https://github.com/openebs/openebs/tree/master/k8s/upgrades/1.0.0-1.1.0). Kubernetes Job-based upgrade is a step towards completely automating the upgrades in the upcoming releases. Would love to hear your feedback on the [proposed design](https://github.com/openebs/openebs/tree/master/contribute/design/1.x/upgrade). Note: Upgrade job makes use of a new container image called quay.io/openebs/m-upgrade:1.1.0.\r\n- CSI — The CSI driver reached Alpha with initial functionality for provisioning and de-provisioning of cStor volumes. Once you have OpenEBS 1.1 installed, take the CSI driver for a spin on your development clusters using the instructions provided [here](https://github.com/openebs/csi). The addition of the CSI driver also requires a shift in the paradigm of how the configuration of the storage class parameters should be passed on to the drivers. We want to keep this seamless, please let us know if you have any inputs on what you notice as some of the nice to have as we shift towards the [CSI driver](https://github.com/openebs/openebs/tree/master/contribute/design/1.x/csi).\r\n- Day 2 automation ongoing — There is a tremendous amount of work ongoing to further automate Day 2 operations of the cStor storage engine. Most of these changes did not make the current release because the nature of schema changes were larger than could be taken within the current release cycle. The feature is under active development and if you are interested in providing feedback on how this feature is shaping up, you can find the proposed design [here](https://github.com/openebs/openebs/pull/2595). Thank you to everyone that has already chipped in with ideas and feedback.\r\n\r\nPerhaps the greatest highlight of this release is an increased involvement from OpenEBS user community pitching in with GitHub Issues as well as providing contributions.\r\n\r\n![Giacomo Longo Message](https://cdn-images-1.medium.com/max/800/1*hZ7FK18EK2_PfjdCJB2OTQ.png)\r\n\r\nHere are some issues that were raised and fixed within the current release.\r\n\r\n- Fixed an issue where backup and restore of cStor volume using OpenEBS velero-plugin was failing when OpenEBS was installed through Helm. [@gridworkz](https://github.com/gridworkz)\r\n- Fixed an issue with NDM where the kubernetes.io/hostname for Block Devices on AWS Instances was being set as the nodeName. This was resulting in cStor Pools not being scheduled to the node as there was a mismatch between hostname and nodename in AWS instances. [@obeyler](https://github.com/obeyler)\r\n- Fixed an issue where NDM was seen to crash intermittently on nodes where NVMe devices are attached. There was an issue in the handling of NVMe devices with write cache supported resulting in a segfault. [Private User]\r\n- Added support to disable the generation of default storage configuration like StorageClasses, in case the administrators would like to run a customized OpenEBS configuration. [@nike38rus](https://github.com/nike38rus)\r\n- Fixed an issue where the cStor Target would fail to start when the NDM sparse path is customized. [@obeyler](https://github.com/obeyler)\r\n- Fixed a regression that was introduced into the cStor Sparse Pool that would cause the entire Volume Replica to be recreated upon the restart of a cStor Sparse Pool. The fix was to make sure the data is rebuilt from the peer Sparse pools instead of recreating. Test cases have been added to the e2e pipeline to catch this behavior with Sparse Pools. Note that this doesn’t impact the cStor Pools created on Block Devices. [@vishnuitta](https://github.com/vishnuitta)\r\n- For Jiva Volumes, created a utility that can clear the internal snapshots created during replica restart and rebuild. For long-running volumes that have gone through multiple restarts, the number of internal snapshots can hit the maximum supported value of 255, after which the Replica will fail to start. The utility to check and clear the snapshots is available [here](https://github.com/openebs/openebs/tree/master/k8s/jiva). [@rgembalik](https://github.com/rgembalik)[@amarshaw](https://github.com/amarshaw)\r\n- Enhanced velero-plugin to allow users to specify a backupPathPrefix for storing the volume snapshots in a custom location. This allows users to save/backup configuration and volume snapshot data under the same location rather than saving the configuration and data in different locations. [@amarshaw](https://github.com/amarshaw)\r\n\r\n***For detailed change summary, steps to upgrade from a previous version, or to get started with v1.1 please refer to:*** [***Release 1.1 Change Summary***](https://github.com/openebs/openebs/releases/tag/1.1.0)\r\n\r\nIn short, OpenEBS 1.1 shows that OpenEBS development is marching ahead faster and faster and delivering more and more features, fixes and platforms.\r\n\r\nAs always if you have any feedback or inputs regarding the OpenEBS project or project management — please reach out to me on [Slack](https://slack.openebs.io) or [GitHub](https://github.com/openebs/openebs/) or via comments here.\r\n\r\n\r\n\r\n    Example yaml file:\r\n\r\n        ---\r\n        apiVersion: openebs.io/v1alpha1\r\n        kind: StoragePool\r\n        metadata:\r\n        name: default\r\n        type: hostdir\r\n        spec:\r\n        path: \"/mnt/disks/ssd0\"\r\n        ---","slug":"openebs-community-releases-v11-maintaining-a-faster-release-cadence"},{"id":39,"title":"OpenEBS Project Update and whats coming in v1.0\r","author":"Kiran Mova\r","author_info":"Contributor and Maintainer OpenEBS projects. Chief Architect MayaData. Kiran leads overall architecture & is responsible for architecting, solution design & customer adoption of OpenEBS.\r","date":"16-05-2019\r","tags":["Cncf"," Containerattachedstorage"," Storage"," Kubernetes"," OpenEBS"],"excerpt":"My heartfelt gratitude to hundreds of contributors and thousands of users and friends of OpenEBS who have contributed to OpenEBS becoming a CNCF Sandbox Project.\r","content":"\r\nMy heartfelt gratitude to hundreds of contributors and thousands of users and friends of OpenEBS who have contributed to OpenEBS becoming a CNCF Sandbox Project.\r\n\r\nFor those of you who have just heard of OpenEBS or are curious about the current state of OpenEBS, I put together this quick blog that *Looks back to where we started and how far we have come*. (I am pretty sure the GOT fans will get this reference). I then talk about the current release 0.9 and what is to come in 1.0.\r\n\r\nThe OpenEBS vision has been pretty clear since the start: provide an Open Source Storage Solution that enables Enterprises and Solution Architects to reap the Agility benefits promised by Container Native Architectures. We decided a few years ago that delivering data agility could best be done by using the tools that deliver agility in development and operations already — cloud native architectures, including containers and Kubernetes. Specifically we decided to move Stateful Workloads and the logic that delivers storage services to protect and manage them into a microservices based architecture deployed via containers. We also set out to enable agility by fighting the lock-in of data into vendor and cloud specific storage silos that lock users into specialized systems and services that themselves require special skills to run and scale.\r\n\r\nOver the last couple of years the notion of containerizing stateful workloads and managing them via Kubernetes has become increasingly accepted. We now see a great breadth of deployments of different workloads on different flavors of Kubernetes — you can read more about how the pattern of cloud native or what we call Container Attached Storage is being adopted on the CNCF blog we helped author here: [A Year Later — Updating Container Attached Storage](https://www.cncf.io/blog/2019/05/16/a-year-later-updating-container-attached-storage/).\r\n\r\n*Quick point that you may have already gathered: OpenEBS is completely Kubernetes native and if you know how to manage your applications in Kubernetes, you already know how to use OpenEBS.*\r\n\r\nSo, OpenEBS started out to build a Storage Solution that has:\r\n\r\n- *Stable Date Engines*, can be run on any underlying Kubernetes Platform. And it has got to be multiple storage engines, so administrators can compose or pick the right one for the right workload. For instance, an OpenEBS PV for Mongo can be using a completely different data engine compared to a PV for PostgreSQL or Jenkins.\r\n- *Standard Specs* to manage the Data Engines, so that administrators can use the existing Kubernetes tooling infrastructure to manage storage as well. Kubernetes Custom Resources and operators are used to manage everything with regards to OpenEBS.\r\n- *Security* controls that enable running on platforms like OpenShift, SuSE CAAS or in Kubernetes Clusters with strict Pod Security Policy.\r\n- *Scalable* architecture that can deliver the required performance to the Application, without adding much of an overhead over the underlying storage medium.\r\n\r\nAnd above all, it has to be ***simple and easy to use.***\r\n\r\nIt feels great for OpenEBS to be approaching 1.0!! We are extremely humbled at the amount of love in terms of both support and scrutiny that we have received over the last couple of years as we went through with building each block by block completely in the Open Source. OpenEBS has clearly established itself as the most simple to use and cost effective storage solution that is available out there to use with Kubernetes — and yet we know there is much more to do, especially as there seems to be a risk of higher level commands such as those covering data mobility being pulled back from Kubernetes into their own systems by proprietary vendors. More on that in a later blog and/or set of GitHub issues :) .\r\n\r\nIn the following sections, I go through in a bit more detail the current state of the main aspects of OpenEBS — Stability, Standard Spec (aka Storage Policies), Security Controls and Scalable architecture; followed by a quick summary of the current release (0.9) and what we are working on currently for v1.0.\r\n\r\n**Data Engines:** The data engines are the containers responsible for interfacing with the underlying storage devices or cloud volumes such as host filesystem, rotational drives, SSDs and NVMe devices. The data engines provide volumes with required capabilities like high availability, snapshots, clones, etc. Depending on the capabilities required, users can select the right data engine like cStor ( a CoW based) or Jiva or even Local PVs for a given volume.\r\n\r\nWe define a data engine as stable if it meets the following criteria:\r\n\r\n- Resilient against node, network or storage device errors. No data loss!\r\n- Ease of management ( including Day 2 Operations).\r\n- Users are running the data engine in production for more than 6 months and have gone through two or more OpenEBS version upgrades.\r\n\r\nThe current state of the 3 data engines supported by OpenEBS are as follows:\r\n\r\n- **Jiva (stable)** — The first and basic data engine that was supported by OpenEBS and has been deployed the longest in production by users. We have fixed several issues that came up with regards to cluster upgrades, node migrations, storage expansion and so forth. Ideal for cases where only replication of data is required. For backup and restore, Velero/Restic is used. Very easy to use, lightweight.\r\n- **cStor (beta)** — The most feature rich data engine that has the support for extremely efficient snapshots and clones. Highly recommended for cases where the nodes have storage devices attached. The current release contains Velero OpenEBS plugins that help with optimizing the backup/restore process. While already used in production by some of our users, we consider this as beta — until all day 2 operations are easily performed.\r\n- **OpenEBS Local PV (alpha)** — An extension to Kubernetes Local PV, with the plan to ease the management of disks by using the OpenEBS Node Storage Device Manager (NDM). The current OpenEBS 0.9 release contains the initial version of the OpenEBS Local PV Dynamic Provisioner. While we have tested OpenEBS Local PV extensively however per the criteria above it remains alpha as the newest engine. From an IO engine perspective, it is as stable as it can get. :-)\r\n\r\nAdditional details and how each of the Data engines operate are provided in this [Presentation](https://docs.google.com/presentation/d/1mjOkAQppyd23sw7PIryxu5kSrex352bT6bINzw6mUFY/edit?usp=sharing)\r\n\r\n![OpenEBS cStor Volume](/images/blog/cas-example-openebs-cstor-volume.png)\r\n\r\n**Standard Specifications or API:** Standardization is achieved by architecting OpenEBS as a set of microservices using Kubernetes Custom Resources and Operator patterns. The same set of tooling used to manage the applications — like Helm, Prometheus, and Grafana — can also be used to manage OpenEBS itself. The configuration of OpenEBS is completely controlled via YAMLs (Custom Resources) and volumes are provisioned via the Kubernetes Dynamic Provisioners, Storage Classes and Persistent Volume Claims.\r\n\r\nThe components of OpenEBS that act on the user requests (via CRs) and generate / launch the Kubernetes Objects — like Deployments, Services and Persistent Volumes are collectively called as the *Storage Management or Control Plane*. The interactions to the Storage Management Plane can achieved via `kubectl`.\r\n\r\nThe administrators can customize the OpenEBS parameters by modifying the YAMLs. Some of the configuration that are possible are:\r\n\r\n- Setting up Taints and Tolerations to decide the nodes where the Storage Pods need to be deployed.\r\n- Setting up the Node Selectors or Anti-Affinity parameters to select the correct nodes for launching the Volume (Data Engine) pods.\r\n\r\nFor further details check: [https://docs.openebs.io](https://docs.openebs.io/?__hstc=216392137.f0da50a3ce0cf28f99a3c60d1f6006cf.1580117750726.1580117750726.1580117750726.1&amp;__hssc=216392137.1.1580117750727&amp;__hsfp=3765904294).\r\n\r\nAnother cool feature that has become a favorite of advanced OpenEBS users is that, as Kubernetes introduces new features that have to be passed on to the Dynamically generated Volume (Data Engine) Pods, users can directly patch the pods and also update the Volume Template YAMLs at run time. To learn more about this feature, hit us up on slack: [https://slack.openebs.io](https://slack.openebs.io/?__hstc=216392137.f0da50a3ce0cf28f99a3c60d1f6006cf.1580117750726.1580117750726.1580117750726.1&amp;__hssc=216392137.1.1580117750727&amp;__hsfp=3765904294)\r\n\r\nIn this regard, as we move towards 1.0, we would like to improve the documentation and governance around maintaining multiple versions of the API.\r\n\r\n**Security Controls:** Storage is a cluster add-on service. It needs to access the storage devices — either as hostpath or as block devices that are attached to the nodes. Since OpenEBS is completely Kubernetes native, access rights and privileges required by the individual components are completely transparent and can be controlled by the RBAC configuration by Kubernetes Cluster Administrators. One of the interesting feedback we received as Enterprises started to adopt OpenEBS was that — the IT Teams want to retain the control on the storage and shield the specifics of the node details or scheduling details from application developers.\r\n\r\nOpenEBS can now be configured easily to run in:\r\n\r\n- Security Enhanced Linux Platforms (selinux=on) like RHEL, CentOS or OpenShift. We talk in more detail about this [here](https://blog.openebs.io/configuring-openebs-to-run-with-security-enhanced-linux-1e5a90a91da2?__hstc=216392137.f0da50a3ce0cf28f99a3c60d1f6006cf.1580117750726.1580117750726.1580117750726.1&amp;__hssc=216392137.1.1580117750727&amp;__hsfp=3765904294).\r\n- OpenEBS can be used on clusters where the default setting is to not grant access to the hostpaths for Developer namespaces. To support this use case, we now support an option to run the Jiva Volumes Pods (that require access to hostpath) to be deployed in OpenEBS Namespace using a *StoragePolicy**—**DeployInOpenEBSNamespace*. The StoragePolicies in OpenEBS are configured via StorageClasses.\r\n- OpenEBS can be used on clusters enabled with Pod Security Policies. The PSP for OpenEBS has been contributed by a user and can be found [here](https://github.com/openebs/openebs-docs/issues/484).\r\n\r\n**Scale and Performance:** OpenEBS is architected to horizontally scalable with nodes — Persistent Volumes spreading out pretty evenly across the nodes or a subset of nodes designated for Storage. However the data of any given Persistent Volume is always fixed to a specific set of nodes, eliminating the need for expensive metadata lookups to find the data blocks as the number nodes get higher. What I like even better is, that the replica tells the controller that it has the data effectively inversing the responsibility from volume target/controller having to know where data is located to replicas telling I have the data.\r\n\r\nAnother aspect of OpenEBS Volumes when it comes to performance is that each Volume is completely isolated and doesn’t get impacted by work/load on other Volumes. For example, a node rebuild will not degrade ALL volumes in the cluster.\r\n\r\nAs OpenEBS is completely developed in user space and run as Kubernetes Pods, administrators get complete control on the resources like CPU/RAM that should be allocated to Storage. There won’t be cases of kernels hogging all the resources. Administrators also can tune for example the number of threads allocated and parallel IOs supported per Volume — tuning will have an impact depending on the type of workloads (Sequential / Random).\r\n\r\nOf course, then we have workloads that require low latency, and need to work to be deployed on nodes with limited storage available, for example a couple of NVMe devices. OpenEBS Local PVs provide the functionality to make use of the Local Storage and help with dynamic provisioning of Local PVs. OpenEBS Local PVs offer an excellent choice for cases like NuoDB where replication is inherently taken by NuoDB itself and the expectation is only to get a persistent storage with node affinity configured for the storage pods. A default storage class called — `openebs-hostpath` is available in the current release. Check it out and let us know what you think.\r\n\r\nWe are seeing OpenEBS users progress from running CI/CD workloads in staging to now running critical databases in production on OpenEBS Volumes. If you are interested in performance, we have a OpenEBS user currently exploring and sharing the benchmarking numbers on several different platforms. Join the discussion on our slack — [https://slack.openebs.io](https://slack.openebs.io/?__hstc=216392137.f0da50a3ce0cf28f99a3c60d1f6006cf.1580117750726.1580117750726.1580117750726.1&amp;__hssc=216392137.1.1580117750727&amp;__hsfp=3765904294).\r\n\r\n— -\r\n\r\nWhile I covered earlier some of the items introduced recently in [0.9](https://github.com/openebs/openebs/releases), here is a summary of some significant changes:\r\n\r\n- Introduction of Dynamically provisioned OpenEBS Local PVs for making use of the storage available on the nodes itself for running NewSQL kind workloads. Refer to this [blog](https://blog.openebs.io/preview-dynamic-provisioning-of-kubernetes-local-pvs-using-openebs-a530c25cf13d?__hstc=216392137.f0da50a3ce0cf28f99a3c60d1f6006cf.1580117750726.1580117750726.1580117750726.1&amp;__hssc=216392137.1.1580117750727&amp;__hsfp=3765904294) to get started with OpenEBS Local PVs.\r\n- Enhanced the cStor Replica distribution logic for MongoDB or Cassandra Statefulsets to provide storage high availability and reducing the performance overhead\r\n- Backup and Restore processes for cStor Volumes using [OpenEBS Velero Plugin](https://github.com/openebs/velero-plugin) that can perform incremental snapshot backup and restore.\r\n- Enhance the Deployment and Placement of the Jiva Volume Pods to facilitate working in environments with strict Pod Security Policies and for Kubernetes clusters that tend to see a lot of pod evictions or node drains.\r\n- Introduced Web Admission Hook that will help with validation and avoiding misconfigurations.\r\n- Developed an upgrade framework using the CAS Templates that will help developing operator based upgrades from earlier releases to the current release. We are excited to use this framework for upgrading from 0.8.2 to 0.9\r\n- Enhanced the Prometheus exporters to support generating cStor Volume Replica metrics.\r\n- As always many other user reported issues made into this release. To learn more checkout the [release notes](https://github.com/openebs/openebs/releases).\r\n\r\nEach OpenEBS release goes through Litmus — GitLab Pipelines that verify new functionality, backward compatibility and also acceptance from users through pre-release build testing. Please reach out to us if you would like to be included in the pre-release notifications.\r\n\r\nI am very excited about the following active contributions that are filling in the gaps for 1.0\r\n\r\n- BDD tests that developers can execute as part of the feature development. This is an extension to the Sanity tests are executed in Travis CI and Litmus Tests in GitLab CI.\r\n- Updating the Design, Contributor and Governance related details with the help of CNCF guidelines.\r\n- Freezing on the cStor Specs based on the feedback received from users on how to make it more user friendly and easy to manage. The NDM Disk Specification has also changed to BlockDevice spec as per the feedback received in making it generic to Storage Devices.\r\n- Additional enhancements automatic the cStor Day 2 operations with regards to scaling up the capacity of cStor Pool by increasing the size of the underlying disks, scaling up and down the number of cStor Pools in a given cluster.\r\n- Support for integrating the OpenEBS Local PV into the BlockDevices discovered and managed by NDM.\r\n- Support for ARM builds.\r\n\r\nFor contributing to the above feature or learning more about them, you can reach out to us on the #contributors channel or check out the [milestones](https://github.com/openebs/openebs/milestones).\r\n\r\nI am very excited to be at KubeCon Europe and to meet in person some of the hundreds of contributors and many thousands of users of OpenEBS who have all made it possible for OpenEBS to be recently accepted as a CNCF Sandbox Project. Thank you Again!\r\n\r\nMayaData will be speaking about OpenEBS at the KubeCon events in Barcelona in the Cloud Native Storage Day and Open Data Autonomy Mini Summit on May 20th, and also at booth SE41 until Thursday in KubeCon Expo Hall.\r\n","slug":"openebs-project-update-and-whats-coming-in-v10"},{"id":40,"title":"Configuring OpenEBS to run with Security-Enhanced Linux\r","author":"Akhil Mohan\r","author_info":"Software Engineer @ MayaData, working on Cloud Native Tech.\r","date":"10-05-2019\r","tags":["Centos"," Kubernetes"," OpenEBS"," Selinux"," Uncategorized"," Openshift"," Tutorials"],"excerpt":"In this short How-To blog, I will walk you through the steps for running OpenEBS with Security Enhanced Linux (SELinux=on).\r","content":"\r\nIn this short How-To blog, I will walk you through the steps for running OpenEBS with Security Enhanced Linux (SELinux=on). This applies to both OpenShift based Kubernetes Cluster or Clusters using CentOS.\r\n\r\nOpenEBS can be treated as a Cluster Add-on service, that can convert the existing Kubernetes Cluster into a full fledged Storage Controllers — that can serve Persistent Volumes to Stateful Workloads while making use of the storage attached to the nodes. Since OpenEBS runs in containers and has to access the underlying storage devices, it needs to run in Privileged mode.\r\n\r\nThe component of OpenEBS ( Node Device Manager or Node Disk Manager or simply referred as NDM), is responsible for discovery of the devices and filtering out devices that should not be used by OpenEBS; for example the disk that has OS filesystem. Earlier, to detect the OS disk, the NDM pod by default mounted the `/proc/1/mounts` file, which is restricted on nodes that have SELinux=on. This is now fixed by mounting the `/proc` directory of the host inside the container and then loading the `mounts` file.\r\n\r\nSo at a high level, to allow OpenEBS to run in privileged mode in SELinux=on nodes, the cluster should be configured to grant privileged access to OpenEBS service account.\r\n\r\nHere are the steps I have followed:\r\n\r\n****Step 1: Setup appropriate security context for OpenEBS****\r\n\r\n**On OpenShift Clusters:** Select the right SCC for OpenEBS\r\n\r\nOpenEBS like other cluster add-on services requires its pods to be executed with privileged access as it needs to directly access the block devices. However, this will not mean that SELinux should be turned off.\r\n\r\nWhile running on OpenShift, we need to be aware of the security constraints available and to select the right security constraint for OpenEBS. There are 7 SCCs available.\r\n\r\n![Security Context Constraints (SCC) in OpenShift](/images/blog/security-context-constraints-(SCC)-OpenShift.png)\r\n\r\nTo have OpenEBS pods running in privileged mode, add the OpenEBS service account (openebs-maya-operator) to use the privileged SCC; OpenShift will take care of setting the correct permissions (or SELinux labels) to make the container run in privileged mode. Sample commands to do this:\r\n\r\n    oc adm policy add-scc-to-user privileged system:serviceaccount:openebs:openebs-maya-operator\r\n\r\n**On CentOS/RHEL:** Enable Pod Security Policies for OpenEBS\r\n\r\nCreate a file `openebs-privileged-psp.yaml` with the below spec.\r\n\r\n    apiVersion: extensions/v1beta1\r\n    kind: PodSecurityPolicy\r\n    metadata:\r\n      name: openebs-privileged\r\n      annotations:\r\n        seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'\r\n    spec:\r\n      privileged: true\r\n      allowPrivilegeEscalation: true\r\n      allowedCapabilities:\r\n      - '*'\r\n      volumes:\r\n      - '*'\r\n      hostNetwork: true\r\n      hostPorts:\r\n      - min: 0\r\n        max: 65535\r\n      hostIPC: true\r\n      hostPID: true\r\n      runAsUser:\r\n        rule: 'RunAsAny'\r\n      seLinux:\r\n        rule: 'RunAsAny'\r\n      supplementalGroups:\r\n        rule: 'RunAsAny'\r\n      fsGroup:\r\n        rule: 'RunAsAny'\r\n\r\nThen apply the YAML file\r\n\r\n    kubectl apply -f openebs-privileged-psp.yaml\r\n\r\n****Step 2: Install OpenEBS****\r\n\r\nDownload the latest version of `openebs-operator.yaml` file.\r\n\r\n    wget https://openebs.github.io/charts/openebs-operator-0.8.2.yaml\r\n\r\n**On CentOS/RHEL:** An extra step of adding PSP to the Cluster Role is required.\r\n\r\nEdit the ClusterRole in the YAML to add `openebs-privileged` PSP\r\n\r\n    # Define Role that allows operations on K8s pods/deployments\r\n    kind: ClusterRole\r\n    apiVersion: rbac.authorization.k8s.io/v1beta1\r\n    metadata:\r\n      name: openebs-maya-operator\r\n    rules:\r\n    - apiGroups: [\"*\"]\r\n      resources: [\"nodes\", \"nodes/proxy\"]\r\n      verbs: [\"*\"]\r\n    - apiGroups: [\"*\"]\r\n      resources: [\"namespaces\", \"services\", \"pods\", \"deployments\", \"events\", \"endpoints\", \"configmaps\", \"jobs\"]\r\n      verbs: [\"*\"]\r\n    - apiGroups: [\"*\"]\r\n      resources: [\"storageclasses\", \"persistentvolumeclaims\", \"persistentvolumes\"]\r\n      verbs: [\"*\"]\r\n    - apiGroups: [\"volumesnapshot.external-storage.k8s.io\"]\r\n      resources: [\"volumesnapshots\", \"volumesnapshotdatas\"]\r\n      verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\r\n    - apiGroups: [\"apiextensions.k8s.io\"]\r\n      resources: [\"customresourcedefinitions\"]\r\n      verbs: [ \"get\", \"list\", \"create\", \"update\", \"delete\"]\r\n    - apiGroups: [\"*\"]\r\n      resources: [ \"disks\"]\r\n      verbs: [\"*\" ]\r\n    - apiGroups: [\"*\"]\r\n      resources: [ \"storagepoolclaims\", \"storagepools\"]\r\n      verbs: [\"*\" ]\r\n    - apiGroups: [\"*\"]\r\n      resources: [ \"castemplates\", \"runtasks\"]\r\n      verbs: [\"*\" ]\r\n    - apiGroups: [\"*\"]\r\n      resources: [ \"cstorpools\", \"cstorvolumereplicas\", \"cstorvolumes\"]\r\n      verbs: [\"*\" ]\r\n    - apiGroups: ['extensions']\r\n      resources: ['podsecuritypolicies']\r\n      verbs:     ['use']\r\n      resourceNames:\r\n      - openebs-privileged\r\n    - nonResourceURLs: [\"/metrics\"]\r\n      verbs: [\"get\"]\r\n\r\nInstall OpenEBS\r\n\r\n    kubectl apply -f openebs-operator-0.8.2.yaml\r\n\r\n**Note: If you are using helm to install openebs, you will need to apply the above change after it has been installed. In a future release of the helm chart, I will work on making this configurable parameter.**\r\n\r\n****Step 3: (Optional) Create a new cStor Pool.****\r\n\r\nYou can skip this step if using the default cStor Sparse pool.\r\n\r\n****Step 3a****: Verify all pods are working and cStor Pools are running\r\n\r\n![List of all pods in openebs namespace after installation](/images/blog/pod-lists.png)\r\n\r\n****Step 3b****: Verify that disks available on the nodes are discovered.\r\n\r\n    kubectl get disks\r\n\r\n\r\n![Disks detected by NDM, along with sparse disks](/images/blog/ndm-detected-disks.png)\r\n\r\n****Step 3c****: Create a storage pool claim using the instructions at [https://docs.openebs.io/docs/next/configurepools.html](https://docs.openebs.io/docs/next/configurepools.html)\r\n\r\nCreate a `cstor-pool-config.yaml` as mentioned in the docs.\r\n\r\n    apiVersion: openebs.io/v1alpha1\r\n    kind: StoragePoolClaim\r\n    metadata:\r\n      name: cstor-pool1\r\n      annotations:\r\n        cas.openebs.io/config: |\r\n          - name: PoolResourceRequests\r\n            value: |-\r\n                memory: 1Gi\r\n          - name: PoolResourceLimits\r\n            value: |-\r\n                memory: 2Gi\r\n    spec:\r\n      name: cstor-pool1\r\n      type: disk\r\n      maxPools: 3\r\n      poolSpec:\r\n        poolType: striped\r\n      disks:\r\n        diskList:\r\n        - disk-301722dba60542a05ec2817773ff11ed\r\n        - disk-a2d99f96090f0675b7ea60925b58414d\r\n        - disk-cd01d33213c3a42c6b1a9f0798277368\r\n\r\nApply this file `kubectl apply -f cstor-pool-config.yaml`\r\n\r\n![3 cStor pool pods will be running](/images/blog/cstor-pool.png)\r\n\r\n****Step 3d****: Create a new storage class using SPC as `cstor-pool1` or edit the default storage class to use the newly created SPC. I have edited the already available default storage class.\r\n\r\n****Step 4: Running Percona Application****\r\n\r\n    wget https://raw.githubusercontent.com/openebs/openebs/master/k8s/demo/percona/percona-openebs-cstor-sparse-deployment.yaml\r\n\r\nEdit the file to remove security context from the percona deployment.\r\n\r\nApply the yaml file\r\n\r\n    kubectl apply -f percona-openebs-cstor-sparse-deployment.yaml\r\n\r\n\r\n![The percona cstor pod up and running in default namespace](/images/blog/percona-pod.png)\r\n\r\nThe `percona-cstor` pod will be up and running.\r\n\r\nThanks for reading my blog! We continue to look for feedback and suggestions on how we can improve OpenEBS integration with all possible platforms and workloads. If you have any feedback on my blog or see any area of improvement with OpenEBS in general, please provide feedback below or find us on Twitter or on the OpenEBS slack community [http://slack.openebs.io](http://slack.openebs.io/).\r\n","slug":"configuring-openebs-to-run-with-securityenhanced-linux"},{"id":41,"title":"How to Easily Build a CI Dashboard\r","author":"Chandan Kumar\r","author_info":"Software Engineer at MayaData Inc\r","date":"26-04-2019\r","tags":["CI Dashboard"," Git"," Kubernetes"," Pipeline"," GitLab"],"excerpt":"In this tutorial, we’ll go through all the necessary steps for setting up the CI dashboard\r","content":"\r\nA code that is never executed for users is essentially a digital waste product. To prevent this building of waste and to showcase the results of code on the Kubernetes environment, we can use the CI Dashboard, along with chaos testing.\r\n\r\nThe CI dashboard allows users to view the commit and release-based build and run a chaos test using litmus on a different platform with different versions of Kubernetes.\r\n\r\nIn this tutorial, we’ll go through all the necessary steps for setting up the CI dashboard:\r\n\r\n1. *Create a project*\r\n2. *Push the code to GitHub*\r\n3. *Setup the CI of the project using GitLab*\r\n4. *Select the chaos test from [*Litmus*](https://github.com/openebs/litmus)*\r\n5. *Add the script in GitLab YAML to create pipelines for executing the chaos tests*\r\n6. *Build a CI dashboard(ex: *[*openebs.ci*](https://openebs.ci/)* ) to display the gitlab pipeline history and status*\r\n7. *Conclusion*\r\n\r\n### Step 1: Create a project\r\n\r\nFirst, create a [project](https://github.com/openebs/maya) and write some automated testing for it. You should also add the Dockerfile in the project to set up the CI.\r\n\r\n### Step 2: Put the codes on GitHub\r\n\r\nCreate a repository on GitHub and add a `.gitignore` file to ignore the auto-generated folder or file. Follow the script below to put changes into GitHub.\r\n\r\n    $ git init\r\n    $ git add .\r\n    $ git commit -s -m \"Initial commit\"\r\n    $ git remote add origin <origin_url>.git\r\n    $ git push origin master\r\n\r\n### Step 3: Setup the CI using gitlab\r\n\r\nAdd a *.gitlab.yaml* file to project and write the build and test steps. \r\n(Ex: [https://github.com/openebs/maya/blob/master/.gitlab-ci.yml](https://github.com/openebs/maya/blob/master/.gitlab-ci.yml)). Import the project in gitlab from GitHub. Setup the gitlab pipeline environment variable to push the docker image, or any other, if required. Add the pipeline trigger command in *.gitlab.yaml* file.\r\n\r\n### Step 4: Selection of chaos test\r\n\r\nSelect the chaos test (litmus book) from the [litmus](https://github.com/openebs/litmus) repository or write your own litmus book if needed. This will be used to test the product performance on different Kubernetes versions and with different cloud vendors.\r\n\r\n### Step 5: Add script in gitlab.yaml\r\n\r\nCreate a [repository](https://github.com/openebs/e2e-packet) for the execution of the platform-based pipeline. Add `.gitlab.yaml` file and related script to create a cluster, or use the executing cluster and run the different chaos tests in various stages of the [pipeline](https://gitlab.openebs.ci/openebs/e2e-packet/pipelines).\r\n\r\nReference the `.gitlab.yaml` file\r\n[https://raw.githubusercontent.com/openebs/e2e-packet/master/.gitlab-ci.yml](https://raw.githubusercontent.com/openebs/e2e-packet/master/.gitlab-ci.yml)\r\n\r\n    cleanup-packet:\r\n      when: always\r\n      image: chandankumar4/packet:v4\r\n      dependencies:\r\n        - packet-cluster\r\n      stage: CLUSTER-CLEANUP\r\n      script: \r\n        - chmod 755 ./script/packet-cleanup\r\n        - ./script/packet-cleanup\r\n    \r\n\r\n### Step 6: Build a CI dashboard\r\n\r\n![CI Dashboard](https://lh4.googleusercontent.com/hoDf2G6VnpIhhkmkQXlF07ocFRm7bJjP5f1ZkA8TZCT6PXMOPkdCO966EecYpk7koCbHPKdMemOA3_kYz8M5qrvLevRDJPw2c0MfYn-yp-iLn4j-qV8wpwT_av2iBYBuMH-4EUeB)\r\n\r\nCreate a project called [Ci dashboard backend](https://github.com/openebs/ci-e2e-dashboard-go-backend) that will fetch the pipeline details from gitlab by accessing their API and exposing the same on different API after some enhancement. Create another project called [Ci dashboard](http://github.com/openebs/ci-e2e-dashboard) that will display the gitlab pipeline details by accessing the data from the back end API.\r\n\r\n### Step 7: Conclusion\r\n\r\nCI dashboard will display the build history of the imported project and analyze the performance on different platforms and versions of Kubernetes.\r\n\r\n### References\r\n\r\n[https://openebs.ci/](https://openebs.ci/)\r\n\r\n[openebs/ci-e2e-dashboard](https://github.com/openebs/ci-e2e-dashboard)\r\n[Contribute to openebs/ci-e2e-dashboard development by creating an account on GitHub.github.com](https://github.com/openebs/ci-e2e-dashboard)\r\n\r\n[openebs/ci-e2e-dashboard-go-backend](https://github.com/openebs/ci-e2e-dashboard-go-backend)\r\n[OpenEBS CI Dashboard backend using Go and PostgreSQL. — openebs/ci-e2e-dashboard-go-backendgithub.com](https://github.com/openebs/ci-e2e-dashboard-go-backend)[openebs/maya](https://github.com/openebs/maya)\r\n[OpenEBS Maya extends Kubernetes capabilities to orchestrate CAS containers. — openebs/mayagithub.com](https://github.com/openebs/maya)\r\n","slug":"how-to-easily-build-a-ci-dashboard"},{"id":42,"title":"Deploying OpenEBS on SUSE CaaS platform\r","author":"Ashok Babu\r","author_info":"Senior DevOps consultant at Wipro works on App Anywhere & cloud-native technologies.\r","date":"24-04-2019\r","tags":["Kubernetes"," Cloud Native Storage"," Mayadata"," SUSE"," Container attached storage"," OpenEBS"],"excerpt":"I am recently introduced to OpenEBS, an easy to use persistent storage option for Kubernetes and found it nicely working on the SuSE CaaS platform where I could certify the cloud native databases. \r","content":"\r\nI am recently introduced to OpenEBS, an easy to use persistent storage option for Kubernetes and found it nicely working on the SuSE CaaS platform where I could certify the cloud native databases. In this blog, I cover a few quirks to get it running on the SuSE CaaS platform.\r\n\r\nSuSE CaaS Platform is an enterprise-class container management solution that leverage Kubernetes as the orchestration layer and SuSE MicroOS as the host operating system for master and worker nodes.\r\n\r\nSuSE CaaS provides enhanced security policies such as predefined pod security policies.\r\n\r\nIn SuSE MicroOS, a read-only Btrfs file system is used for the root file system with OverlayFS. Sub-volumes for data sharing is read-write.\r\n\r\nOutlined below are some of the steps that need to be taken care while installing OpenEBS version 0.8.1 on SuSE CaaS Platform 3\r\n\r\n## Issue\r\n\r\nDefault OpenEBS installation would fail on SuSE CaaS platform due to the following restrictions by the platform\r\n\r\n- NDM Daemonset fails to spin up as it requires privilege permission\r\n- Sparse pools will not be created as it uses by default /var/openebs directory which is read-only directory under root filesystem in SuSE CaaS.\r\n- Runtasks in operator uses /var/openebs directory for temporary file creation due to this cstor-target pods or cstor-pool pod gets stuck in “ContainerCreating” status\r\n\r\n## Resolution\r\n\r\n### Step1\r\n\r\nTo install OpenEBS on SuSE platform run the following custom YAML file instead of default operator YAML\r\n\r\n    kubectl apply -f https://openebs.github.io/charts/openebs-operator-susecaas.yaml\r\n\r\nThis is a customized operator YAML file for SuSE CaaS platform that uses the role `suse:caasp:psp:privileged` for creating privileged DaemonSet\r\n\r\n[https://www.suse.com/documentation/suse-caasp-3/singlehtml/book_caasp_admin/book_caasp_admin.html#ex.admin.security.pod_policies.daemonset](https://www.suse.com/documentation/suse-caasp-3/singlehtml/book_caasp_admin/book_caasp_admin.html#ex.admin.security.pod_policies.daemonset)\r\n\r\n### Step2:\r\n\r\nPerform the following changes in the runtask after completing step1\r\n\r\nNote: — This step is not required if you are using the OpenEBS version 0.9 which is the upcoming release.\r\n\r\n- **Change the path in runtask for cstor-pool-create-putcstorpooldeployment**\r\n\r\n        kubectl edit runtask cstor-pool-create-putcstorpooldeployment-default-0.8.1 -n openebs\r\n\r\n    Change from\r\n\r\n        path: /var/openebs/shared-\r\n\r\n    Change to\r\n\r\n        path /var/lib/overlay/openebs/shared-\r\n\r\n- **Change the path in runtask for cstor-volume-create-puttargetdeployment**\r\n\r\n        kubectl edit runtask cstor-volume-create-puttargetdeployment-default-0.8.1 -n openebs\r\n\r\n    Change from\r\n\r\n        path: /var/openebs/shared--target\r\n\r\n    Change to\r\n\r\n        path: path /var/lib/overlay/openebs/shared--target\r\n\r\n### Step 3:\r\n\r\n**Optional:** If you need to use sparse pool\r\n\r\n    kubectl apply -f https://raw.githubusercontent.com/openebs/openebs/5860c0a4619a9feddf5d75d11f50f2ea8fdcec82/k8s/demo/fio/demo-cstor-sparse-pool-limits.yaml\r\n\r\n### Step 4:\r\n\r\nConfiguration of storage pool, storage class and PVC are like any other platform and the steps are outlined in [https://docs.openebs.io](https://docs.openebs.io/?__hstc=216392137.a6c0b8ba8416b65c52c0226c0e0b69fd.1579867391229.1579867391229.1579867391229.1&amp;__hssc=216392137.1.1579867391230&amp;__hsfp=3765904294)\r\n\r\nPool Configuration — [https://docs.openebs.io/docs/next/configurepools.html#manual-mode](https://docs.openebs.io/docs/next/configurepools.html?__hstc=216392137.a6c0b8ba8416b65c52c0226c0e0b69fd.1579867391229.1579867391229.1579867391229.1&amp;__hssc=216392137.1.1579867391230&amp;__hsfp=3765904294#manual-mode)\r\n\r\nStorage class — [https://docs.openebs.io/docs/next/configuresc.html#creating-a-new-class](https://docs.openebs.io/docs/next/configuresc.html?__hstc=216392137.a6c0b8ba8416b65c52c0226c0e0b69fd.1579867391229.1579867391229.1579867391229.1&amp;__hssc=216392137.1.1579867391230&amp;__hsfp=3765904294#creating-a-new-class)\r\n\r\nVolume — [https://docs.openebs.io/docs/next/provisionvols.html#provision-from-a-disk-pool](https://docs.openebs.io/docs/next/provisionvols.html?__hstc=216392137.a6c0b8ba8416b65c52c0226c0e0b69fd.1579867391229.1579867391229.1579867391229.1&amp;__hssc=216392137.1.1579867391230&amp;__hsfp=3765904294#provision-from-a-disk-pool)\r\n\r\n## Conclusion:\r\n\r\nAbove approach can be followed to install OpenEBS 0.8 on SuSE CaaS platform 3.0 which needs additional configuration.\r\n\r\nWith OpenEBS 0.9 it would be simplified such that you would need to only apply the operator YAML to perform the installation.\r\n\r\n**SUSE CaaS Platform:** (Container as a Service Platform) is an integrated software platform which automates the process of building, managing and upgrading of Kubernetes clusters. It combines the benefits of an enterprise-ready operating system with the agility of an orchestration platform for containerized applications. More details — [https://www.suse.com/products/caas-platform/](https://www.suse.com/products/caas-platform/)\r\n\r\n**OpenEBS:** OpenEBS is the leading open-source project for container-attached and container-native storage on Kubernetes. OpenEBS adopts Container Attached Storage (CAS) approach, where each workload is provided with a dedicated storage controller. OpenEBS implements granular storage policies and isolation that enable users to optimize storage for each specific workload. OpenEBS runs in userspace and does not have any Linux kernel module dependencies. More details — [https://openebs.io/](https://openebs.io/?__hstc=216392137.a6c0b8ba8416b65c52c0226c0e0b69fd.1579867391229.1579867391229.1579867391229.1&amp;__hssc=216392137.1.1579867391230&amp;__hsfp=3765904294)\r\n\r\nThey have a very responsive community. Visit [https://slack.openebs.io](https://slack.openebs.io)\r\n","slug":"deploying-openebs-on-suse-caas-platform"},{"id":43,"title":"High Availability For Jira Using OpenEBS\r","author":"Patrick Hoolboom\r","author_info":"Works @MayaData\r","date":"21-04-2019\r","tags":["OpenEBS"," Kubernetes"," K8s"," Jira"," Docker"," Mayaonline"],"excerpt":"Up time, high availability, disaster recovery. Anyone that has been working in development or IT operations roles knows these terms. Maintaining these things is always touted as the most critical of critical tasks.\r","content":"\r\nUp time, high availability, disaster recovery. Anyone that has been working in development or IT operations roles knows these terms. Maintaining these things is always touted as the most critical of critical tasks. Even with that in mind, we often slack in these areas. We don’t test our backups or run our applications with high availability in mind. One of the main factors that lead to these less than ideal deployments is that implementing a good high availability story, or testing our backups, adds time and/or complexity to our already busy day. All that being said, let’s take a look at a dead simple solution for one of those applications that many of us run: Jira.\r\n\r\nThe standard answer to making Jira highly available and provide a good disaster recovery story is to use Jira Data Center and follow this guide:\r\n\r\n[Jira Data Center Guide](https://confluence.atlassian.com/enterprise/jira-data-center-472219731.html)\r\n\r\nThat guide shows you how to cluster multiple instances of the application behind a load balancer, then use a shared file system and a shared database underneath. This blog is not about the application layer or even the database (though we do have some fantastic guides for deploying databases using OpenEBS in our documentation). This is going to focus on a simple way to create a replicated storage layer specifically for the file system. Jira stores information on disks such as issue attachments, import/export files, and logos. These are all important in keeping Jira working correctly.\r\n\r\nDeploying Jira on Kubernetes using OpenEBS is as simple as installing OpenEBS on Kubernetes, define a storage pool, define a storage class, define your persistent volume claim, and deploy the Jira container. That’s it… and if you are already using OpenEBS it is even simpler. Now, as for the specifics of how to do those things, see this guide:\r\n\r\n[Jira - OpenEBS docs](https://docs.openebs.io/docs/next/jira.html?__hstc=216392137.fb75a0ac1e54cb037dfbafd0edf1ad3f.1579868085240.1579868085240.1579868085240.1&amp;__hssc=216392137.1.1579868085240&amp;__hsfp=3765904294)\r\n\r\nOnce you have Jira deployed on your cluster, the easiest way to see your storage resources is through MayaOnline (hopefully you connected to MayaOnline while following the guide, if not the [instructions are here](https://docs.openebs.io/docs/next/mayaonline.html?__hstc=216392137.fb75a0ac1e54cb037dfbafd0edf1ad3f.1579868085240.1579868085240.1579868085240.1&amp;__hssc=216392137.1.1579868085240&amp;__hsfp=3765904294). Here is an example of a Jira deployment as visualized through the MayaOnline topology pane:\r\n\r\n![topology plane](/images/blog/topology-plane.png)\r\n\r\nBy leveraging the power of replicas within OpenEBS we have quickly added fault tolerance to the storage attached to our Jira container. It was as simple as defining a replica count in the storage class. Since the replicas are spread across the cluster we no longer have to worry about the storage being a single point of failure. If one disk goes down, the controller will automatically route to one of the replicas with no intervention necessary.\r\n\r\nAs you can see OpenEBS has greatly simplified the process of making Jira more resilient in a containerized world. The ease of use of container attached storage makes tasks like these much simpler. It allows us to spend more time working on improving our applications or infrastructure, and less time worrying about its resiliency.\r\n","slug":"high-availability-for-jira-using-openebs"},{"id":44,"title":"A Primer on OpenEBS Continuous Integration\r","author":"Karthik Satchitanand\r","author_info":"Karthik has been into the Design and Development of tools for infrastructure as code, software testing performance & benchmarking & chaos engineering.\r","date":"02-04-2019\r","tags":["Chaos Engineering"," Continuous Integration"," E2e Kubernetes Litmus"],"excerpt":"The OpenEBS project consists of several components (control plane & data plane) that directly support the dynamic provisioning & management of a persistent storage volume on the Kubernetes cluster.\r","content":"\r\n**This article is part of a #Concepts series on Kubernetes and Litmus. Here, we present an overview of the OpenEBS CI infrastructure with its Litmus powered e2e pipelines.**\r\n\r\nThe OpenEBS project consists of several components (control plane & data plane) that directly support the dynamic provisioning & management of a persistent storage volume on the Kubernetes cluster. As with any microservice-oriented system following the DevOps paradigm, there is a need to continuously build and test each component, both in isolation (via unit tests) as well as in relation with the other pieces (integration tests) with emphasis on standard end-user scenarios (e2e). Factor in the need for basic interoperability verification (in terms of supported OS/Platform/Cluster versions) and you have the requirements for the CI framework spelt out.\r\n\r\nThe OpenEBS CI infrastructure is based on the Cloud-Native GitLab CI framework which is setup to monitor commits to the core components such as [Maya](https://github.com/openebs/maya), [Jiva ](https://github.com/openebs/jiva)& [cStor](https://github.com/openebs/zfs) and also [e2e ](https://github.com/openebs/e2e-packet)(reduces turnaround time to verify test case sanity). It uses Litmus to drive the e2e pipelines, thereby providing a reference implementation for a Litmus-Experiment based e2e suite.\r\n\r\n## GitLab Infrastructure\r\n\r\nSome of the reasons for adopting GitLab as the CI framework of choice (amongst standard benefits such as tight integration with our existing SCM, 2-factor auth, webhook support, well-defined UI with pipeline graphs, etc was the need to move away from a plugin-based model (Jenkins thrives on plugins, which may not always be advantageous) to a self-contained platform that supports simple pipeline definitions (`.gitlab-ci.yaml` is far easier to maintain than the groovy-based `jenkinsfile`!). GitLab also offers a more mature kubernetes-native solution that gives users the ability to dogfood OpenEBS storage as the back-end store (PostgreSQL) for the GitLab server.\r\n\r\n![GitLab server](/images/blog/openebs-control-and-data-plane.png)\r\n\r\nThe GitLab server (with its microservices such as Unicorn, Shell, Workhorse, Registry, Sidekiq, Gitaly, PostgreSQL, Redis, Minio) is hosted on a multi-node bare-metal OpenShift cluster and is configured with pull-based repository mirroring of the OpenEBS component GitHub repos and a webhook based setup that triggers the pipelines upon commits.\r\n\r\nWhile Maya and Jiva repos are mapped to shell-based executors due to certain build and integration-test requirements, cStor (zfs) and e2e repos are mapped to docker-machine based executors. The docker-machine executors are inherently auto-scaling, a necessary feature for e2e builds as multiple parallel jobs are spawned during the course of e2e pipelines.\r\n\r\n## OpenEBS CI Workflow\r\n\r\nEach commit to the component source triggers the “gitlab build” procedure, which can be split into two logical phases: “component build” and “e2e.”\r\nThe component build executes the respective makefile which typically involves running unit tests, building the GO binaries, creating docker images, running integration tests and pushing docker images tagged with the commit SHA to the respective container repositories. It also performs certain pre-e2e routines before finally triggering the e2e pipelines.\r\n\r\nThe e2e phase involves running several parallel pipelines (based on Kubernetes cluster platforms or versions), with each pipeline containing multiple stages such as test bed setup, application deployment, Litmus experiments (functional and chaos), and finally clean-up. Needless to say, the component versions used are the ones built in the previous phase.\r\n\r\n![OpenEBS CI Workflow](/images/blog/openebs-ci-flow.jpg)\r\n\r\n**Note**: *Currently, the GitLab CI works in a “retrospective mode,” as it is invoked on commits to the upstream branches. There is work in progress to extend the support for pull requests (presently, a travis-based build verifies commit sanity to aid PR acceptance).*\r\n\r\n## Baseline Commit\r\n\r\nBefore triggering the e2e pipelines as part of the final step, the build pipeline performs a pre-e2e routine to generate metadata about the impending e2e run. As is evident from the previous discussion, the e2e pipelines are triggered against commits to any of the OpenEBS component repos (maya, jiva, zfs/cstor, e2e). Images pushed as part of the build pipeline are deployed during the e2e. Therefore, it is necessary to baseline or identify an e2e run against the primary trigger (commit) while maintaining the details of image versions of the other relative components.\r\n\r\nThis is achieved by writing the details of the baseline commit (timestamp, component repo, branch and commit ID) into the file head of a “baseline artifact” maintained in a separate repository. Once the e2e pipeline is initiated, the baseline artifact is [parsed ](https://github.com/openebs/e2e-infrastructure/blob/master/env/env_exporter.py) for the “most current” image tags of each component, which will invariably include the current baseline commit and the latest ones for other components, in the test-bed preparation stage. This information is then used to [precondition ](https://github.com/openebs/e2e-infrastructure/blob/master/env-update/env.py) the OpenEBS Operator manifest before its deployment on the test clusters.\r\n\r\n## OpenEBS e2e Pipelines: Leveraging Litmus\r\n\r\n*One of the arguments against the inclusion of e2e as part of CI pipelines is that they could be flaky and time-consuming (under ideal circumstances it involves testing every moving part of the microservice and needs more maintenance). However, the e2e can confirm achievement of the goals that the solution was conceived and built to accomplish. The extent of coverage and the schedules can be optimized for development agility, but at OpenEBS, we feel it is a must-have in our CI pipelines.*\r\n\r\nOpenEBS CI makes use of Litmus to drive its e2e pipelines, right from test bed creation (cluster creation playbooks) all the way through the e2e tests (litmus experiments). The e2e pipeline involves several stages, with one or more gitlab jobs scheduled to run in a given stage. Each gitlab job is associated with a “runner script” that runs an “e2e test.” This in turn invokes/executes a litmus experiment (or litmus ansible playbook in the case of cluster creation/destroy jobs).\r\n\r\nThe various stages in the e2e pipeline are discussed below:\r\n\r\n![Various stages in the e2e pipeline](/images/blog/e2e-pipelines.png)\r\n\r\n**Cluster Creation**: This stage calls up the Kubernetes cluster by executing the platform-specific playbooks. Cluster parameters are controlled via runtime arguments. The artifacts generated upon this job’s execution such as cluster config, which includes kubeconfig and cluster resource names, are passed over to subsequent stages as dependencies. The Litmus pre-requisites are also installed once the cluster is created. Currently, Litmus supports creation of clusters on these platforms:\r\n\r\n- Baremetal Cloud: Packet (ARM based physical servers)\r\n- Managed Kubernetes: GKE, EKS, AKS\r\n- Cloud Hosted/Self-Installed: AWS, GCP (via KOPS)\r\n- On-Premise: OpenShift (vSphere VMs)\r\n\r\n**Cluster Provision**: Provision equips the cluster with additional disk resources native to the specific platform (GPD, EBS, Packet Block Storage, Azure Block Device) used by the storage-engines as physical storage resources.\r\n\r\n**Provider Setup:** Here, the system deploys the customized/preconditioned OpenEBS Operator manifest (based on the baseline commit) on the cluster, thereby setting up the control plane and preparing default storage pool resources. The logging infrastructure (fluentd) is also setup on the created cluster.\r\n\r\n**Stateful Application Deployment**: The OpenEBS e2e verifies interoperability with several standard stateful applications such as Percona-MySQL, MongoDB, Cassandra, PostgreSQL, Prometheus, Jenkins, Redis etc. These applications are deployed with OpenEBS storage classes (tuned for each app’s storage requirement). Each application is accompanied by respective load-generator jobs that simulate client operations and real-world workloads.\r\n\r\n**App Functionality Tests:** Each deployed application is subjected to specific behavioural tests such as replica scale, upgrade, storage resize, app replica re-deployment, storage affinity etc. Most of these tests are common day-2 operations.\r\n\r\n**Storage/Persistent Volume Chaos Tests:** The PV components such as controller/replica pods are subjected to chaos (pod crash/kill, lossy networks, disconnects) using tools such as ChaosKube, Pumba, and Kubernetes APIs (via kubectl) to verify data availability and application liveness during adverse conditions.\r\n\r\n**Infrastructure Chaos Tests:** The cluster components such as storage pools, nodes, and disks are subjected to different failures using Kubernetes APIs (forces evicts, cordon, drain) as well as platform/provider specific APIs (gcloud, awscli, packet) to verify data persistence and application liveness.\r\n\r\n**Stateful Application Cleanup:** The deployed apps are deleted in this stage, thereby verifying de-provisioning and cleanup functionalities in the OpenEBS control plane.\r\n\r\n**Cluster Cleanup:** The cluster resources (nodes, disks, VPCs) are deleted. With this final step, the e2e pipeline ends.\r\n\r\n## GitLab e2e Job Runner Template\r\n\r\nEach GitLab job running the e2e test executes (bash) scripts containing steps to run and monitor a Litmus experiment. These scripts are invoked using desired arguments, specified as part of the job definition in the e2e repository’s `.gitlab-ci.yml`. The standard template maintained in these (bash) runner scripts and the performed tasks are described below.\r\n\r\n![GitLab runner template(E2E)](/images/blog/gitlab-job-runner.png)\r\n\r\n**Generate Unique Test Name:** Each gitlab job is associated with a litmus experiment that has a test/experiment name. The result of this litmus experiment is stored in a Litmus Custom Resource (CR) of the same name. The success of a test and therefore the gitlab job is derived from this CR. Occasionally, it is possible that the same litmus experiment is run against different applications or storage engines in a pipeline, thereby necessitating a unique element or ID in the CR name. In this step, a user-defined input (run_id) is accepted to generate a unique test/CR name.\r\n\r\n**Setup Dependencies:** Depending on the nature of the gitlab job (cluster create/delete playbooks OR litmus experiments), the executor machine is updated with the appropriate directory structure and target cluster info (such as cluster configuration file, cluster names, disk details, VPC information etc.) to ensure successful test execution.\r\n\r\n**Precondition Litmusbook:** Each litmusbook (the Kubernetes job specification YAML) consists of a default set of test inputs such as placeholders for application, storage, chaos info, etc. These are overridden/replaced by desired values in this step. In addition, the default name of the test is replaced with the unique name generated by the runner at the start of execution.\r\n\r\n**Run Litmus Experiment:** The litmusbook is deployed and monitored for completion, with a polling interval of 10s. The status of both the litmus Kubernetes job and the ansible-runner container is checked as necessary and sufficient conditions, respectively, to determine completion of the litmus experiment.\r\n\r\n**Get Litmus Experiment Result:** The result CR with the unique name generated is queried to determine the Litmus experiment result. The runner script completes execution with a zero/non-zero exit code depending on a pass/failure result, thereby setting the gitlab job status.\r\n\r\n**Logging Framework for e2e**\r\n\r\nOpenEBS CI uses the popular EFK (Elasticsearch-Fluentd-Kibana) stack as the logging framework for the e2e pipelines. Each target cluster brought up as part of the e2e pipeline is configured with the fluentd-forwarder daemonset and fluentd-aggregator deployment, with the latter streaming the logs to the remote ElasticSearch instance running on the master (GitLab-CI) cluster. These are then rendered by the Kibana visualization platform that is also running on the master cluster. The forwarders are configured with the appropriate filters based on pipeline and commit IDs to aid in a quick data analysis.\r\n\r\n![EFK-Based Logging framework](/images/blog/efk-based-logging-framework.png)\r\n\r\n**Conclusion**\r\n\r\nHopefully, this article has provided you with a better understanding of the CI/E2E practices in the OpenEBS project. CI is an important factor in contributor happiness as well as user confidence, and we are focused on continually making it more robust. Feel free to share your questions, comments, and feedback with us — we are always listening!\r\n","slug":"a-primer-on-openebs-continuous-integration"},{"id":45,"title":"Provisioning Google Cloud with k8s using it’s in-house tool, KOPS\r","author":"Harshvardhan Karn\r","author_info":"Harshvardhan Karn works at MayaData Inc. He is a public speaker, has talked in few local meetups and at two major conferences. In his free time, he likes to play Guitar, Netflix.\r","date":"14-08-2018\r","tags":["Docker"," Kubernetes"," OpenEBS"," Kops"],"excerpt":"Setting up and using a cluster in GCP offers a few significant advantages over using GKE. For instance, using GCP gives the user the liberty to use their custom binaries or a pure Open Source Kubernetes.\r","content":"\r\nI am very excited for this post, as I have been working on this content for a few weeks. I might sound naive throughout this, mainly because I am, to be honest. Setting up and using a cluster in _GCP_ offers a few significant advantages over using _GKE_. For instance, using GCP gives the user the liberty to use their _custom binaries_ or a _pure Open Source Kubernetes_. Also, _GKE_ does not support modification or access to the master node, whereas a manually setup-ed k8s cluster over _VMs_ does.\r\n\r\nTo gain the full understanding of Kubernetes, some people like to get their hands dirty for a course of interval. Luckily, we have a few more tools to get a Kubernetes cluster up and running in VM instances of **Google Cloud**. I find that tools like _kubernetes-incubator/kubespray , crosscloudci/cross-cloud_ and kops, are not very straightforward to use, but _kops, kubespray_ is somewhat close. _Cross-cloud_ on the other hand, has poor documentation and is not very stable. _kops_ here stands for ‘_Kubernetes Operations._’ To be honest, I find this to be a good tool to deploy the Cluster over Google Cloud Platform (**GCP**) or Amazon Web Services (**AWS**). I certainly would not say it is the best, but this tool is documented to the extent that one can use it. The original idea of KOPS was to create user a production ready cluster in **AWS**. Allowing it to provision the GCP is luxury since GCP already provides with GKE and AWS does not.\r\n\r\n### **Requirements**\r\n\r\nThese items are required to deploy the production-ready k8s cluster in GCP:\r\n\r\n- **KOPS**\r\n\r\n  ```\r\n  wget -O kops\r\n  https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '\"' -f 4)/kops-linux-amd64\r\n\r\n  chmod +x ./kops\r\n\r\n  sudo mv ./kops /usr/local/bin/\r\n  ```\r\n\r\n- **GCloud**\r\n\r\n  [https://cloud.google.com/sdk/](https://cloud.google.com/sdk/)\r\n\r\n  Once you are done installing GCloud SDK, you must run _gcloud init_. This will configure your gcloud with your existing GCP project.\r\n\r\n- **kubectl**\r\n\r\n  From the [Official Kubernetes kubectl release:](https://kubernetes.io/docs/tasks/tools/install-kubectl/)\r\n\r\n  ```\r\n  wget -O kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl\r\n  chmod +x ./kubectl\r\n  sudo mv ./kubectl /usr/local/bin/kubectl\r\n  ```\r\n\r\n- A little patience …\r\n\r\n## Let’s Begin!\r\n\r\nA quick note: every time you create a cluster, it also creates a _Virtual Private Cloud_ (**VPC**), per se. Google Cloud allows you to create only a maximum of 5 VPC’s in one project, and a total of only 5 clusters. So, to resolve this problem, we can create a **VPC** explicitly and use it as a common Network for the rest of the clusters.\r\n\r\n### Create a VPC\r\n\r\nHere I am using subnet-mode as auto, and it will create a VPC _openebs-e2e_ with a subnet in every zone.\r\n\r\n```\r\ngcloud compute networks create openebs-e2e --project=openebs-ci --subnet-mode=auto\r\n```\r\n\r\n### Create a Bucket\r\n\r\nKops needs a State Store to hold the configuration of our cluster. In our case, it is Google Cloud Storage Buckets. So, let’s create one empty Bucket using the following:\r\n\r\n```\r\ngsutil mb gs://openebs-dev/\r\n```\r\n\r\nNow, since we are ready with the Bucket, we can populate it with our cluster’s State Store, i.e. Cluster object and InstanceGroup object.\r\n\r\n**Create the Cluster & InstanceGroup Objects in Our State Store**\r\n\r\n_kops create cluster_, creates the Cluster object and InstanceGroup object. Here, we’ll be working within kops.\r\n\r\n```\r\nPROJECT=`gcloud config get-value project`\r\nexport KOPS_FEATURE_FLAGS=AlphaAllowGCE # to unlock the GCE features\r\nkops create cluster openebs-dev.k8s.local --zones us-central1-a\r\n--state gs://openebs-dev/ --project=${PROJECT}\r\n--kubernetes-version=1.11.1 --node-count 3\r\n```\r\n\r\nNow we can list the Cluster objects in our kops State Store (the GCS bucket we created):\r\n\r\n```\r\nkops get cluster --state gs://openebs-dev/\r\nNAME                     CLOUD        ZONES\r\nopenebs-dev.k8s.local    gce          us-central1-a\r\n```\r\n\r\n**NB:** It is not necessary to use the same name for the Bucket and Cluster; you are free to use whatever name you wish.\r\n\r\n### Create a Cluster\r\n\r\nWe are now ready with all of the changes and the cluster configuration, so we will proceed with the creation of the cluster. _kops create cluster_ created the Cluster object and the InstanceGroup object in our State Store, but it did not actually create any instances or other cloud objects in GCE. To do that, we’ll use _kops update cluster_.\r\n\r\n_kops update cluster_ without _--yes_ will show us a preview of changes that will be made. It comes handy in case we want to see or verify the specs before creation.\r\n\r\n```\r\nkops update cluster openebs-dev.k8s.local --state gs://openebs-dev/ --yes\r\n```\r\n\r\nCheers!\r\n\r\nWe have now deployed the Kubernetes cluster on GCP. If you go to the _Compute Engine_ in _Google Cloud Platform_, you will find 4 new nodes, where 1 is the master and the rest are worker nodes. Just to save your day, if you are wondering why you could not find your nascent cluster inside _Google Kubernetes Engine_, this is not a mistake or error because it is not a GKE Cluster. All GzCP knows is that there are 4 VMs running in the project, which we know is a K8s cluster.\r\n\r\n## Out-of-the-Box\r\n\r\nWe are now ready with the cluster, but is it ready for the deployments? Once the kops is finished creating the cluster, we can validate its readiness using the following:\r\n\r\n```\r\nkops validate cluster --state gs://openebs-dev/\r\n\r\n\r\nI0808 12:34:10.238009   25907 gce_cloud.go:273] Scanning zones: [us-central1-c us-central1-a us-central1-f us-central1-b]\r\nINSTANCE GROUPS\r\nNAME                 ROLE   MACHINETYPE    MIN MAX SUBNETS\r\nmaster-us-central1-a Master n1-standard-1  1   1   us-central1\r\nnodes                Node   n1-standard-2  3   3   us-central1\r\nNODE STATUS\r\nNAME                       ROLE   READY\r\nmaster-us-central1-a-067f  master True\r\nnodes-6rt6                 node   True\r\nnodes-lvs5                 node   True\r\nnodes-wbb8                 node   True\r\nYour cluster openebs-dev.k8s.local is ready\r\n```\r\n\r\nIf you find that the cluster not ready, wait for a few minutes as it takes some time to configure the cluster. You can even check using _kubectl_ from your control machine:\r\n\r\n```\r\nkubectl get nodes\r\n```\r\n\r\nYou will see the node counts once your Cluster is up, viz. _kubelets_ are configured. If you are wondering how you got your _kubectl_ configured to this cluster, _kops_ does that for you. It exports a kubecfg file for a cluster from the state store to your _~/.kube/config_ local machine where you are running _kops_. If you want to export this config to some other path, you can the following:\r\n\r\n```\r\nkops export kubecfg openebs-dev.k8s.local\r\n```\r\n\r\nI wrote an Ansible playbook for [Litmus](https://github.com/openebs/litmus/), which is actually a wrapper for all of these to bring up the cluster on GCP. You can check it out here:\r\n\r\n[https://github.com/openebs/litmus/tree/master/k8s/gcp/k8s-installer](https://github.com/openebs/litmus/tree/master/k8s/gcp/k8s-installer)\r\n\r\nThe playbook also checks the cluster availability implicitly using a python script. This will hold the playbook from termination until the cluster is ready to use. _kops validate_ works well, but **not** for **k8s version < 1.9,** up to the day of writing this post.\r\n\r\nGodspeed!\r\n","slug":"provisioning-google-cloud-with-k8s-using-its-inhouse-tool-kops"},{"id":46,"title":"Setting up WordPress and SQL with OpenEBS\r","author":"Ashish Ranjan\r","author_info":"An enthusiastic person when it comes to software & computers. I don't mind getting out of my comfort zone when things related to computing need to be done at the spur of the moment.\r","date":"14-08-2018\r","tags":["OpenEBS"," Kubernetes"," Cloud Native Storage"," Open Source"," State Department"],"excerpt":"Wordpress is a well-known blogging platform. New bloggers are often surprised when they find out how easy it is to get set up and start their first piece in this popular tool.\r","content":"\r\n[Wordpress](https://en.wikipedia.org/wiki/WordPress) is a well-known blogging platform. New bloggers are often surprised when they find out how easy it is to get set up and start their first piece in this popular tool. In this blog, we will show how to deploy WordPress and MySQL on OpenEBS in their Kubernetes cluster.\r\n\r\n## What is OpenEBS?\r\n\r\nOpenEBS offers containerized persistent block storage using Docker containers. Those blocks are often referred to as Virtual Storage Machines (similar to K8s pods). OpenEBS seamlessly provides scalable storage volumes and manages them effortlessly. For more information, you can visit [https://openebs.io/join-our-slack-community](https://openebs.io/join-our-slack-community?__hstc=216392137.b7acacf689e0cc4579eea008f86d0c72.1579857743065.1579857743065.1579857743065.1&__hssc=216392137.1.1579857743066&__hsfp=3765904294).\r\n\r\n### Prerequisites:\r\n\r\n- A k8s cluster with at least one minion.\r\n- Basic knowledge of writing services, deployment in k8s.\r\n- Kubectl, already configured.\r\n- A code editor for writing a yamls.\r\n- Brains.\r\n\r\nLet’s get started!\r\n\r\n## Setting up OpenEBS\r\n\r\nBefore starting with WordPress, we need to set up OpenEBS. For this article, I will be using OpenEBS v0.6 (you are free to use newer versions if you wish).\r\n\r\nWhen setting up OpenEBS, you need to apply the following yamls:\r\n\r\n```\r\nkubectl apply -f https://raw.githubusercontent.com/openebs/openebs/v0.6/k8s/openebs-operator.yaml\r\nkubectl apply -f https://raw.githubusercontent.com/openebs/openebs/v0.6/k8s/openebs-storageclasses.yaml\r\n```\r\n\r\nThe first yaml is for the openebs-operator, and the second one is for openebs-storage-classes. For more information look [here](https://docs.openebs.io/?__hstc=216392137.b7acacf689e0cc4579eea008f86d0c72.1579857743065.1579857743065.1579857743065.1&__hssc=216392137.1.1579857743066&__hsfp=3765904294). After applying the above yamls, the output of kubectl get pods — all-namespaces will look like this:\r\n\r\n```\r\n$ kubectl get pods --all-namespaces\r\nNAMESPACE NAME READY STATUS RESTARTS AGE\r\nkube-system event-exporter-v0.2.1-5f5b89fcc8-bhv7r 2/2 Running 0 16m\r\nkube-system fluentd-gcp-scaler-7c5db745fc-tb2zw 1/1 Running 0 16m\r\nkube-system fluentd-gcp-v3.0.0-wqgzx 2/2 Running 0 14m\r\nkube-system heapster-v1.5.3-77c6fcd568-q8txc 3/3 Running 0 15m\r\nkube-system kube-dns-788979dc8f-4lgsf 4/4 Running 0 16m\r\nkube-system kube-dns-autoscaler-79b4b844b9-jldbr 1/1 Running 0 16m\r\nkube-system kube-proxy-gke-ashish-ranjan-default-pool-b3a38b91-cv5d 1/1 Running 0 16m\r\nkube-system l7-default-backend-5d5b9874d5-hvrgb 1/1 Running 0 16m\r\nkube-system metrics-server-v0.2.1-7486f5bd67-hls82 2/2 Running 0 15m\r\nopenebs maya-apiserver-68c98fdb76-vbslv 1/1 Running 0 1m\r\nopenebs openebs-provisioner-5569654c96-hmhb5 1/1 Running 0 1m\r\nopenebs openebs-snapshot-operator-5f7c4d9bd8-7fnfv 2/2 Running 0 1m\r\n```\r\n\r\nWait until all openebs namespaced pods move into a running state. Once this is completed, we’ll start by creating a secret for sql.\r\n\r\n## Creating a Secret\r\n\r\n```\r\nkubectl create secret generic mysql-pass --from-literal=password=w0rdPres5\r\n```\r\n\r\nRun the above kubectl command to create a mysql password.\r\n\r\n## Wordpress Deployment\r\n\r\nNow, let's start writing the WordPress deployment yaml. Copy and save the above into a Wordpress.yaml file and execute a kubectl apply on it. Once this is done, the output of kubectl get pods,svc,pvc — all-namespaces will look similar to this:\r\n\r\n```\r\n$ kubectl get pods,svc,pvc --all-namespaces\r\nNAMESPACE NAME READY STATUS RESTARTS AGE\r\ndefault pod/pvc-7030ae5f-9d40-11e8-afcb-42010a800179-ctrl-766678794-jtltg 2/2 Running 0 2m\r\ndefault pod/pvc-7030ae5f-9d40-11e8-afcb-42010a800179-rep-6689868cf4-2pkt4 1/1 Running 0 2m\r\ndefault pod/pvc-7030ae5f-9d40-11e8-afcb-42010a800179-rep-6689868cf4-htdxh 1/1 Running 0 2m\r\ndefault pod/pvc-7030ae5f-9d40-11e8-afcb-42010a800179-rep-6689868cf4-rdtlk 1/1 Running 0 2m\r\ndefault pod/wordpress-7bdfd5557c-5b4nh 1/1 Running 2 2m\r\nkube-system pod/event-exporter-v0.2.1-5f5b89fcc8-wprbm 2/2 Running 0 8m\r\nkube-system pod/fluentd-gcp-scaler-7c5db745fc-s9mp9 1/1 Running 0 8m\r\nkube-system pod/fluentd-gcp-v3.0.0-49vq6 2/2 Running 0 5m\r\nkube-system pod/fluentd-gcp-v3.0.0-kfjsx 2/2 Running 0 5m\r\nkube-system pod/fluentd-gcp-v3.0.0-tg5hh 2/2 Running 0 5m\r\nkube-system pod/heapster-v1.5.3-76f7f5f544-z7xk9 3/3 Running 0 6m\r\nkube-system pod/kube-dns-788979dc8f-2chf4 4/4 Running 0 8m\r\nkube-system pod/kube-dns-788979dc8f-ls4ln 4/4 Running 0 7m\r\nkube-system pod/kube-dns-autoscaler-79b4b844b9-8745z 1/1 Running 0 8m\r\nkube-system pod/kube-proxy-gke-ashish-ranjan-default-pool-f0958e58-8866 1/1 Running 0 7m\r\nkube-system pod/kube-proxy-gke-ashish-ranjan-default-pool-f0958e58-8fh5 1/1 Running 0 7m\r\nkube-system pod/kube-proxy-gke-ashish-ranjan-default-pool-f0958e58-9jjf 1/1 Running 0 8m\r\nkube-system pod/l7-default-backend-5d5b9874d5-k9mn8 1/1 Running 0 8m\r\nkube-system pod/metrics-server-v0.2.1-7486f5bd67-wlnlg 2/2 Running 0 6m\r\nopenebs pod/maya-apiserver-68c98fdb76-5bt2z 1/1 Running 0 4m\r\nopenebs pod/openebs-provisioner-5569654c96-4n4hp 1/1 Running 0 4m\r\nopenebs pod/openebs-snapshot-operator-5f7c4d9bd8-shk58 2/2 Running 0 4m\r\nNAMESPACE NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE\r\ndefault service/kubernetes ClusterIP 10.55.240.1 <none> 443/TCP 8m\r\ndefault service/pvc-7030ae5f-9d40-11e8-afcb-42010a800179-ctrl-svc ClusterIP 10.55.253.18 <none> 3260/TCP,9501/TCP 2m\r\ndefault service/wordpress LoadBalancer 10.55.253.170 104.154.224.12 80:31392/TCP 2m\r\nkube-system service/default-http-backend NodePort 10.55.243.156 <none> 80:30045/TCP 8m\r\nkube-system service/heapster ClusterIP 10.55.248.200 <none> 80/TCP 8m\r\nkube-system service/kube-dns ClusterIP 10.55.240.10 <none> 53/UDP,53/TCP 8m\r\nkube-system service/metrics-server ClusterIP 10.55.244.66 <none> 443/TCP 8m\r\nopenebs service/maya-apiserver-service ClusterIP 10.55.240.121 <none> 5656/TCP 4m\r\nNAMESPACE NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE\r\ndefault persistentvolumeclaim/wp-pv-claim Bound pvc-7030ae5f-9d40-11e8-afcb-42010a800179 20Gi RWO openebs-standard 2m\r\n```\r\n\r\n## MySql deployment\r\n\r\nFollow the same procedure as done for WordPress deployment and execute a kubectl apply on it. The output of kubectl get pods,svc ,pvc — all-namespaces will look similar to this:\r\n\r\n```\r\n$ kubectl get pods,svc,pvc --all-namespaces\r\nNAMESPACE NAME READY STATUS RESTARTS AGE\r\ndefault pod/pvc-082a54c8-9d41-11e8-afcb-42010a800179-ctrl-b5c4f588f-lrl2l 2/2 Running 0 2m\r\ndefault pod/pvc-082a54c8-9d41-11e8-afcb-42010a800179-rep-66d7f6fb46-2jcgx 1/1 Running 0 2m\r\ndefault pod/pvc-082a54c8-9d41-11e8-afcb-42010a800179-rep-66d7f6fb46-j5tsk 1/1 Running 0 2m\r\ndefault pod/pvc-082a54c8-9d41-11e8-afcb-42010a800179-rep-66d7f6fb46-q9kww 1/1 Running 0 2m\r\ndefault pod/pvc-7030ae5f-9d40-11e8-afcb-42010a800179-ctrl-766678794-jtltg 2/2 Running 0 6m\r\ndefault pod/pvc-7030ae5f-9d40-11e8-afcb-42010a800179-rep-6689868cf4-2pkt4 1/1 Running 0 6m\r\ndefault pod/pvc-7030ae5f-9d40-11e8-afcb-42010a800179-rep-6689868cf4-htdxh 1/1 Running 0 6m\r\ndefault pod/pvc-7030ae5f-9d40-11e8-afcb-42010a800179-rep-6689868cf4-rdtlk 1/1 Running 0 6m\r\ndefault pod/wordpress-7bdfd5557c-5b4nh 1/1 Running 4 6m\r\ndefault pod/wordpress-mysql-bcc89f687-zlt5q 1/1 Running 0 2m\r\nkube-system pod/event-exporter-v0.2.1-5f5b89fcc8-wprbm 2/2 Running 0 11m\r\nkube-system pod/fluentd-gcp-scaler-7c5db745fc-s9mp9 1/1 Running 0 11m\r\nkube-system pod/fluentd-gcp-v3.0.0-49vq6 2/2 Running 0 9m\r\nkube-system pod/fluentd-gcp-v3.0.0-kfjsx 2/2 Running 0 9m\r\nkube-system pod/fluentd-gcp-v3.0.0-tg5hh 2/2 Running 0 9m\r\nkube-system pod/heapster-v1.5.3-76f7f5f544-z7xk9 3/3 Running 0 10m\r\nkube-system pod/kube-dns-788979dc8f-2chf4 4/4 Running 0 11m\r\nkube-system pod/kube-dns-788979dc8f-ls4ln 4/4 Running 0 10m\r\nkube-system pod/kube-dns-autoscaler-79b4b844b9-8745z 1/1 Running 0 11m\r\nkube-system pod/kube-proxy-gke-ashish-ranjan-default-pool-f0958e58-8866 1/1 Running 0 11m\r\nkube-system pod/kube-proxy-gke-ashish-ranjan-default-pool-f0958e58-8fh5 1/1 Running 0 11m\r\nkube-system pod/kube-proxy-gke-ashish-ranjan-default-pool-f0958e58-9jjf 1/1 Running 0 11m\r\nkube-system pod/l7-default-backend-5d5b9874d5-k9mn8 1/1 Running 0 11m\r\nkube-system pod/metrics-server-v0.2.1-7486f5bd67-wlnlg 2/2 Running 0 10m\r\nopenebs pod/maya-apiserver-68c98fdb76-5bt2z 1/1 Running 0 7m\r\nopenebs pod/openebs-provisioner-5569654c96-4n4hp 1/1 Running 0 7m\r\nopenebs pod/openebs-snapshot-operator-5f7c4d9bd8-shk58 2/2 Running 0 7m\r\nNAMESPACE NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE\r\ndefault service/kubernetes ClusterIP 10.55.240.1 <none> 443/TCP 12m\r\ndefault service/pvc-082a54c8-9d41-11e8-afcb-42010a800179-ctrl-svc ClusterIP 10.55.251.84 <none> 3260/TCP,9501/TCP 2m\r\ndefault service/pvc-7030ae5f-9d40-11e8-afcb-42010a800179-ctrl-svc ClusterIP 10.55.253.18 <none> 3260/TCP,9501/TCP 6m\r\ndefault service/wordpress LoadBalancer 10.55.253.170 104.154.224.12 80:31392/TCP 6m\r\ndefault service/wordpress-mysql ClusterIP None <none> 3306/TCP 2m\r\nkube-system service/default-http-backend NodePort 10.55.243.156 <none> 80:30045/TCP 11m\r\nkube-system service/heapster ClusterIP 10.55.248.200 <none> 80/TCP 11m\r\nkube-system service/kube-dns ClusterIP 10.55.240.10 <none> 53/UDP,53/TCP 11m\r\nkube-system service/metrics-server ClusterIP 10.55.244.66 <none> 443/TCP 11m\r\nopenebs service/maya-apiserver-service ClusterIP 10.55.240.121 <none> 5656/TCP 7m\r\nNAMESPACE NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE\r\ndefault persistentvolumeclaim/mysql-pv-claim Bound pvc-082a54c8-9d41-11e8-afcb-42010a800179 20Gi RWO openebs-standard 2m\r\ndefault persistentvolumeclaim/wp-pv-claim Bound pvc-7030ae5f-9d40-11e8-afcb-42010a800179 20Gi RWO openebs-standard 6m\r\n```\r\n\r\nIf all of the pods are running, check the external IP of the WordPress load balancer. For example, in my case it is **104.154.224.12**. Open the your web browser IP if you are redirected to your WordPress setup page. Congratulations! Your WordPress is now ready for you to start your blog!\r\n\r\nHappy blogging!\r\n\r\n### Proof:\r\n\r\n![wordpress](/images/blog/wordpress.png)\r\n","slug":"setting-up-wordpress-and-sql-with-openebs"},{"id":47,"title":"How to start contributing to mayactl\r","author":"Sumit Lalwani\r","author_info":"Sumit Lalwani is a Software Engineer at Mayadata. He is a Kubernetes enthusiast and passionate about open source, containers, cloud, and arm. He loves to learn and code.\r","date":"14-08-2018\r","tags":["Docker"," OpenEBS"," Kubernetes"],"excerpt":"mayactl is the command line tool for interacting with OpenEBS volumes. mayactl is not used/required while provisioning or managing the OpenEBS volumes, but it is currently used while debugging and troubleshooting.\r","content":"\r\n## What is mayactl?\r\n\r\n- mayactl is the command line tool for interacting with OpenEBS volumes. mayactl is not used/required while provisioning or managing the OpenEBS volumes, but it is currently used while debugging and troubleshooting.\r\n- mayactl is the client like kubectl which requests to maya-apiserver to get specific information whereas kubectl requests to Kubernetes apiserver to get specific information.\r\n- mayactl helps retrieve storage related information for debugging/troubleshooting storage related issues. mayactl provides various commands to create volume, get volume details and create, list and revert snapshot and many more.\r\n\r\nTo know more about the mayactl visit:\r\n\r\n[https://docs.openebs.io/docs/next/mayactl.html](https://docs.openebs.io/docs/next/mayactl.html)\r\n\r\n## OpenEBS Architecture\r\n\r\n![OpenEBS Architecture](/images/blog/openebs-architecture.png)\r\n\r\nTo know about the OpenEBS visit: [https://docs.openebs.io/docs/next/introduction.html](https://docs.openebs.io/docs/next/introduction.html)\r\n\r\n### These few things are required to be installed in your system (with Ubuntu host) to run mayactl\r\n\r\n1. **Docker**\r\n\r\n- To install docker run these commands\r\n\r\n  ```\r\n  sudo apt-get update\r\n  sudo apt-get install apt-transport-https ca-certificates curl software-properties-common\r\n  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\r\n  sudo add-apt-repository \\\r\n    \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\r\n    $(lsb_release -cs) \\\r\n    stable\"\r\n  sudo apt-get update\r\n  sudo apt-get install docker.io\r\n  ```\r\n\r\n- Or you can visit the official docker website to install docker\r\n\r\n[https://docs.openebs.io/docs/next/mayactl.html](https://docs.openebs.io/docs/next/mayactl.html)\r\n\r\n2. **open-iscsi package**\r\n\r\n- To install open-iscsi package run these commands\r\n\r\n  ```\r\n  sudo apt-get update\r\n  sudo apt-get install open-iscsi\r\n  sudo service open-iscsi restart\r\n  ```\r\n\r\n3. **Golang**\r\n\r\n- To install golang, visit the official golang website: [https://golang.org/doc/install](https://golang.org/doc/install)\r\n\r\n4. **minikube**.\r\n\r\n- To install minikube, run these commands:\r\n\r\n  ```\r\n  # minikube requires virtualbox to be installed as a dependency\r\n\r\n  sudo apt-get install virtualbox virtualbox-ext-pack\r\n  sudo apt-get update\r\n\r\n  # minikube version 0.24.0\r\n\r\n  curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.24.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/\r\n  ```\r\n\r\n5. **Kubectl**.\r\n\r\n- Run these commands to install Kubectl:\r\n\r\n  ```\r\n  curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.8.0/bin/linux/amd64/kubectl\r\n  chmod +x ./kubectl\r\n  sudo mv ./kubectl /usr/local/bin/kubectl\r\n  ```\r\n\r\n### How do I run mayactl in a local machine for development purposes?\r\n\r\n1. Open the openebs repo ( [https://github.com/openebs/openebs](https://github.com/openebs/openebs)) and star the openebs repo.. 😄 (Not Mandatory)\r\n\r\n2. Fork the openebs/openebs and openebs/maya repositories into your GitHub account.\r\n\r\n- Visit and click on the fork option (both repositories)\r\n\r\n[a) openebs/openebs](https://github.com/openebs/openebs)\r\n\r\n[OpenEBS is containerized block storage written in Go for cloud native and other environments w/ per container (or pod)…](https://github.com/openebs/openebs)[github.com](https://github.com/openebs/openebs)\r\n\r\n[b) openebs/maya](https://github.com/openebs/maya)\r\n\r\n[maya — OpenEBS Maya extends Kubernetes capabilities to orchestrate CAS containers.](https://github.com/openebs/maya)[github.com](https://github.com/openebs/maya)\r\n\r\n3. Clone the openebs and maya repositories inside your gopath. Then run these commands to clone:\r\n\r\n```\r\n# if directories not present create the directories in same hierarchy\r\n\r\ncd $GOPATH/src/github.com/openebs\r\ngit clone https://github.com/<your-github-username>/openebs.git\r\ngit clone https://github.com/<your-github-username>/maya.git\r\n```\r\n\r\n4. Run the single node cluster using the minikube command.\r\n\r\n```\r\nminikube start --vm-driver=none\r\n\r\n# To check whether minikube is configured and running\r\n\r\nminikube status\r\n```\r\n\r\n5. Install OpenEBS by executing these commands:\r\n\r\n```\r\ncd $GOPATH/src/github.com/openebs/openebs/k8s/\r\nkubectl apply -f openebs-operator.yaml\r\nkubectl apply -f openebs-storageclasses.yaml\r\n```\r\n\r\n![kubernetes commands](/images/blog/install-openebs-by-commands.png)\r\n\r\n6. Now we have the openebs-provisioner and maya-apiserver running as a pod in the Kubernetes (minikube) cluster.\r\n\r\n- To get the pods, run this command:\r\n\r\n  ```\r\n  kubectl get pods\r\n  NAME READY STATUS RESTARTS AGE\r\n  maya-apiserver-7b8d5496cc-kgmnn 1/1 Running 0 3m\r\n  openebs-provisioner-6797d44769-phnnc 1/1 Running 2 3m\r\n  ```\r\n\r\n7. To run/access mayactl, you will need to login/execute into the maya-apiserver pod on Kubernetes.\r\n\r\n- Find out the name of the maya api-server pod by running the following commands:\r\n\r\n  ```\r\n  kubectl get pods\r\n\r\n  # It will access the bash shell inside the pod\r\n\r\n  kubectl exec -it <maya-apiserver-podname> /bin/bash\r\n  ```\r\n\r\n8. Now you can run all mayactl commands as you are inside the maya-apiserver pod.\r\n\r\n- Try running these commands after exececute/login into the pod.\r\n\r\n  ```\r\n  mayactl -help\r\n  ```\r\n\r\nGo through the issues ([https://github.com/openebs/maya/issues](https://github.com/openebs/maya/issues)) and start modifying the mayactl code, located in $GOPATH/src/github.com/openebs/maya/cmd/mayactl, and start contributing to OpenEBS. Also, you can start contributing by writing a small unit test code in mayactl. For every PR you raise, you will also receive goodies from the OpenEBS team. 😃\r\n\r\n**How do I test the changes made in mayactl?**\r\n\r\n1. After modifying the mayactl code, go into the maya directory, i.e $GOPATH/src/github.com/openebs/maya, and run these commands:\r\n\r\n```\r\n# run this if not currently in maya directory\r\n\r\ncd $GOPATH/src/github.com/openebs/maya\r\n\r\n# this will create the mayactl binary into the bin folder inside maya directory\r\n\r\nmake mayactl\r\n```\r\n\r\n2. After the build has been completed, copy the mayactl binary from the bin folder to the maya-apiserver pod using the command:\r\n\r\n```\r\nkubectl cp $GOPATH/src/github.com/openebs/maya/bin/maya/mayactl <maya-apiserver-podname>:/tmp/\r\n```\r\n\r\n3. Login/execute into the maya-apiserver pod to run the mayactl binary.\r\n\r\n```\r\nkubectl exec -it <maya-apiserver-podname> /bin/bash\r\ncd /tmp/\r\n```\r\n\r\n4. Here the mayactl binary you copied is shown.\r\n\r\n- To run that binary, use the following command:\r\n\r\n  ```\r\n  ./mayactl -help\r\n  ```\r\n\r\nNow you can easily see the changes you made in the mayactl command line tool. You are also now ready to raise the PR’s. 😃\r\n\r\n**Reference:**\r\n\r\n- [https://www.youtube.com/watch?v=yzMEYT-yzRU](https://www.youtube.com/watch?v=yzMEYT-yzRU)\r\n- [https://docs.openebs.io/docs/next/introduction.html](https://docs.openebs.io/docs/next/introduction.html?__hstc=216392137.2d2e61b1b8f85b3675bfaef604437f8a.1580205967521.1580205967521.1580205967521.1&__hssc=216392137.1.1580205967522&__hsfp=2262740235)\r\n","slug":"how-to-start-contributing-to-mayactl"},{"id":48,"title":"ARMing Kubernetes with OpenEBS \\#1\r","author":"Murat Karslioglu\r","author_info":"VP @OpenEBS & @MayaData_Inc. Lives to innovate! Opinions my own!\r","date":"02-08-2018\r","tags":["Arm64"," Kubernetes"," Lepotato"," Owncloud"," Solutions"],"excerpt":"Running stateful containers on Le Potato. Why not! It’s fun and extremely efficient! I know many people (including me) used to run ownCloud on their desktop computers.\r","content":"\r\n## Running stateful containers on Le Potato\r\n\r\nWhy not! It’s fun and extremely efficient! I know many people (including me) used to run ownCloud on their desktop computers. I have finally decided to retire my old desktop computer and was looking ways to keep my ownCloud instance alive and maybe even improve it a bit.\r\n\r\nFirst, I ran **ownCloud** on GKE Kubernetes cluster and came to a decison quickly that it’s not what I needed:\r\n\r\n- I am used to the speed of USB 3.0 for large uploads when needed. I wanted to keep the option of (50MB+/sec) using USB. Which means, if I choose a budget ARM SoC route, then the board should have **non-shared bandwidth** for LAN and USB.\r\n- 4 node GKE cluster using n1-standard-1 + 200GB storage costs ~$225/month, I would rather use Dropbox for $20/month = 240$/year (still doesn’t give me what I need).\r\n- **Low-power**, possibly solar-powered. I’ll share my power consumption findings in the series of blog articles.\r\n- Everything on **Kubernetes** is more fun, right?\r\n\r\nI was looking into [Raspberry Pi 3 Model B](http://amzn.to/2GMjYt4) option and after a quick trial realized that shared USB/Ethernet bandwidth and lack of MicroSD UHS support is not going to give me the performance I need and found the **AML-S905X-CC Le Potato** board.\r\n\r\nLibre Computer Board, code name Le Potato, is designed as a drop in hardware replacement for the Raspberry Pi 3 Model B (In fact it has the exact same form factor and port locations) and offers faster performance, more memory, lower power, higher IO throughput, 4K capabilities, open market components, improved media acceleration and removal of the vendor locked-in interfaces. This platform uses the latest technologies and is built upon proven long-term available chips. It is supported by upstream Linux and has a downstream development package based on Linux 4.9 LTS that offers ready-to-go 4K media decoding, 3D acceleration, and more.\r\n\r\nMost importantly, Le Potato has almost double the performance of RPi 3 with 2GB memory and 50% faster CPU and GPU. It also has non-shared bandwidth for LAN and USB and MicroSD UHS support. I was able to get over 70MB/s read&write performance vs ~15–20MB/s on RPi 3. I also noticed that even under heavy load Le Potato has lower power consumption compared to Rpi 3.\r\n\r\nIt sounds too good to be true, right? Since Le Potato is new, I’ve decided to run both side-to-side and publish my experience.\r\n\r\nIn this blog post, I will focus on setting up a Kubernetes on a Le Potato Clusters, install ownCloud on top, and compare it to Rpi 3.\r\n\r\n## Prerequisites\r\n\r\n### Hardware\r\n\r\n- 4 x [Libre Computer Board AML-S905X-CC (Le Potato) 64-bit (2GB)](http://amzn.to/2ptxGJS) $45\r\n- 4 x 32GB MicroSD Card ([Samsung 32GB 95MB/s MicroSD](http://amzn.to/2uayTe4) $9.99)\r\n- 4 x 128GB USB Drive ([Samsung 128GB USB 3.0 Flash Drive Fit (MUF-128BB/AM)](http://amzn.to/2psgFPC) $39)\r\n- 1 x Desktop Switch ([TP-link 5-Port Gigabit Desktop Switch](http://amzn.to/2u3TCQN) $29.99)\r\n- 1 x Active USB Hub ([Generic 7-Port USB Hub with ON/OFF Switch](http://amzn.to/2IBIZaO) $5.64)\r\n- 4 x short USB to Micro USB cable ([ZiBay Micro USB Short Sync Cable for Select Models/Device, 7-Inch — Pack of 5](http://amzn.to/2G8Doub) $6.99)\r\n- For comparison: 4 x [Raspberry Pi 3 Model B](http://amzn.to/2GMjYt4) $34.62\r\n\r\n### Optional:\r\n\r\n- Short cables make it look clean and nice:\r\n  6-inch CAT6 flat network cables ([5-PACK 6-inch CAT6 Network UTP Ethernet RJ45 Flat-Design](http://amzn.to/2GcT5AV) $12.48)\r\n- One touchscreen to access the cluster when nothing else available:\r\n  1x 3.5 inch TFT Touch Screen ([kuman 3.5 Inch 480×320 TFT Touch Screen Monitor for Raspberry Pi](http://amzn.to/2pwR9tt) $19.39)\r\n- I also build a mobile version to run in my car using this with a Tmobile line ([SIM800 Module GSM GPRS Expansion Board UART V2.0](http://amzn.to/2GLBeyE) $25.99)\r\n\r\n### Software components used\r\n\r\n- [Armbian 5.38 Ubuntu Xenial](https://dl.armbian.com/lepotato/) (for Le Potato)\r\n- [Raspbian Stretch Lite](https://www.raspberrypi.org/downloads/raspbian/) 2017–11–29 (for Rpi 3)\r\n- [Etcher](https://etcher.io/) v1.3.1\r\n- Kubernetes v1.9.2+\r\n- OpenEBS 0.5.3 arm64\r\n- ownCloud\r\n\r\nI will start with Le Potato and compare against Raspberry Pi 3 on my next blog.\r\n\r\n### Flash Le Potato Armbian image on SD Cards\r\n\r\n**Armbian** provides Debian and Ubuntu based builds for ARM development boards. Armbian Ubuntu is pretty much same as Ubuntu, except the desktop interface. Armbian uses the Xfce desktop environment, which is a lighter than Gnome or KDE. Its main advantage is its speed, and it’s ideal for systems with 256 MB to 512 MB of RAM. And, I plan to disable desktop anyways.\r\n\r\nDownload the [Armbian Ubuntu image](https://dl.armbian.com/lepotato/Ubuntu_xenial_next_desktop.7z) from the link [here](https://dl.armbian.com/lepotato/), extract and burn it to your SD cards using Etcher.\r\n\r\n![Etcher flashing](https://cdn-images-1.medium.com/max/800/0*XI8xSg4dCl_IWvbz.png)\r\n\r\nPlug the SD card into your Le Potato board and power on.\r\n\r\n![Terminal Window](https://cdn-images-1.medium.com/max/800/0*ojAbBScZY7giAV7b.jpg)\r\n\r\nLogin as `root` and use password `1234`. You will be prompted to change this password at first login. Next, you will be asked to create a normal user account that is sudo enabled.\r\n\r\n### Prepare Armbian host\r\n\r\nAfter reboot, you will auto login to your host with the new user you have created.\r\n\r\n![Armbian Le Potato](https://cdn-images-1.medium.com/max/800/0*UOLgX8I0Oz9hw7I8.jpg)\r\n\r\nChange the hostname and set static IP by using armbian-config utility:\r\n\r\n`sudo armbian-config`\r\n\r\n![armbian-config utility](https://cdn-images-1.medium.com/max/800/0*s8fjc1-L-9pkDzRE.png)\r\n\r\nDisable swap by running the following commands:\r\n\r\n```\r\nsudo systemctl disable zram-configsudo swapoff -a\r\n```\r\n\r\nAnd also comment out the reference to swap in /etc/fstab file:\r\n\r\n```\r\nsudo vi /etc/fstab\r\n```\r\n\r\nAfter reboot, confirm that swap space is disabled by running the following command. It should return empty.\r\n\r\n```\r\nsudo swapon — summary\r\n```\r\n\r\nInstall Golang 1.10:\r\n\r\n```\r\nwget https://dl.google.com/go/go1.10.linux-arm64.tar.gz\r\nsudo tar -C /usr/local -xzf go1.10.linux-arm64.tar.gz\r\nexport PATH=$PATH:/usr/local/go/bin\r\nmkdir go\r\nexport GOPATH=”$HOME/go”\r\ngo get github.com/kubernetes-incubator/cri-tools/cmd/crictl\r\n```\r\n\r\nRepeat all the steps above on all your nodes.\r\n\r\n#### Install Docker on Armbian Ubuntu (arm64)\r\n\r\nRun the following command to install Docker on all nodes. The second line is to use Docker as a non-root user, use your username instead of mine below (murat):\r\n\r\n```\r\ncurl -sL https://get.docker.com | sh\r\nsudo usermod murat -aG docker\r\n```\r\n\r\nSuccessful installation would look like below:\r\n\r\n```\r\nmurat@kubenode1:~$ curl -sL https://get.docker.com | sh\r\n # Executing docker install script, commit: 02d7c3c\r\n + sudo -E sh -c apt-get update -qq >/dev/null\r\n + sudo -E sh -c apt-get install -y -qq apt-transport-https ca-certificates curl >/dev/null\r\n + sudo -E sh -c curl -fsSL “https://download.docker.com/linux/ubuntu/gpg\" | apt-key add -qq →/dev/null\r\n + sudo -E sh -c echo “deb [arch=arm64] https://download.docker.com/linux/ubuntu xenial edge” > /etc/apt/sources.list.d/docker.list\r\n + [ ubuntu = debian ]\r\n + sudo -E sh -c apt-get update -qq >/dev/null\r\n + sudo -E sh -c apt-get install -y -qq — no-install-recommends docker-ce >/dev/null\r\n + sudo -E sh -c docker version\r\nClient:\r\n Version: 18.02.0-ce\r\n API version: 1.36\r\n Go version: go1.9.3\r\n Git commit: fc4de44\r\n Built: Wed Feb 7 21:11:48 2018\r\n OS/Arch: linux/arm64\r\n Experimental: false\r\n Orchestrator: swarm\r\nServer:\r\n Engine:\r\n Version: 18.02.0-ce\r\n API version: 1.36 (minimum version 1.12)\r\n Go version: go1.9.3\r\n Git commit: fc4de44\r\n Built: Wed Feb 7 21:09:57 2018\r\n OS/Arch: linux/arm64\r\n Experimental: false\r\nIf you would like to use Docker as a non-root user, you should now consider\r\nadding your user to the “docker” group with something like:\r\nsudo usermod -aG docker murat\r\nRemember that you will have to log out and back in for this to take effect!\r\nWARNING: Adding a user to the “docker” group will grant the ability to run\r\n containers which can be used to obtain root privileges on the\r\n docker host.\r\n Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface\r\n for more information.\r\n```\r\n\r\nRepeat all the steps above on all your nodes.\r\n\r\n#### Install Kubernetes on Armbian for Le Potato\r\n\r\nRun the following command to install Kubeadm on all nodes:\r\n\r\n```\r\ncurl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add — && \\\r\n echo “deb http://apt.kubernetes.io/ kubernetes-xenial main” | sudo tee /etc/apt/sources.list.d/ kubernetes.list && \\\r\n sudo apt-get update -q && \\\r\n sudo apt-get install -qy kubeadm\r\n```\r\n\r\nRepeat all the steps above on all your nodes.\r\n\r\n#### Initialize Kubernetes master node\r\n\r\nInitialize your master K8s node:\r\n\r\n```\r\nsudo kubeadm init — pod-network-cidr=10.20.0.0/24 — apiserver-advertise-address=10.10.0.131\r\n```\r\n\r\nBy default, token expires in 24h. If you need it longer, then you can add `— token-ttl=0` to the end of the command above to generate token that does not expire.\r\n\r\nThis step may take around 10 minutes and after that, you will see a summary like below:\r\n\r\n```\r\n…\r\nYour Kubernetes master has initialized successfully!\r\nTo start using your cluster, you need to run the following as a regular user:\r\nmkdir -p $HOME/.kube\r\n sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\r\n sudo chown $(id -u):$(id -g) $HOME/.kube/config\r\nYou should now deploy a pod network to the cluster.\r\n Run “kubectl apply -f [podnetwork].yaml” with one of the options listed at:\r\n https://kubernetes.io/docs/concepts/cluster-administration/addons/\r\nYou can now join any number of machines by running the following on each node\r\nas root:\r\nkubeadm join — token 17c6f2.bd9fa915e6a2fcfb 10.10.0.131:6443 — discovery-token-ca-cert-hash sha256:b4995d14fc8995d5ac271e49772b1cf5aa9fee48fa2729fd4ca7fefbbb0564ac\r\n```\r\n\r\nRun the following:\r\n\r\n```\r\nmkdir -p $HOME/.kube\r\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\r\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\r\n```\r\n\r\nDeploy a pod network to the cluster. I used flannel, you can see your other options [here](https://kubernetes.io/docs/concepts/cluster-administration/addons/).\r\n\r\n```\r\nsudo sysctl net.bridge.bridge-nf-call-iptables=1\r\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\r\n```\r\n\r\nBy default, pods cannot be scheuled on the master node. If you want to be able to schedule pods on the master, e.g. for a single-machine Kubernetes cluster for development, run:\r\n\r\n```\r\nkubectl taint nodes — all node-role.kubernetes.io/master-\r\n```\r\n\r\nAs soon as the pod network has been installed, you can continue by joining your nodes.\r\n\r\nTo confirm that kube-dns pod is up run the command below and check the output:\r\n\r\n```\r\nmurat@kubenode1:~$ kubectl get pods — all-namespaces\r\n NAMESPACE NAME READY STATUS RESTARTS AGE\r\n kube-system etcd-kubenode1 1/1 Running 0 1m\r\n kube-system kube-apiserver-kubenode1 1/1 Running 0 1m\r\n kube-system kube-controller-manager-kubenode1 1/1 Running 0 1m\r\n kube-system kube-dns-6448b967fc-bc58z 3/3 Running 0 1m\r\n kube-system kube-proxy-h7p6s 1/1 Running 0 1m\r\n kube-system kube-scheduler-kubenode1 1/1 Running 0 1m\r\n [/cce_bash]\r\n```\r\n\r\nNote: If kube-dns is stuck in the Pending state. Follow the steps below to fix it and re init your master. This issue and the solution was mentioned [here](https://github.com/kubernetes/kubernetes/issues/43815).\r\n\r\n```\r\nkubeadm reset\r\nsudo nano /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\r\n```\r\n\r\nRemove the `$KUBELET_NETWORK_ARGS` entry from the ExecStart, save the file, and reload systemd and kube services.\r\n\r\n```\r\nsystemctl daemon-reload\r\nsystemctl restart kubelet.service\r\n```\r\n\r\nInitialize your master K8s node again.\r\n\r\n## Join Kubernetes nodes to the cluster\r\n\r\nYou can now join any number of nodes by running the command with the token generated during the K8s master initialization:\r\n\r\n```\r\nmurat@kubenode2:~$ kubeadm join — token 17c6f2.bd9fa915e6a2fcfb 10.10.0.131:6443 — discovery-token-ca-cert-hash sha256:b4995d14fc8995d5ac271e49772b1cf5aa9fee48fa2729fd4ca7fefbbb0564ac\r\n [preflight] Running pre-flight checks.\r\n [preflight] Some fatal errors occurred:\r\n [ERROR IsPrivilegedUser]: user is not running as root\r\n [preflight] If you know what you are doing, you can make a check non-fatal with ` — ignore-preflight-errors=…`\r\n murat@kubenode2:~$ sudo kubeadm join — token 17c6f2.bd9fa915e6a2fcfb 10.10.0.131:6443 — discovery-token-ca-cert-hash sha256:b4995d14fc8995d5ac271e49772b1cf5aa9fee48fa2729fd4ca7fefbbb0564ac\r\n [preflight] Running pre-flight checks.\r\n [WARNING SystemVerification]: docker version is greater than the most recently validated version. Docker version: 18.03.0-ce. Max validated version: 17.03\r\n [discovery] Trying to connect to API Server “10.10.0.131:6443”\r\n [discovery] Created cluster-info discovery client, requesting info from “https://10.10.0.131:6443\"\r\n [discovery] Requesting info from “https://10.10.0.131:6443\" again to validate TLS against the pinned public key\r\n [discovery] Cluster info signature and contents are valid and TLS certificate validates against pinned roots, will use API Server “10.10.0.131:6443”\r\n [discovery] Successfully established connection with API Server “10.10.0.131:6443”\r\nThis node has joined the cluster:\r\n * Certificate signing request was sent to master and a response\r\n was received.\r\n * The Kubelet was informed of the new secure connection details.\r\n```\r\n\r\nRun `kubectl get nodes` on the master to see this node join the cluster.\r\n\r\nIf you forgot the cluster token, you can generate a new one with the command:\r\n\r\n```\r\nkubeadm token generate\r\n```\r\n\r\nRepeat all the steps above on all your nodes.\r\n\r\n## Install OpenEBS on ARM (Le Potato)\r\n\r\nSimilar to most of the arm based hobby boards, Le Potato doesn’t provide any additional redundancy. Even using a RAID protected external USB device wouldn’t give me protection against node failure unless it’s some form of a shared network storage. They are both way over my affordability requirement. All I need is a replicated block device, so my container can survive a node or USB device failures.\r\n\r\nOpenEBS provides a great solution for modern x64 architecture but currently doesn’t have a build for [arm64](https://en.wikipedia.org/wiki/ARM_architecture#64/32-bit_architecture) (armv8) architecture. Therefore, I’ve opened an issue [here](https://github.com/openebs/openebs/issues/1295) and started working on it myself. I did successfully build OpenEBS images for arm64 architecture from the repo base on the 0.5.3 release and uploaded custom images to my personal docker registry [here](https://hub.docker.com/u/muratkarslioglu/). So, it is work in progress and please use it at your own risk, until it’s merged.\r\n\r\n```\r\nsudo apt-get install -y curl open-iscsi\r\nkubectl apply -f https://raw.githubusercontent.com/muratkars/openebs/lepotato-arm64/k8s/openebs-operator-arm64.yaml\r\nkubectl apply -f https://raw.githubusercontent.com/muratkars/openebs/lepotato-arm64/k8s/openebs-storageclasses.yaml\r\n```\r\n\r\nNow, get the list of storage classes using the below command:\r\n\r\n```\r\n$ kubectl get sc\r\n NAME PROVISIONER AGE\r\n openebs-cassandra openebs.io/provisioner-iscsi 1h\r\n openebs-es-data-sc openebs.io/provisioner-iscsi 1h\r\n openebs-jupyter openebs.io/provisioner-iscsi 1h\r\n openebs-kafka openebs.io/provisioner-iscsi 1h\r\n openebs-mongodb openebs.io/provisioner-iscsi 1h\r\n openebs-percona openebs.io/provisioner-iscsi 1h\r\n openebs-redis openebs.io/provisioner-iscsi 1h\r\n openebs-standalone openebs.io/provisioner-iscsi 1h\r\n openebs-standard openebs.io/provisioner-iscsi 4d\r\n openebs-zk openebs.io/provisioner-iscsi 1h\r\n```\r\n\r\n**Voila…!**\r\n\r\n`openebs-standard` storage class creates 3 replicas. That’s what I will use for my application.\r\n\r\nTo test the OpenEBS installation you can try my Jenkins example here:\r\n\r\n```\r\nkubectl apply -f https://raw.githubusercontent.com/muratkars/openebs/lepotato-arm64/k8s/demo/jenkins/jenkins-arm64.yaml\r\n```\r\n\r\n## Next — Installing containerized OwnCloud on OpenEBS\r\n\r\nFinding right container images to run on arm64 architecture is challenging. On the next article, I will build an OwnCloud container image running on Postgres database and both containers will store their data on OpenEBS persistent volumes.\r\n\r\nMy final goal is to build a mobile OwnCloud cluster installed in my family van, where storage is replicated to another cluster in my home lab.\r\n\r\nStay tuned!\r\n\r\n---\r\n\r\n_Originally published at _[_Containerized Me_](http://containerized.me/arming-kubernetes-with-openebs-1/)_._\r\n","slug":"arming-kubernetes-with-openebs-1"},{"id":49,"title":"Recap of Google Next’18\r","author":"Murat Karslioglu\r","author_info":"No author information","date":"01-08-2018\r","tags":["Cloud Services Platform"," Knative"," Google Next18"," Istio"," OpenEBS"],"excerpt":"This year I have attended a number of tech events and in terms of size, organization, and especially the content — Next ’18 is so far my favorite.\r","content":"\r\n![You know that you are at the right event when you see a familiar face like Mr. Hightower :)](https://lh3.googleusercontent.com/iBQD9nOCN5cmrzn73zLeMoHDdhbTZWa3d4sSC1k1wkudXXL0L0912hrjUe2Bxr3MBTLOM_-LDC-ZrA-zNq8arcTJfD_V6e0pc_A9_oKcm6tAsBnIfqXdTfEbnmb8Qu_PoSyBZkVN)\r\n\r\nThis year I have attended a number of tech events and in terms of size, organization, and especially the content — Next ’18 is so far my favorite.\r\n\r\nNext ’18 was an excellent representation of Google as a company and their culture. Sessions were mostly in Moscone West, but the whole event was spread across Moscone West, the brand new South building, and six other buildings.\r\n\r\n![Next ’18 Event Map](https://lh4.googleusercontent.com/3ojmOPqqjEieE6GxfEjgFxRRv4sIzQpA_x21hFRpj3IRrmy6i7HL4k5FO2zztbwf9b5HJlrzO8BP3bWkOM34gZQdKS5lmLqR0FjmHJr96VIToFfc-SWdIKmlLcMJLz2y_tWPbERn)\r\n\r\nThe floor plan was fun and casual; catering was of “Google Quality” and the security was insane, with metal detectors, police, K9 search dogs, and cameras everywhere. And of course games, fun, and even “Chrome Enterprise Grab n Go” were there in case you needed a loaner laptop to work on — see some pictures at the end. :)\r\n\r\n### **What I learned at the Next ’18 conference**\r\n\r\nFirst of all, a big shout out to all involved in the [**Istio** project](https://istio.io/). It is not a surprise that we see great advocate marketing and support for the Istio 1.0 GA release on social media last week. Istio is a big part of the [**Google’s Cloud Services Platform**](https://cloud.google.com/solutions/cloud-services-platform/)(**CSP**) puzzle.\r\n\r\n![GCSP Dashboard — After deploying my first app in less than 30 seconds.](https://lh4.googleusercontent.com/taoSgNELqkMCnfsqUd84nPfbIATkjucboLYdbzMUWKct5ZFiXb_PZFjoU5KFBc5LZNBz6mhuwHXEpMs49tREabCzrMDCuNTrKniQ4UYuk_i1pNxR08pUHOEjtZ3nxfUOZswcA_xe)\r\n\r\nLater this year, Google is targeting to make all components of their CSP available (in some form). CSP will combine **Kubernetes**, **GKE**, **GKE On-Prem** and **Istio** with Google’s infrastructure, security, and operations to increase velocity, reliability, and manage governance at scale.\r\n\r\nCloud Services Platform will be extensible through an open ecosystem. **Stackdriver Monitoring** and **Marketplace** are the extensions to platform services. [Marketplace](https://console.cloud.google.com/marketplace/browse?filter=solution-type:k8s) already has 27 Kubernetes apps including commonly used components of many environments such as Elasticsearch and Cassandra.\r\n\r\n![CSP Marketplace](https://lh3.googleusercontent.com/esTW1l0iBV-Wvleoosxha1W5KqmA5BQLZ-4jyfb3e0W2j_S5rzqtncJCFA8t6brQc_ZJdF2eVqaXAdhHASBlTq9izYO85SLSZRyE8mbwoB1EiFHTmQdwDHsnTdFm2EDb0i4yefVA)\r\n\r\nUsers will be able to deploy a unified architecture, that spans from their private cloud, using Google CSP to Google’s public cloud. Again, the two most important pieces to this puzzle are managed versions of the open source projects Kubernetes and Istio. To me, the rest of it still feels mostly to be DIY-like quality.\r\n\r\nKnative, Cloud Build, and CD are other significant solutions announced at Next’18.\r\n\r\n### **A new cloud availability zone, this time in your datacenter — which might be in your garage**\r\n\r\nAt first, **GKE on-prem** got me interested. But, after talking to a few Google Cloud Experts again, I felt it’s very early to be seriously considered. You can read others’ thoughts here on [Hacker News](https://news.ycombinator.com/item?id=17602555).\r\n\r\n![Discussions on GKE on-prem](https://lh5.googleusercontent.com/q_0yHazRpRZ9bLptYCw1_GQsmdM8TpbM7xXmZ8nL8nejR3uhVg79bvJokA_BrQ91VfzYYl8OLtQ1Evl5VNJqDwJM3EKwqKFsn_jr99N91hCEa1lkazjMZE3aphRbr21LEc0atqTr)\r\n\r\nGKE on-prem alpha will support **_vSphere 6.5_** only, no bare-metal for now!\r\n\r\nFailover from on-prem -> GKE is something Google team is working on. This means GKE on-prem instance will look like another availability zone (AZ) on a Google Cloud dashboard.\r\n\r\nOther than vSphere dependency, the idea of being able to have an availability zone, local in your data center is really compelling. It is also a very common use-case for [**OpenEBS**](https://openebs.io/) since there is no cloud vendor provided, a cloud-native way of spreading your cloud volumes, EBS, etc. across AZs — we see many community users running web services today using OpenEBS to enable that.\r\n\r\n### **Github and Google Partnership to provide a CI/CD platform**\r\n\r\n**Cloud Build** is Google’s fully managed CI/CD platform that lets you build and test applications in the cloud. Cloud Build is fully integrated with GitHub workflow, simplifies CI processes on top of your GitHub repositories.\r\n\r\n![Me deploying myself on Serverless Cloud Maker :)](https://lh3.googleusercontent.com/Vid2Mpm0eaSATtriAt3eLoDdBvvRcv7WCJeNBKxe_VOhVcbdrmh_nJIn5aiQlnMfEOpywRMhHF7Gnv58Nyu_5MQHoWWfxMCmPYdfDlYlKkiQPldJvHxEk9Qa5BOQBuDQNW-YZ0dc)\r\n\r\nCloud Build features;\r\n\r\n**Multiple environment support** lets developers build, test, and deploy across multiple environments such as VMs, serverless, Kubernetes, or Firebase.\r\n\r\n**Native Docker support** means that deployment to Kubernetes or GKE can be automated by just importing your Docker files.\r\n\r\n**Generous free tier**— 20 free build-minutes per day and up to 10 concurrent builds may be good enough for many small projects.\r\n\r\n**Vulnerability identification** performs built-in package vulnerability scanning for Ubuntu, Debian, and Alpine container images.\r\n\r\n**Build locally or in the cloud** enables more edge usage or GKE on-prem.\r\n\r\n### Serverless — here we are again\r\n\r\n**Knative** is a new open-source project started by engineers from Google, Pivotal, IBM, and a few others. It’s a K8s-based platform to build, deploy, and manage serverless workloads.\r\n\r\n_“The biggest concern on Knative is the dependency on Istio.”_\r\n\r\nTraffic management is critical for serverless workloads. Knative is tied to Istio and can’t take advantage of the broad ecosystem. This means existing external DNS services and cert-managers cannot be used. I believe, Knative still needs some work and not ready for prime-time. If you don’t believe me, read the installation YAML file — I mean the 17K lines “human readable” configuration file ([release.yaml](https://github.com/knative/serving/releases/download/v0.1.0/release.yaml)).\r\n\r\n![](https://lh6.googleusercontent.com/0qn1GCe8B-15DIr5G7eqqbg3FfnOcm58iQ08ZUobrKJ82xIArtNjnSuFS2KOkkEhyGfyTH8pz5_NXZOk87EllIjN4rSVYlyxxmN6iDemZ0AgM_Yd-FMZzMR-nQdCHpFPTIL84hwS)\r\n\r\n### **My take on all of the above — Clash of the Cloud Vendors**\r\n\r\nIf you have been in IT long enough, you could easily see the pattern and predict why some technologies will become more important and why will the others be replaced.\r\n\r\n_“What is happening today in the industry is the battle to become the “Top-level API” vendor.”_\r\n\r\n20–25 years ago hardware was still the king of IT. Brand-name server, network, and storage appliance vendors were ruling in the datacenters. Being able to manage network routers or configure proprietary storage appliances were the most wanted skills. We were talking to hardware…\r\n\r\n20 years ago (in 1998), VMware was founded. VMware slowly but successfully commercialized hypervisors and virtualized the IT. They became the new API to talk to, everything else under that layer became a commodity. We were suddenly writing virtualized drivers, talking software-defined storage and networking — the term “software-defined” was born. Traditional hardware vendors lost the market and momentum!\r\n\r\n12 years ago, the AWS platform was launched. Cloud vendors became the new API that developers wanted to talk to, hypervisors became a commodity. CIO and enterprises that are sucked into the cloud started worrying about the cloud lock-in. Just like the vendor lock-in or hypervisor lock-in, we have experienced before. Technology might be new, but concerns were almost the same.\r\n\r\n4 years ago, Kubernetes was announced and v1.0 released in mid-2015. Finally, an open-source project that threatens all previous, proprietary, vendor managed “Top-level API” that we were using became a majorly adopted container orchestration technology. Although it came from Google, it took off after it got open-sourced and probably would be right to say that so far financially, Red Hat profited most from Kubernetes with their Red Hat OpenShift platform. And now we see somewhat of a battle over APIs to be used in operating applications on Kubernetes, with the RedHat / CoreOS operator framework and other projects including one supported by Google and others such as Rook.io emerging to challenge or extend the framework.\r\n\r\nGoogle Container Engine (**GKE**), Microsoft Azure Container Service (AKS**)**, Amazon Elastic Container Service (**EKS**), IBM Cloud Container Service (**CCS**), and Rackspace Kubernetes-as-a-Service (**KaaS**) are all competing in the hosted Kubernetes space (new vendors expected here).\r\n\r\nThere is enough space to grow in the self-hosted Kubernetes space. GKE on-prem is the validation from Google.\r\n\r\n**Hardware>Virtualization>Cloud>Containers>Serverless???**\r\n\r\nMany of us see **Serverless** as the next step, but it might be too granular to support larger adoption and current limitations validate the claims. It doesn’t scale well for intense workloads.\r\n\r\nOne size doesn’t fit all, there are still traditional use cases that even run on bare-metal and VMs. Same might be true for Serverless. It is not for every workload. Modernizing existing workloads will take time, and we will see who will become the leader of the next “Top-level API”.\r\n\r\nWhat do you think? Who is going to win the clash of the titans? What did you think about Next’18 and Google’s strategy?\r\n\r\nThanks for reading and for any feedback.\r\n\r\n### **Some Next’18 moments from my camera**\r\n\r\n![](https://lh4.googleusercontent.com/ARfwggxkEIm1I-QXUGinQGV0zVQLzaTaQ9WxUEC4nN-xuTUsK0I-Bi4JO9kwyIi6MQYxnu0hBQDxdbkVy5nsTd5oQMEl-JCXRvdWWVhcrbCK3EfM8EegXImT2_Kn0kXeZoHbfLmK)\r\n\r\n![](https://lh5.googleusercontent.com/bUCoD0IKci0QEETmHlcrUN-wOSLFSYsIuR4aG96D3QtZo23_gm10SfBqMzUtHVduFt-XzA4m9mI-sae4ktxJRIG9m9aBUt9VUtG0ytYyjFoh-Q2GbFNlQC7Ry0iBiTiaKUNuKsFd)\r\n\r\n![](https://lh3.googleusercontent.com/Vdr19dKixjLs64xGxB_thJ3D8_-cnMihbC-gH50S5FuFJ13y2UMb42zSQy9Rp2LT9olLP5TPSRb4WPoW71l71NMJoBeK70SiFtYgsDs1l2k2tmLTiqJTlo9ajj0F0xTp4JlkQuF2)\r\n\r\n![](https://lh4.googleusercontent.com/GGkcm_nFqb_gDKJuBJISMI3mueZx6xiBE6R8diM84xEOnYmcSDQVNPaRTbIFgBf-fh1Y_8JcioxxP8g8RzrxYEUJ4Xhw51RMRdXw3aS3fVpbH_mjc_kPUC0pXL3WxXZNlgR3baCb)\r\n\r\n![](https://lh4.googleusercontent.com/seBUEu7ltrIHW3VxY_V5rqekHkLXfLYhR0dZZbsyr8MC-vww-_rGvQA3rPz0kfbqudV-LNAi292BTwNrGIe_KG56Vqr-sHSv-mPlIy8nhnJDQPQKnUj7ohg3uql67RVvqTf-earr)\r\n\r\n![](https://lh6.googleusercontent.com/2BPdWJYXZizBdmFra0GYqedeArDGynas8VsxPkC0FWhyCjUm8A7TYLpPN06hPMmQ1UQ_yPoG8mH91eRjAyQE6sbw4Jo2wjPlsqDVTLEohowMOtSQaEuSWZO0lIntDOeMip75K20P)\r\n\r\n![](https://lh3.googleusercontent.com/esI-PdVDc9sEqPoOkwG4nQhcD_FYSxs8Z1eBiHW9UTBDNO9bbd145X9vwnQgijXHTiz6DUD_bgkz9ViC1C2ukDYtjLaHVAIFlEMPcHmQEWjpKeq3pvEy4HyWXeK65oe61LUMTZ1-)\r\n\r\n![](https://lh5.googleusercontent.com/KtS0m1tRBvjWehJSCSFItgtvDK5IiAEU20aa3GfSK6TmlyPVWjQpjnq_z5OAxsa1-L7PQuNRuiK2ZRX1It-1CrDlqzv1ubwrYaZA_gQQGxsb2rXJCAiQPjZ9GLiqXHZsCess6dYz)\r\n\r\n![](https://lh6.googleusercontent.com/Uee-fb3QJewe05s4AWM2bF6b7MuRI8XgU9r3KfX72RNwVYYecjt5UX15vw1jhk0LoqvgL1MN5yKT5t9Mei6QzI7bohUAKtoQthG02YCr1VXiM4HFB-RRmQB29uuANQNDiq1sGKGe)\r\n\r\n![](https://lh6.googleusercontent.com/OXx7ZGSWDI5z2UnqunkcWtB1MWY5ZtXs3EmruVAqfZo4JiLzhd00hmRkKZi_y2Icv6FV4CJRJW68HK1laKNXCKnGI5A9Z1l53R1BtOiM6dLzjDvecuWLgzPIgir3Q89qxkHt50yo)\r\n\r\n![](https://lh4.googleusercontent.com/LUlB3APRP1t0gEEzaXmPbUxZFKGD1nVHRtdNMoKp7iSTLAZAHXOF3W_VPaZs9-XsLdw54GC2TnjnxGyR_spqek8X5ZLFkWICZpP4oXEzATj4n_vfvLQtr0FNceiT3lKzGKg7oh1f)\r\n\r\n![](https://lh4.googleusercontent.com/AZP7UsS_i0gXvSBRuoDas6D48cBdU9JD3N39C53YEIdJwXARCyEg2sXRSuvOGUSa07o0xZ2UzQc8mLgZxj6EQm8uRLZ3JXVDzEwx6kTT3Vq-eia5OV865zc0q3bq3htEDZxUiIX1)\r\n\r\n![](https://lh4.googleusercontent.com/GkXUs0HYRwS66hSMex7NDDT6Ck0NaxO4VrIHW23GzjrQbRMWDDA4EGwIOwSsg3O8tL_iNuISRywMDuF1u61rZm4fzaBisfUkyo-aPIcCcTk3KwUPunnPwgrV6-oRca0td-eYHxss)\r\n\r\n![](https://lh3.googleusercontent.com/EPOoqoV_b11WJCV9cNJFgAtGfuRyqF3xZpKKoJ46J54wNsrE0kFFp82WFZn_gRoRTSLYPAkFHdFcizdOOBYwk_pL6pUZiy9ld24o-xBHIJZWcLmz_tMSFav77_9fbc2pPbwgnObR)\r\n\r\n![](https://lh5.googleusercontent.com/cbuvmjdXzUEgiSf6BL6jC3-TKAbwf1WASiNfypDXQcmeXLrr6OPhITsEjeEUo1dXtg3OW3YTPNez3XxjaRxeAV_Ox6dTq9XpbwNDqh2-iWiXqWhrgn2o1VIe45xKPGYsxxPluLkw)\r\n\r\n![](https://lh5.googleusercontent.com/wskI0Jy2g9icXoitcNDIp9VChhWlxu9fIDwepnqd0ds_Oq1m8Yt7ZHY8GZ_DvfS8IQcNfsJyBanCPIpp_GUznnzK3b3YBP7F2oV9gsi9k9WyKfwmWGCI4um2SKeNveXy2uaeD-sd)\r\n\r\n![](https://lh5.googleusercontent.com/zeDLw8eZvkjgSfWnUwOkIG_Ze3GmKAwrTH59o37K8XEMXDMcAOtUsOSzfEwP8qF7qgVHEbgCs6YbXyE9loDTZOX4q5JeRe2J4JMMufrD0H6wr-ADk9sMBzRRwgi3iRVjhTCLh0Uy)\r\n\r\n### **Check-out the popular hashtags :**\r\n\r\n[#next18](https://twitter.com/search?q=next18) [#googlenext18](https://twitter.com/search?q=googlenext18) [#knative](https://twitter.com/search?q=knative) [#kubernetes](https://twitter.com/search?q=kubernetes) [#istiomesh](https://twitter.com/search?q=istiomesh)\r\n\r\nAlso check out the keynotes:Keynotes from last week’s[ #GoogleNext18](https://twitter.com/hashtag/GoogleNext18?src=hash) here →[ http://g.co/nextonair](https://t.co/mVuwk0hw4i)\r\n","slug":"recap-of-google-next18"},{"id":50,"title":"Designating OpenEBS pods to run on specific K8S Nodes\r","author":"Ajesh Baby\r","author_info":"Product Manager at MayaData\r","date":"30-07-2018\r","tags":["OpenEBS"," Kubernetes"," Solutions"," Scheduler"," Scheduling"],"excerpt":"OpenEBS does not have a separate scheduler used to manage scheduling pods. Instead, it uses the Kubernetes scheduler for managing the scheduling needs of an administrator.\r","content":"\r\nOpenEBS does not have a separate scheduler used to manage scheduling pods. Instead, it uses the Kubernetes scheduler for managing the scheduling needs of an administrator. Kubernetes provides the following methods for controlling the scheduling pods on cluster nodes:\r\n\r\n- [nodeSelector](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector)\r\n- [Taints and Tolerations](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/)\r\n\r\nFor more details and information about these features, you can refer to the Kubernetes documentation.\r\n\r\nIn this post, I would like to cover the different aspects of how to restrict/control the OpenEBS pods scheduling to a set of specific nodes in the Kubernetes cluster.\r\n\r\nOpenEBS deals with many types of Kubernetes pods throughout its life cycle. These can be broadly categorized into two types, control plane pods and data plane pods. Control plane pods are installed as part of installation of the following OpenEBS components:\r\n\r\n- OpeEBS API Server\r\n- OpenEBS Provisioner\r\n- OpenEBS Snapshot Controller\r\n\r\nData plane pods are installed as part of volume provisioning:\r\n\r\n- Target Pod\r\n- Replica Pods\r\n\r\nFor details on the exact steps of scheduling, see the configuration section [here](https://docs.openebs.io/docs/next/scheduler.html?__hstc=216392137.e7b2938c542eaf0f98426e5d8be4aa84.1579859056424.1579859056424.1579859056424.1&__hssc=216392137.1.1579859056424&__hsfp=3765904294).\r\n\r\nUse case: Let’s consider a scenario in which you have 20 nodes named Node1, Node2 ... Node20. You may want to designate Node1, Node2, Node3 as storage nodes so that all storage pods are scheduled only on these nodes.\r\n\r\nSolution: You can use Kubernetes scheduling methods to achieve this. Below are some of the possible options and their effect on scheduling pods to respective nodes.\r\n\r\n![Storage Pods](/images/blog/storage-pods.png)\r\n\r\nYou may select and use any of the above options based on your unique requirements.\r\n\r\nOption 2 does not necessarily guarantee storage pod scheduling on Node1, Node2 and Node3.\r\n\r\nOption 1, Option 3, and Option 4 will limit the scheduled OpenEBS pods to Node1, Node2 and Node3. Option 3 is my preferred choice, for the following reasons:\r\n\r\n- Other application pods will not be scheduled on my storage nodes, whereas Option 1 does present the possibility of other application pods being scheduled on Node1, Node2, and Node3.\r\n- While scaling the cluster for application deployments, I do not have to worry about changing the policy for storage. If I use option4, I must taint the new nodes with respective applications.\r\n- In this scenario, I am worried only about storage nodes, as these have local disks attached to them. I am not restricted to schedule an application pod deployment on any nodes other than storage nodes.\r\n","slug":"designating-openebs-pods-to-run-on-specific-k8s-nodes"},{"id":51,"title":"OpenEBS 0.6 serves IOs amidst Chaos and much more\r","author":"Kiran Mova\r","author_info":"Contributor and Maintainer OpenEBS projects. Chief Architect MayaData. Kiran leads overall architecture & is responsible for architecting, solution design & customer adoption of OpenEBS.\r","date":"20-07-2018\r","tags":["DevOps"," Kubernetes"," OpenEBS"," Stateful Containers"," Storage"],"excerpt":"We are very excited to announce the availability of OpenEBS version 0.6. I would like to take a few minutes to talk about what has been keeping us busy in making it GA.\r","content":"\r\nWe are very excited to announce the availability of OpenEBS version 0.6. I would like to take a few minutes to talk about what has been keeping us busy in making it GA. We have been making a number of additions to both the design and code in the last few months. In this blog I’ll talk about:\r\n\r\n- Quality leveraging Chaos Engineering\r\n- Framework (CAS Templates) for supporting multiple storage engines\r\n\r\nI won’t talk about our new Storage Engine (cStor) — written in C — which is _almost_ ready. I’ll save that for a later blog.\r\n\r\nBefore going into specifics, I would like to express my sincerest gratitude to the OpenEBS community users and developers who are helping to make OpenEBS the most simple and easy to setup containerized attached storage (CAS) solution available for Kubernetes today — and the most popular open source one as well.\r\n\r\nSince the OpenEBS 0.5 release we have seen so many ways users have deployed OpenEBS many of which we had not envisioned when we started OpenEBS back in 2016. We are working hard to listen to the growing user community — and of course MayaOnline is helping us a bit as well as we learn something from MayaOnline users who are using this free SaaS monitoring and ChatOps integration of their stateful workloads. Along these lines, we have a survey that is running through the end of July that takes 2–3 minutes that has proven helpful; please do fill it out if you have not already and we will even send you some swag: [https://www.surveymonkey.com/r/BRDCCWY](https://www.surveymonkey.com/r/BRDCCWY)\r\n\r\nThe timing of OpenEBS 0.5 was perfect in that it coincided with a take-off in interest in stateful workloads on Kubernetes. Some deployment patterns I’ve encountered just in the last few weeks include:\r\n\r\n- GitLab for internal IT teams\r\n- Kube weekly just featured a step by step blog on this subject: [https://blog.openebs.io/git-freedom-on-kubernetes-3a491dd37cdf](https://blog.openebs.io/git-freedom-on-kubernetes-3a491dd37cdf)\r\n- Data Science training sessions\r\n- Here we are seeing hundreds of pods with stateful workloads spun up and destroyed repeatedly — really a great use case for container attached storage\r\n- Running Minio on OpenEBS which some users have called a happy marriage between OpenEBS block and Minio S3\r\n- We remain huge fans of Minio and are looking forward to more community led collaboration with our almost neighbors\r\n- OpenEBS being deployed as a basic part of DBs on Kubernetes; in particular we are seeing a good amount of NuoDB on OpenShift for example\r\n- The elastic SQL technology of NuoDB seems to resonate with lots and lots of users; we’re pretty proud that using OpenEBS underneath is becoming a common pattern\r\n- And of course many Containers as a Service offerings now include OpenEBS as a default option with more to be announced shortly\r\n\r\nAnd all this adoption means heterogeneity and dynamism.\r\n\r\n## Challenge 1: Kubernetes is resilient amidst Chaos and so must be storage\r\n\r\nBecause OpenEBS is deployed on so many varieties of Kubernetes and our fundamental job is to keep the data safe no matter what — we have been investing heavily in our ability to create these varied environments and their behaviors and to then measure and validate the resilience of OpenEBS as these environments respond to outages and increased load and so forth. We are seeing OpenEBS deployed across lots of varieties including:\r\n\r\n- Native Kubernetes or using Rancher, OpenShift, IBM Cloud Private, GKE, Tectonic, StackPoint Cloud, and others\r\n- Operating Systems -Ubuntu, CentOS, CoreOS and others\r\n- Pod Networking of all types, with Flannel being a favorite\r\n- Various cloud services — AWS EC2 remains the preferred option, with GCE growing in adoption amongst OpenEBS users\r\n\r\nEach combination comes with nuances that are unique and sometimes annoying as well. For example, recently a user on a Cloud Provider saw their nodes shut down frequently and occasional high network latency or packet drops in inter pod networking. Anyone with experience working with Storage Systems knows how detrimental these situations can be for latency-sensitive Stateful Applications.\r\n\r\nWe consciously chose the well-understood and widely used iSCSI protocol as the underlying storage connectivity used by Applications to connect to OpenEBS Volumes. There are many benefits to this architecture, but I will not address those here.\r\n\r\nThere are some annoying pieces when running iSCSI at scale as well. For example, depending on the response from the iSCSI targets and your operating system, there are some quirky things that can happen with iSCSI. The most notorious of these happens when iSCSI backed volumes move into read-only if you are using ext4 under certain conditions. You must then go through the steps for manually recovering the volumes. To address this, we have put together a troubleshooting guide that you can access [here](https://docs.openebs.io/docs/next/readonlyvolumes.html?__hstc=216392137.386b1bc3a48de21192b74b07a4e27366.1580120418429.1580120418429.1580120418429.1&__hssc=216392137.1.1580120418429&__hsfp=3765904294).\r\n\r\nHowever, we wanted to solve as many of these issues as possible with the right approach. We stepped up our use of chaos engineering in our OpenEBS development process. We also extended and open sourced our in-house tooling, and we are starting to see it used more and more by engineers deploying stateful workloads on Kubernetes — whether or not OpenEBS is the underlying storage.\r\n\r\n## Solution : Chaos Engineered OpenEBS, the birth of Litmus.\r\n\r\nIf you would like an introduction to the Litmus project, which we open sourced at KubeCon in Denmark, visit the following link: [https://openebs.io/litmus](https://openebs.io/litmus?__hstc=216392137.386b1bc3a48de21192b74b07a4e27366.1580120418429.1580120418429.1580120418429.1&__hssc=216392137.1.1580120418429&__hsfp=3765904294) or [https://github.com/openebs/litmus](https://github.com/openebs/litmus)\r\n\r\nWe are also working on operators to add additional autonomic function into OpenEBS, leveraging improved metrics and advancements in CSI around node daemonsets and the mount-propagation feature. In the meantime, we use Litmus to increase automated real-world scenario testing to ensure improvements in every release. In this regard, a lot of effort has gone towards beefing up the tests that can simulate Chaos at Node, Network, Storage, RAM, and CPU. These typically contribute to Volume Pods switching nodes and, if not careful, interrupted IOs.\r\n\r\nOf course, this Chaos for Storage Application is something we believe should be applied to stateful workloads and underlying storage both during testing and as a part of a healthy chaos engineering practice. This is what led us to Open Source Litmus.\r\n\r\nOne outcome of our improved chaos engineering and testing is improvements to the resiliency of intra OpenEBS deployment communication. Specifically, we added enhancements to the responses sent by the iSCSI Target to the initiator; overall, this makes OpenEBS more resilient even when Pods are rescheduled unexpectedly and when the environment otherwise changes. You can learn more about these issues in the [release notes](https://github.com/openebs/openebs/releases/tag/v0.6).\r\n\r\nWe expect that the incidence of read-only issues will decrease greatly for the tested scenarios. We are constantly adding more scenarios, workloads and other tooling into Litmus to bolster the Jiva storage engine and other engines to come. Contributions to Jiva are of course always welcome!\r\n\r\n## Challenge 2: The evolving state of the State in Kubernetes!\r\n\r\nIf you regularly monitor storage developments, you will notice that Kubernetes is moving towards CSI and Snapshots are beginning to become a standard. There are enhancements to support Block Volumes and Topology aware Scheduling for Stateful Applications powered by Local PVs, which also benefits other PV types like OpenEBS.\r\n\r\nTo give an example, OpenEBS strongly prefers the case when the OpenEBS Controller Pod (and the application Pod) schedule on nodes where the OpenEBS Replica Pod resides. Currently, we achieve this via Pod/Node Affinity parameters. However, with Topology Aware scheduling, the constructs of pinning are efficiently done via the PV topology parameters.\r\n\r\nThat is just one example of new capabilities that we must now embrace. Features in Kubernetes now transition “quickly” from alpha to beta and the new paradigms/patterns that enter into Kubernetes must be adopted, or you will soon become outdated like the Third Party Resources (TPRs). However, we are not complaining about the pace of progress and continually contribute upstream to Kubernetes itself. We always seek to lend a hand to make Kubernetes an even better platform for storage and stateful workloads.\r\n\r\nNonetheless, the challenge remains. After all, the core of the Orchestration layer in OpenEBS is to deploy and operate the Container Attached Storage solution using Kubernetes native constructs. And the constructs just keep changing!\r\n\r\nLooking at the situation, we decided to step back and think about an architecture that would allow us to minimize the need to make code changes every time Kubernetes changes. For example, some users want to deploy their OpenEBS by specifying Pod Disruption Budges (PDBs) or setting specific Resource Limits for PVs in certain namespaces/users etc. We wondered: how can we embrace these new knobs, settings, and advances without endless code churn? This type of work — effectively upgrading the transmission of the underlying orchestration of OpenEBS — is not easy to do unless you really understand the architecture of OpenEBS. That’s not good — what’s the point of being open source if the code itself is too hard to work with and adjust? Fortunately, Kubernetes has CRDs, which provides a way forward.\r\n\r\n## Solution : Provide templates to Cluster Owners to define and manage the storage infrastructure.\r\n\r\nIn the OpenEBS 0.6 release, we have utilized the power of Kubernetes CRDs to provide a workable solution to introduce pluggable storage engines. OpenEBS now provides a complete workflow for developers and cluster administrators to choose the right storage software and hardware for their unique requirements. The control of the storage infrastructure stays with the cluster owner, and the ability to address a given need in storage lies with the developer. OpenEBS 0.6 brings the initial version of CAS Templates, which are YAMLs that can be scripted by cluster owners, fit into your GitOps, and are associated with Storage Classes.\r\n\r\nWe like the way OpenEBS CAS Templates are shaping up, and we can see many of the cluster owners’ needs being met over time, including enforcing of policies using tools like OPA. I will share more on this in upcoming blogs, but you can glance at them by reading this introductory documentation [here](https://docs.openebs.io/docs/next/storageengine.html?__hstc=216392137.386b1bc3a48de21192b74b07a4e27366.1580120418429.1580120418429.1580120418429.1&__hssc=216392137.1.1580120418429&__hsfp=3765904294). We intend to build upon this improved architectural pattern to do even more than the pluggability of storage engines. As always, we would especially welcome your feedback and use cases.\r\n\r\n### And there is more…\r\n\r\nYou will notice when you look at the release notes or try OpenEBS 0.6 that there are many other enhancements, including:\r\n\r\n- Configuring of OpenEBS for running stateful workloads that span across Availability Zones\r\n- Enabling the management of Snapshots and Clone from kubectl\r\n- Enhancement to mayactl to display volume status\r\n- Improved Integration and Unit Testing coverage\r\n- Enhanced Contributor Guides\r\n\r\nAnd, most importantly, product documentation has been overhauled to provide accessible insights about OpenEBS as well as a process to provide feedback.\r\n\r\nAs mentioned above, our next release also enables users to try out _cStor — a storage engine_ that is more efficient in terms of performance and capacity management. It also reduces the number of containers required to run OpenEBS. If you are interested in taking a look, please get in touch as we have some alpha users of cStor now.\r\n\r\nWith its strong community of users, developers, and partners building us into their solutions, it feels like OpenEBS is nearly unstoppable. As always, we look forward to your feedback and suggestions on this release and the direction that you want to see OpenEBS move going foward. Please reach out to us on Slack or add comments below. [https://slack.openebs.io](https://slack.openebs.io/?__hstc=216392137.386b1bc3a48de21192b74b07a4e27366.1580120418429.1580120418429.1580120418429.1&__hssc=216392137.1.1580120418429&__hsfp=3765904294)/\r\n\r\nFinally, if you have not done so yet, claim your free access to [MayaOnline](https://mayaonline.io/). You will be surprised by how easy it can be to visualize and manage your storage needs.\r\n\r\n[Public domain](https://creativecommons.org/publicdomain/mark/1.0/).\r\n","slug":"openebs-06-serves-ios-amidst-chaos-and-much-more"},{"id":52,"title":"How do I run a litmus test to compare storage performance on Kubernetes\r","author":"Karthik Satchitanand\r","author_info":"Karthik has been into the Design and Development of tools for infrastructure as code, software testing performance & benchmarking & chaos engineering.\r","date":"16-07-2018\r","tags":["Benchmarking"," Kubernetes"," Litmus"," OpenEBS"," Solutions"," Chaos Engineering"],"excerpt":"Ever so often, developers and devops engineers building or managing stateful applications on Kubernetes are on the lookout for for suitable storage options which serves their application’s specific needs.\r","content":"\r\nThis article belongs to a #HowDoI series on Kubernetes and Litmus\r\n\r\nEver so often, developers and devops engineers building or managing stateful applications on Kubernetes are on the lookout for for suitable storage options which serves their application’s specific needs. The emphasis could be on high-availability, provisioning ease, performance etc.., **Litmus** (as detailed in this [article](https://blog.openebs.io/litmus-release-a-chaos-monkey-on-your-kubernetes-stateful-workloads-6345e01b637d)), is an attempt to arm them with the necessary info to make the right choice. One of the important storage tests is to simulate application workloads or multiply its effect using synthetic workload generators like fio. In this article, we list the steps to run a fio-based benchmark test using litmus\r\n\r\n![Evaluating storage performance w/ Litmus](https://cdn-images-1.medium.com/max/800/1*zRIZ9WjL7S0wq6Sp_IbzCw.png)\r\n\r\n## PRE-REQUISITES\r\n\r\n- At least a single-node Kubernetes cluster with the necessary disk resources, mounted on the node. (**_Note_**: _Certain storage solutions need minimum Kubernetes versions from which they are supported. For ex: Local PVs are beta from 1.10, OpenEBS needs 1.7.5+_)\r\n- Storage operator installed (typically, this includes control-plane elements like the static/dynamic provisioners, storage classes and other elements) with appropriate references to the node & disk resources (**_For example_**: _This may involve storage pool creation OR updating disk and node details in the static provisioners etc.,_)\r\n\r\n## STEP-1: Setup Litmus essentials on the Kubernetes cluster\r\n\r\n- Obtain the Litmus Git repository via a Git Clone operation on the Kubernetes master/Control machine used to manage cluster & set up the Litmus namespace, service account & clusterrolebinding by applying _rbac.yaml_\r\n\r\n```\r\nkarthik_s@cloudshell:~ (strong-eon-153112)$ git clone https://github.com/openebs/litmus.git\r\n\r\nCloning into 'litmus'...\r\n\r\nremote: Counting objects: 2627, done.\r\n\r\nremote: Compressing objects: 100% (16/16), done.\r\n\r\nremote: Total 2627 (delta 2), reused 9 (delta 2), pack-reused 2609\r\n\r\nReceiving objects: 100% (2627/2627), 10.50 MiB | 4.23 MiB/s, done.\r\n\r\nResolving deltas: 100% (740/740), done.\r\n\r\nkarthik_s@cloudshell:~ (strong-eon-153112)$ cd litmus/\r\n\r\nkarthik_s@cloudshell:~/litmus (strong-eon-153112)$ kubectl apply -f hack/rbac.yaml\r\n\r\nnamespace \"litmus\" created\r\n\r\nserviceaccount \"litmus\" created\r\n\r\nclusterrole \"litmus\" created\r\n\r\nclusterrolebinding \"litmus\" created\r\n```\r\n\r\n- Create a configmap resource out of the cluster’s config file, typically at _~/.kube/config_, _/etc/kubernetes/admin.conf_ or elsewhere depending on the type of cluster or setup method\r\n\r\n(**Note**: _Copy the config file to admin.conf before creating the configmap out of it, as the litmus job expects this path_)\r\n\r\n```\r\nkarthik_s@cloudshell:~ (strong-eon-153112)$ kubectl create configmap kubeconfig --from-file=admin.conf -n litmus\r\n\r\nconfigmap \"kubeconfig\" created\r\n```\r\n\r\n## STEP-2: Update the Litmus test job as per need\r\n\r\nThe litmus fio test job allows the developer to specify certain test parameters via ENV variables, such as the following:\r\n\r\n- The litmus fio test job allows the developer to specify the storage provider (PROVIDER_STORAGE_CLASS) and the node on which to schedule the application. (APP_NODE_SELECTOR)\r\n- The desired fio profile can also be specified. Currently, litmus supports simple [test-templates](https://github.com/ksatchit/litmus/tree/fio_test/tools/fio/templates), and is expected to grow to include multiple standard profiles. (FIO_TEST_PROFILE)\r\n- Certain simple test parameters such as the size of the test file (FIO_SAMPLE_SIZE) and duration of I/O (FIO_TESTRUN_PERIOD) can be specified as well, while the core I/O params continue to be housed in the templates.\r\n- The developer can choose to specify a comma-separated list of pods whose logs need to be collected for analysis of results, as well as the logs’ location on the host in the spec for the logger.\r\n\r\n```\r\nkarthik_s@cloudshell:~ (strong-eon-153112)$ cd litmus/tests/fio/\r\n\r\nkarthik_s@cloudshell:~/litmus/tests/fio (strong-eon-153112)$ cat run_litmus_test.yaml\r\n\r\n***\r\n\r\napiVersion: batch/v1\r\n\r\nkind: Job\r\n\r\nmetadata:\r\n\r\nname: litmus\r\n\r\nnamespace: litmus\r\n\r\nspec:\r\n\r\ntemplate:\r\n\r\n      metadata:\r\n\r\n        name: litmus\r\n\r\n      spec:\r\n\r\n        serviceAccountName: litmus\r\n\r\n        restartPolicy: Never\r\n\r\n        containers:\r\n\r\n        - name: ansibletest\r\n\r\n          image: openebs/ansible-runner\r\n\r\n          env:\r\n\r\n            - name: ANSIBLE_STDOUT_CALLBACK\r\n\r\n              value: log_plays\r\n\r\n\r\n            - name: PROVIDER_STORAGE_CLASS\r\n\r\n              value: openebs-standard\r\n\r\n\r\n\r\n            - name: APP_NODE_SELECTOR\r\n\r\n              value: kubeminion-01\r\n\r\n\r\n            - name: FIO_TEST_PROFILE\r\n\r\n              value: standard-ssd\r\n\r\n\r\n            - name: FIO_SAMPLE_SIZE\r\n\r\n              value: \"128m\"\r\n\r\n\r\n            - name: FIO_TESTRUN_PERIOD\r\n\r\n              value: \"60\"\r\n\r\n\r\n          command: [\"/bin/bash\"]\r\n\r\n          args: [\"-c\", \"ansible-playbook ./fio/test.yaml -i /etc/ansible/hosts -v; exit 0\"]\r\n\r\n          volumeMounts:\r\n\r\n            - name: logs\r\n\r\n              mountPath: /var/log/ansible\r\n\r\n          tty: true\r\n\r\n        - name: logger\r\n\r\n          image: openebs/logger\r\n\r\n          command: [\"/bin/bash\"]\r\n\r\n          args: [\"-c\", \"./logger.sh -d 10 -r fio,openebs; exit 0\"]\r\n\r\n          volumeMounts:\r\n\r\n            - name: kubeconfig\r\n\r\n              mountPath: /root/admin.conf\r\n\r\n              subPath: admin.conf\r\n\r\n            - name: logs\r\n\r\n              mountPath: /mnt\r\n\r\n          tty: true\r\n\r\n        volumes:\r\n\r\n          - name: kubeconfig\r\n\r\n            configMap:\r\n\r\n              name: kubeconfig\r\n\r\n          - name: logs\r\n\r\n            hostPath:\r\n\r\n              path: /mnt\r\n\r\n              type: Directory\r\n```\r\n\r\n## STEP 3: Run the Litmus fio test job.\r\n\r\nThe job creates the Litmus test pod, which contains both the test runner as well as the (stern-based) logger sidecar. The test runner then launches an fio test job that uses a persistent volume (PV) based on the specified storage class.\r\n\r\n```\r\nkarthik_s@cloudshell:~/litmus/tests/fio (strong-eon-153112)$ kubectl apply -f run_litmus_test.yaml\r\n\r\njob \"litmus\" created\r\n```\r\n\r\n## STEP 4: View the fio run results.\r\n\r\nThe results can be obtained from the log directory on the node in which the litmus pod is executed (By default, it is stored in _/mnt_). The fio & other specified pod logs are available in a tarfile (\\_Logstash*<timestamp>*.tar\\_\\_).\r\n\r\n```\r\nroot@gke-oebs-staging-default-pool-7cc7e313-bf16:/mnt# ls\r\n\r\nLogstash_07_07_2018_04_10_AM.tar  hosts  systemd_logs\r\n```\r\n\r\nThe fio results are captured in JSON format with job-specific result sections. Below is a truncated snippet reproduced from the log for a sample basic rw run:\r\n\r\n```\r\n{\r\n  \"jobname\": \"basic-readwrite\",\r\n  \"groupid\": 0,\r\n  \"error\": 0,\r\n  \"eta\": 0,\r\n  \"elapsed\": 61,\r\n  \"read\": {\r\n    \"io_bytes\": 28399748,\r\n    \"bw\": 473321,\r\n    \"iops\": 118330.31,\r\n    \"runtime\": 60001,\r\n    \"total_ios\": 7099937,\r\n    \"short_ios\": 0,\r\n    \"drop_ios\": 0,\r\n    \"slat\": {\r\n      \"min\": 0,\r\n      \"max\": 0,\r\n      \"mean\": 0,\r\n      \"stddev\": 0\r\n    },\r\n    \"write\": {\r\n      \"io_bytes\": 28400004,\r\n      \"bw\": 473325,\r\n      \"iops\": 118331.38,\r\n      \"runtime\": 60001,\r\n      \"total_ios\": 7100001,\r\n      \"short_ios\": 0,\r\n      \"drop_ios\": 0,\r\n      \"slat\": {\r\n        \"min\": 0,\r\n        \"max\": 0,\r\n        \"mean\": 0,\r\n        \"stddev\": 0\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## CONCLUSION\r\n\r\nHow is this different from doing an fio package installation on the Kubernetes nodes and running tests?\r\n\r\n- Running an fio Kubernetes job will offer better control to simulating actual application loads when used with resource limits.\r\n- The litmus fio jobs with various profiles can be included as part of a larger suite using the executor framework, thereby obtaining results for different profiles.\r\n- Litmus (as it continues to mature) will provide jobs that perform Chaos tests against storage while running different types of workloads. Running a fio job lends itself to that model.\r\n- Finally, it is a more “Kubernetes” way of doing things!\r\n\r\nLet us know your experience with using fio-based performance tests with Litmus. Any feedback is greatly appreciated!\r\n","slug":"how-do-i-run-a-litmus-test-to-compare-storage-performance-on-kubernetes"},{"id":53,"title":"Kubernetes storage extensions to Weave Scope\r","author":"Uma Mukkara\r","author_info":"Contributor at openebs.io, Co-founder & COO@MayaData. Uma led product development in the early days of MayaData (CloudByte).\r","date":"28-6-2018\r","tags":["Open Source"," Weave Scope"," Node Disk Manager"," Persistent Volume"," Kubernetes"],"excerpt":"It was in Austin KubeCon 2017 that I first got a deep look at Weave Scope, and could not stop falling in love with it. The visualisation Scope provides into Kubernetes resources is simply amazing.\r","content":"\r\nIt was in Austin KubeCon 2017 that I first got a deep look at Weave Scope, and could not stop falling in love with it. The visualisation Scope provides into Kubernetes resources is simply amazing. It greatly simplifies the tasks of an Administrator in dealing with the clutter of Kubernetes components and helps directly go to the component of interest and start observing and managing it.\r\n\r\nBeing tasked with the goal of simplifying storage management for Kubernetes, my immediate thought was, why can’t we use Scope for Kubernetes storage? Of course, storage in Kubernetes is a developing area and new features are always coming but the existing adoption of Kubernetes persistent storage volumes(PVs) concept was already pretty large and we thought it warranted extensions to Scope to include PVs.\r\n\r\nSo we got to and with the help of [Alexis](https://twitter.com/monadic) and the Weave team — we started coding!\r\n\r\nWe set out multiple milestones for this journey:\r\n\r\n- The first one — get the persistent volumes (PVs), persistent volume claims (PVCs) and Storage Classes (SCs) into Scope\r\n- The second one — add snapshot/clone support and start monitoring the volume metrics\r\n- The third one — bring in the disk or SSD or similar as a fundamental resource that is being managed by the Administrator just like they might want to sometimes take a look at CPU and Memory\r\n\r\n## Persistent Volumes (PVs)\r\n\r\nMost of the time, Persistent Volume Claims (PVCs) are the entry points to increasing the storage. The number of PVCs will be about the same as the number of pods, or slightly less in a reasonably-loaded Kubernetes cluster. The administrator will benefit from having visibility of which POD is using which PVCs and the associated storage classes and PVs. This is especially true if they are using the storage capacity of the Kubernetes clusters themselves. Adding this visibility is precisely is what we did to start.\r\n\r\n![PVC-PV-SC-POD Relationship on Scope](/images/blog/pvc-pv-sc-pod.png)\r\n\r\nYou can see this new visibility in Scope by using the newly-created filter “Show storage/Hide storage” under the PODs section. This filter puts the storage components in perspective with the remaining pods and associated networked-data connections. Users can **Hide storage** when not interested, or to reduce clutter.\r\n\r\nWe received an enthusiastic welcome to the Scope community from the Weaveworks team. We also found encouragement from [Alexis](https://twitter.com/monadic) and plenty of technical help from [Bryan](https://twitter.com/bboreham) at Weaveworks. The first pull request (PR) was really about adding PV, PVC and Storage Class support, and was merged into the Weave Scope master recently ([https://github.com/weaveworks/scope/pull/3132](https://github.com/weaveworks/scope/pull/3132) ).\r\n\r\n![PV-PVC-SC Integration into Scope](https://blog.mayadata.io/hubfs/0_iYXgl-m8oxyXVs1s.gif)\r\n\r\n## Future work:\r\n\r\n### Snapshots and Clones\r\n\r\nCI/CD pipelines are the most active areas in which DevOps are finding stateful applications on Kubernetes to be immediately applicable. Storing the state of a database at the end of each pipeline stage, and restoring them when required, is a commonly performed task. The state of the stateful application is stored by taking snapshots of its persistent volumes and is restored by creating clones of persistent volumes. We believe that offering visibility and administrative capabilities to manage snapshots and clones in Scope is a natural next step.\r\n\r\n### Disk Management and Monitoring\r\n\r\nHyper-converged Infrastructure (HCI) has yet to find its rhythm with Kubernetes, largely due to a lack of fully-developed tools for disk management and monitoring. Kubernetes now has a well-accepted method to provision and manage volumes and attach them to disk management. Therefore, the enabling of HCI for Kubernetes will be improved by new tools such as [Node Disk Manager (NDM)](https://github.com/openebs/node-disk-manager), to which, incidentally (humble brag), we are also contributing. With Disk being the fundamental component for storage and the main participant in the chaos engineering of storage infrastructure, it helps to have it visualised and monitored in a proper way. In large Kubernetes clusters (100+) nodes, the disks will be in the thousands. Scope’s resource utilisation panel is a powerful tool that brings in the visibility of CPU and Memory utilisation at the Host, Container and Process level. This is a natural extension to add Disk Capacity, Disk performance (IOPS and throughput) to this resource utilisation tool. Our view is shown in the figure below, that Disk performance can be added.\r\n\r\n![Current View of the Resource Utilisation Tool on Scope](https://blog.mayadata.io/hubfs/0_9SozVWeQ2F69fDQO.gif)\r\n\r\nAnother important aspect of disk management is simply browsing from the application volume all the way to the disk where the data is stored. It is not possible to locate the actual disk of a persistent volume if the underlying storage is a cloud-disk such as EBS or GPD, but if it is a Kubernetes local PV or OpenEBS volume, the volume data vs. physical disks relationship can be identified. This will be useful while managing the hyper-converged infrastructure on Kubernetes.\r\n\r\n![(Future work) PODs/Disks and Nodes Relationship at Scope](https://blog.mayadata.io/hubfs/0_WJA8ii6NlaBoS94H.gif)\r\n\r\nThe above screens are a dirty implementation on a dev branch that is still in process. However, it provides a good, quick glimpse of how a POD’s volume is linked to the associated disks.\r\n\r\n_Weaveworks team recently started community meetings led by [Fons](https://twitter.com/2opremio), and it appears to be a great beginning of broader community involvement into the development of Scope. You can access the public meeting notes at_\r\n\r\n_[https://docs.google.com/document/d/103_60TuEkfkhz_h2krrPJH8QOx-vRnPpbcCZqrddE1s/edit?usp=sharing](https://docs.google.com/document/d/103_60TuEkfkhz_h2krrPJH8QOx-vRnPpbcCZqrddE1s/edit?usp=sharing)_\r\n\r\n## Summary:\r\n\r\nWeave Scope is a very useful tool for Kubernetes administrators for visualising and basic administration. With the addition of extensions being added, and a wider community being formed, Scope’s adoption will certainly increase and benefit the Kubernetes eco-system. We are looking forward to being an active contributor to this excellent visualisation tool.\r\n\r\nPlease provide any feedback here or in the next Scope community meeting. We will be there!\r\n\r\nThanks to [Akash Srivastava](https://medium.com/@srivastavaakash?source=post_page) and [Satyam Zode](https://medium.com/@satyamz?source=post_page).\r\n","slug":"kubernetes-storage-extensions-to-weave-scope"},{"id":54,"title":"OpenEBS announces the availability of version 1.0\r","author":"Kiran Mova\r","author_info":"Contributor and Maintainer OpenEBS projects. Chief Architect MayaData. Kiran leads overall architecture & is responsible for architecting, solution design & customer adoption of OpenEBS.\r","date":"24-06-2018\r","tags":["CNCF"," Kubernetes"," OpenEBS"," Storage"],"excerpt":"In this blog, I will touch upon what I have learned from users about Open Source CAS solutions like OpenEBS at KubeCon EU 19, followed by a quick note on the major changes in 1.0 and what is in the immediate roadmap.\r","content":"\r\nCongratulations and thanks to each one of you from the OpenEBS community for reaching this significant milestone!\r\n\r\nIn this blog, I will touch upon what I have learned from users about Open Source CAS solutions like OpenEBS at KubeCon EU 19, followed by a quick note on the major changes in 1.0 and what is in the immediate roadmap.\r\n\r\nBeing an active member of the OpenEBS Slack channel and from the usage statistics, I was cognizant of the vibrant user community. For instance, a recent usage report generated by MayaData since 0.8 was released, OpenEBS is running on — 340 different flavors of Operating Systems, 90 different flavors of Kubernetes and across 75 different countries.\r\n\r\n![OpenEBS Usage Report](https://cdn-images-1.medium.com/max/800/0*QKRCQN6eguXuHH6u)\r\n\r\nKubeCon EU 19, was by far the most interesting for me — to interact with some of the above users who are already running OpenEBS in production or in the process of evaluation. For those of you, curious about the kind of views expressed from users and the partner community about OpenEBS and Kubernetes Storage at large, here are some interesting ones:\r\n\r\n**Feedback from Users running OpenEBS in production.** The choice to adopt OpenEBS was made after evaluating and comparing other available solutions as can be seen from several stories shared by the users:\r\n\r\n![User feedback about adoption of OpenEBS](/images/blog/slack-snnipets.png)\r\n\r\nThis growing adoption is attributed to the following:\r\n\r\n- The major one being the architectural superiority of using Kubernetes to build highly portable distributed systems — and **not locking** all the applications into a single point of failure — by making them write into storage system run by some other group or provider. OpenEBS helps to build a storage solution where each application gets its own storage controllers. This is a perfect validation of the Container Attached Storage Category, which is explained in more detail at a [CNCF Blog](https://www.cncf.io/blog/2019/05/16/a-year-later-updating-container-attached-storage/).\r\n- Containerized distributed applications are much smarter than their legacy server-based counterparts and these new containerized applications don’t have the same dependency on the storage system as before. What applications need are **ala-carte** of Storage Solutions that OpenEBS offers as Storage Engines. Depending on the application needs, cluster administrators can decide what components of OpenEBS are really deployed. For example — does the cluster need to only have Local PVs or a full-fledged storage solution like cStor.\r\n- Of course the fact the OpenEBS itself is completely developed in user space and just runs on any platform easily. **No kernel taints required.** Yes, currently with 1.0 — there is a performance hit, but there are enough use cases where the current performance is good enough.\r\n\r\nWords just can’t express the joy of hearing directly from users on how OpenEBS has helped them. It is just amazing to see the diversity of users as well; from universities to financial corporations, startups to enterprises, fresher to seasoned SREs.\r\n\r\nPersonally, the most humbling moment for me at the KubeCon EU 2019, was when an end-user approached me just to thank for the efforts we have put into OpenEBS. He works at a University as a SysAdmin and he mentioned that using OpenEBS — he is able to spin up a self-contained Kubernetes Cluster with host storage that can be used by the stateful applications. This has helped in the number of support calls he receives from the University IT department when rolling out Stateful Applications that needed some hand-holding to provide the PVs.\r\n\r\nA similar sentiment is being expressed by large enterprises where the Infra team is supposed to roll out services to 100s of there application teams, in a more agile and uniform way than before. Some of the enterprises run Big Data pipelines at mammoth scale and have found OpenEBS to contains the right set of abstractions that can be extended and used.\r\n\r\n**Feedback from the growing community and partner ecosystem** that comprises of individual contributors, home users, enterprise solution architects, technology enthusiasts to hardware vendors included:\r\n\r\n- Solution Architects, DevOps, SREs >> I have put together a few scripts to make backups and restores with the Velero plugin for cStor volumes a little easier, since there are some parameters to remember and some additional steps required for both backups and restores other than using the basic Velero commands. I created a tool for [velero openebs](https://github.com/vitobotta/velero-openebs-backup) — with a few notes in a comment, in case anyone is interested\r\n- Storage Solution Engineers >> Hey, I know OpenEBS was not meant for this — but I think I made some changes can now serve Volumes from Kubernetes Cluster to Virtual Machines. A custom SDS, if you will, that is developed using OpenEBS.\r\n- Storage Vendors >> We are a storage devices company and OpenEBS can be used to run in an optimized way and help us shift storage boxes.\r\n- Kubernetes Managed Service Providers >> It will be cool to have OpenEBS available via the Operator Hub/Marketplace.\r\n\r\nBy the way, it is hard to gauge how much of the above discussions were really made possible by OpenEBS becoming part of the CNCF family. However, a major shift that I have observed since becoming a CNCF project, is that both end users and partners are more forthcoming to share their stories and integrate OpenEBS into their portfolio. _For anyone considering donating their projects to CNCF, I highly recommend it **—** there is a steep learning curve that helps with Governance of the project, by just being part of the efforts to propose the project into CNCF._\r\n\r\nClearly, these days the discussions at KubeCon EU are not around What or Why OpenEBS? but around When a specific feature is going to be made available. While the top requests with regards to missing features were around CSI support, automation of the operations like — disk provisioning and capacity expansion and performance improvements — they were really not blocking users from running OpenEBS in production. There are lots of users out there, that have found the current performance offered by the OpenEBS Data Engines was good enough for their use cases, and they have gone ahead and implemented playbooks and tools for performing maintenance and monitoring operations.\r\n\r\nPost KubeCon, having known and also met in person some of these early adopters that are running OpenEBS in production with a set of home-grown solutions, we felt a sense of responsibility to release 1.0 at the earliest and promise to provide long term support on the current feature set. As we progress with implementing additional functionality around operators, CSI, supporting the latest from Kubernetes Storage, and so forth we are also making a commitment that the current version will be supported.\r\n\r\nHence, for 1.0 — we changed our gears a bit to focus on helping address the feedback received on the existing feature sets for all the three data engines now supported by OpenEBS and deployed in production- Jiva, cStor Data Engines and Local PV.\r\n\r\nSome significant changes in 1.0 are as follows:\r\n\r\n**Enhanced Lifecycle Management of Block Devices**. The component of OpenEBS — NDM — Node Disk Manager or Node (Storage) Device Manager as we call it now, has been enhanced to support Block Device Claim (BDC). A new NDM Operator has been introduced in 1.0, that helps to request and reserve a Block Device before using that for either creating Local PV or cStor Pool. NDM is also being used independently of OpenEBS Storage Engines, and the ability to claim a Block Device — similar to PVC — enables the sharing of the block devices without stepping on each other.\r\n\r\nBlock Device(BD) is a new CR — which is a preferred way to represent a storage device than a Disk CR ( which was used in earlier releases.) Disk CR are also present — to allow for backward compatibility. The cStor Data engines and Local PVs that typically use block devices have been enhanced to use BDC/BD in place of Disk.\r\n\r\nWhen a BDC is deleted, the BD is released. And before it can be claimed by another BDC, the NDM takes care of deleting the data that has been written from the previous consumer. The cleaner utility used is derived from the Kubernetes Local PV cleaner jobs.\r\n\r\n**Enhance the OpenEBS Local PV to be used with Block Devices.** In the previous release, we introduced Local PVs that can be used with a hostpath, in this release, we have added support to create a Local PV directly on a Block Device (discovered by NDM). The Block Device can either be a raw block device (Example: GPD) — in which case it will be formatted (Example: Local SSDs on GKE) with the requested filesystem type or already mounted block device.\r\n\r\nAlso included in this release are:\r\n\r\n- Bug fixes reported around the cStor and Jiva data engines that surface after running OpenEBS on nodes that experience frequent reboots.\r\n- Additional debugging tools for cStor and Jiva engines, jivactl being the significant one that will help with clearing up of older snapshots. This tool has to be used to clear older snapshots to avoid hitting a cap limit of 255 snapshots in older releases.\r\n- Added few more Prometheus monitoring metrics\r\n- Added several e2e tests and included more applications into the OpenEBS CI pipeline maintained by [MayaData](https://mayadata.io/) at [openebs.ci](https://openebs.ci/)\r\n\r\nFor detailed changes summary, please check the [OpenEBS 1.0 Changelog](https://github.com/openebs/openebs/wiki/Change-Summary----v1.0).\r\n\r\nPlease refer to the[ OpenEBS Documentation](https://docs.openebs.io/?__hstc=216392137.ed92f0691adfb1cbf08ea329504224a3.1580116629364.1580116629364.1580116629364.1&__hssc=216392137.1.1580116629364&__hsfp=3765904294) to get started.\r\n\r\nOpenEBS 1.0 — ships with multiple Data Engines to choose from depending on your application needs:\r\n\r\n- OpenEBS Jiva PVs — can be used if your kubernetes nodes don’t have the capability to add raw block devices, but have extra capacity available on the host filesystem. This is the first and the longest running in production with lots of Kubernetes tunables available like — to customize the location where data is saved, the specific nodes on which data needs to be replicated — within or across availability zones, setup the volumes for thin provisioning, and so forth.\r\n- OpenEBS cStor PVs — is the preferred option when your nodes have raw block devices. cStor Data Engine continues to be a preferred solution for use cases that require instant snapshot and clone of volumes.\r\n- OpenEBS Local PVs — best suited for applications that can do their own replication and require high performance. OpenEBS Local PVs can work with either hostpath or with block devices that are already attached to the nodes.\r\n\r\nThere are a lot of options available to customize from the type of block devices that can be used for OpenEBS volumes to customizing the resources allocated to the Storage Pods.\r\n\r\nOpenEBS has turned a new leaf in its journey by releasing version 1.0. Thank you for all the support and love that you have shown along this journey. We are forever more committed to learn from you and help you realize the Data Agility that Cloud Native promises to offer.\r\n\r\nOur immediate focus is on getting OpenEBS ready for CSI and enhancing the OpenEBS Operators — for managing the Day 2 operations like dealing with Kubernetes upgrades, ASG, expansion of cStor Pool capacity or migrating them to new nodes and so forth. Development on these items is being tracked in the Kubernetes style at [Product Planning Sheet](https://docs.google.com/spreadsheets/d/1bbphUqbxShBhgr1VHaEQUzIGMaJJacPNKc1ckNXU1QE/edit).\r\n\r\nThanks to CNCF, we have the following mailing lists to connect apart from the [Slack](https://openebs.org/community).\r\n\r\n- For OpenEBS project updates — subscribe to [https://lists.cncf.io/g/cncf-openebs-announcements](https://lists.cncf.io/g/cncf-openebs-announcements)\r\n- For interacting with other OpenEBS users, you can either join the [Slack](https://openebs.org/community), raise issues on [Github](https://github.com/openebs/openebs/issues) or send an email to [https://lists.cncf.io/g/cncf-openebs-users](https://lists.cncf.io/g/cncf-openebs-users)\r\n\r\nAs always, I am eager to learn from you. Please hit me up on [twitter (@kiranmova)](https://twitter.com/kiranmova), [slack](https://openebs.org/community) or on here in the comments.\r\n\r\nThanks to [Murat Karslioglu](https://medium.com/@muratkarslioglu?source=post_page). [Public domain](https://creativecommons.org/publicdomain/mark/1.0/).\r\n","slug":"openebs-announces-the-availability-of-version-10"},{"id":55,"title":"Git freedom on Kubernetes\r","author":"Murat Karslioglu\r","author_info":"VP @OpenEBS & @MayaData_Inc. Lives to innovate! Opinions my own!\r","date":"05-06-2018\r","tags":["DevOps"," Git"," Gitlab"," Kubernetes"," OpenEBS"],"excerpt":"Here is one of the fastest ways to get your private repository with Gitlab up and running on your Kubernetes environment — Let’s “Make DevOps lifecycle private again”\r","content":"\r\n#### Steps to easily run GitLab\r\n\r\nAfter Microsoft announced the acquisition of GitHub, many developers raised concerns on social media about Microsoft’s history of unsuccessfully running the acquired businesses like Skype, Nokia’s handset business, Navision and other 150 companies (you probably haven’t noticed) they have swallowed up over the years.\r\n\r\nOther than keeping the developer’s life-support plugged, one of the biggest concerns is that MS would use its power on GitHub repositories to analyze trends among software development in order to launch competing products. Fears that GitHub privacy may be in jeopardy have already led many developers to jump off the ship or consider alternatives. GitLab’s publicly available [status graphs](https://t.co/svpWpI0Rb2) show spikes of 70x increase in imported repositories (average 100 vs 7.5K), a validation of increased user apprehension.\r\n\r\nHere is one of the fastest way to get your private repository with Gitlab up and running on your Kubernetes environment — Let’s “**Make DevOps lifecycle private again**” ©\r\n\r\nCurrently, the easiest and recommended way to install GitLab on Kubernetes is using the [Gitlab-Omnibus](https://docs.gitlab.com/ee/install/kubernetes/gitlab_omnibus.html) Helm charts.\r\n\r\nGitlab-Omnibus deploys every feature a small deployment would require including the [Container Registry](https://docs.gitlab.com/ee/user/project/coThis year I have attended a number of tech events and in terms of size, organization, and especially the content — Next ’18 is so far my favorite.ntainer_registry.html#gitlab-container-registry), [load balancer (NGINX)](https://github.com/kubernetes/ingress/tree/master/controllers/nginx), [Mattermost](https://docs.gitlab.com/omnibus/gitlab-mattermost/), and [Runner](https://docs.gitlab.com/runner/).\r\n\r\n#### **Prerequisites**\r\n\r\nMinimum requirements for a multi-node cluster:\r\n\r\n**Hardware**\r\n\r\n- **Boot node:** 1x 1+ core(s) >= 2.4 GHz CPU, 4GB RAM, >=100 GB disk space\r\n- **Master node:** 1 or 3x 2+ cores >= 2.4 GHz CPU, 4+GB RAM, >=151 GB disk space\r\n- **Worker node:** 3x 2+ cores >= 2.4 GHz CPU, 4+GB RAM, >=100 GB disk space\r\n\r\nSince I’m not planning to run anything heavy, I’ll be using 3 nodes, and will install Master, Proxy, and Workers an all 3.\r\n\r\n**Software**\r\n\r\n- [Ubuntu 16.04 LTS](https://www.ubuntu.com/download/server) (RHEL 7.x is also supported)\r\n- Docker 1.12 to 17.03\r\n- Kubernetes 1.7+ Cluster (You can use [IBM Cloud Private 2.1.0.2](http://containerized.me/how-to-install-openebs-on-ibm-cloud-private/) or [Red Hat OpenShift Origin](http://containerized.me/how-to-install-openebs-on-openshift/))\r\n- [kubectl](https://github.com/kubernetes/kubectl)\r\n- Helm client\r\n- A [GitLab Omnibus](https://docs.gitlab.com/omnibus/) Pod, including Mattermost, Container Registry, and Prometheus\r\n- An auto-scaling [GitLab Runner](https://docs.gitlab.com/runner/) using the Kubernetes executor\r\n- [Redis](https://github.com/kubernetes/charts/tree/master/stable/redis)\r\n- [PostgreSQL](https://github.com/kubernetes/charts/tree/master/stable/postgresql)\r\n- [NGINX Ingress](https://github.com/kubernetes/charts/tree/master/stable/nginx-ingress)\r\n- [OpenEBS](https://github.com/openebs/openebs) persistent volumes for Data, Registry, Postgres, and Redis\r\n\r\nThe Kubernetes instructions described below using Helm are generic and should work on all other platforms.\r\n\r\n**Installing GitLab and OpenEBS using the Helm Chart**\r\n\r\nGitLab depends on stateful applications like Redis and PostgeSQL, and requires persistent volumes for its data and the registry. Here, I will simplify the storage provisioning using OpenEBS.\r\n\r\nFirst, install OpenEBS using the chart.\r\n\r\n```\r\nhelm install — name ‘openebs-gitlab-test’ stable/openebs\r\n```\r\n\r\nOptional: If you would like to customize your OpenEBS installation you can also use a copy of the [value.yaml](https://raw.githubusercontent.com/kubernetes/charts/master/stable/openebs/values.yaml) file from the OpenEBS chart and modify parameters listed [here](https://github.com/kubernetes/charts/tree/master/stable/openebs).\r\n\r\n```\r\nhelm install — name ‘openebs-gitlab-test’ -f values.yaml stable/openebs\r\n```\r\n\r\nNext, add the predefined storage classes.\r\n\r\n```\r\nkubectl apply -f https://raw.githubusercontent.com/openebs/openebs/master/k8s/openebs-storageclasses.yaml\r\n```\r\n\r\nThere are many ways to enable OpenEBS for use by GitLab. The fastest is by making one of the OpenEBS storage classes a default StorageClass:\r\n\r\nList available OpenEBS storage classes in your cluster.\r\n\r\n```\r\nmurat@icpnode1:~$ kubectl get sc\r\nNAME PROVISIONER AGE\r\nopenebs-cassandra openebs.io/provisioner-iscsi 18d\r\nopenebs-es-data-sc openebs.io/provisioner-iscsi 18d\r\nopenebs-jupyter openebs.io/provisioner-iscsi 18d\r\nopenebs-kafka openebs.io/provisioner-iscsi 18d\r\nopenebs-mongodb openebs.io/provisioner-iscsi 18d\r\nopenebs-percona openebs.io/provisioner-iscsi 18d\r\nopenebs-redis openebs.io/provisioner-iscsi 18d\r\nopenebs-standalone openebs.io/provisioner-iscsi 18d\r\nopenebs-standard openebs.io/provisioner-iscsi 18d\r\nopenebs-zk openebs.io/provisioner-iscsi 18d\r\n```\r\n\r\nEither create your StorageClass or pick one of the predefined classes. _openebs-standard_ creates 3 replicas and is an ideal candidate here to be used for most of the stateful workloads. Let’s mark this StorageClass as default.\r\n\r\n```\r\nkubectl patch storageclass openebs-standard -p ‘{“metadata”: {“annotations”:{“storageclass.kubernetes.io/is-default-class”:”true”}}}’\r\n```\r\n\r\nNo verify that your chosen StorageClass is indeed the **default**.\r\n\r\n```\r\nmurat@icpnode1:~$ kubectl get sc\r\nNAME PROVISIONER AGE\r\nopenebs-cassandra openebs.io/provisioner-iscsi 18d\r\nopenebs-es-data-sc openebs.io/provisioner-iscsi 18d\r\nopenebs-jupyter openebs.io/provisioner-iscsi 18d\r\nopenebs-kafka openebs.io/provisioner-iscsi 18d\r\nopenebs-mongodb openebs.io/provisioner-iscsi 18d\r\nopenebs-percona openebs.io/provisioner-iscsi 18d\r\nopenebs-redis openebs.io/provisioner-iscsi 18d\r\nopenebs-standalone openebs.io/provisioner-iscsi 18d\r\nopenebs-standard (default) openebs.io/provisioner-iscsi 18d\r\nopenebs-zk openebs.io/provisioner-iscsi 18d\r\n```\r\n\r\nNext, we can install the GitLab-ce chart. It is recommended to save your configuration options in a values.yaml file for future use.\r\n\r\n```\r\nwget https://raw.githubusercontent.com/kubernetes/charts/master/stable/gitlab-ce/values.yaml\r\n```\r\n\r\nEdit the _values.yaml_ file and at minimum, add the **externalUrl** field. Otherwise, you’ll end up with a non-functioning release.\r\n\r\nHere is how my _values.yaml_ file looks like after these changes:\r\n\r\n```\r\nimage: gitlab/gitlab-ce:9.4.1-ce.0\r\nexternalUrl: http://containerized.me/\r\nserviceType: LoadBalancer\r\ningress:\r\nannotations:\r\nenabled: false\r\ntls:\r\nurl: gitlab.cluster.local\r\nsshPort: 22\r\nhttpPort: 80\r\nhttpsPort: 443\r\nlivenessPort: http\r\nreadinessPort: http\r\nresources:\r\nrequests:\r\nmemory: 1Gi\r\ncpu: 500m\r\nlimits:\r\nmemory: 2Gi\r\ncpu: 1\r\npersistence:\r\ngitlabEtc:\r\nenabled: true\r\nsize: 1Gi\r\nstorageClass: openebs-standard\r\naccessMode: ReadWriteOnce\r\ngitlabData:\r\nenabled: true\r\nsize: 10Gi\r\nstorageClass: openebs-standard\r\naccessMode: ReadWriteOnce\r\npostgresql:\r\nimageTag: “9.6”\r\ncpu: 1000m\r\nmemory: 1Gi\r\npostgresUser: gitlab\r\npostgresPassword: gitlab\r\npostgresDatabase: gitlab\r\npersistence:\r\nsize: 10Gi\r\nstorageClass: openebs-standard\r\naccessMode: ReadWriteOnce\r\nredis:\r\nredisPassword: “gitlab”\r\nresources:\r\nrequests:\r\nmemory: 1Gi\r\npersistence:\r\nsize: 10Gi\r\nstorageClass: openebs-standard\r\naccessMode: ReadWriteOnce\r\n```\r\n\r\nNow, install the chart.\r\n\r\n```\r\nhelm install — name gitlab-test -f values.yaml stable/gitlab-ce\r\n```\r\n\r\nList the pods and confirm that all pods are ready and running.\r\n\r\n```\r\n$ kubectl get pods\r\nNAME READY STATUS RESTARTS AGE\r\ngitlab-test-gitlab-ce-dd69cdf4b-69vmb 1/1 Running 0 11m\r\ngitlab-test-postgresql-75bf9b667d-lwj2b 1/1 Running 0 11m\r\ngitlab-test-redis-998998b59-hzztj 1/1 Running 0 11m\r\nopenebs-gitlab-test-apiserver-68fc4488fd-jf8gz 1/1 Running 0 1h\r\nopenebs-gitlab-test-provisioner-7dfdf646d8–9wpmg 1/1 Running 0 1h\r\npvc-cb0fc1b2–6904–11e8–9f57–06a0a9acf800-ctrl-74d4b59c9f-bjtg2 2/2 Running 0 11m\r\npvc-cb0fc1b2–6904–11e8–9f57–06a0a9acf800-rep-64f56667d-6ds26 1/1 Running 0 11m\r\npvc-cb0fc1b2–6904–11e8–9f57–06a0a9acf800-rep-64f56667d-99mbh 1/1 Running 0 11m\r\npvc-cb0fc1b2–6904–11e8–9f57–06a0a9acf800-rep-64f56667d-d8d4z 1/1 Running 0 11m\r\npvc-cb1064ee-6904–11e8–9f57–06a0a9acf800-ctrl-bd7cff65f-ph8dr 2/2 Running 0 11m\r\npvc-cb1064ee-6904–11e8–9f57–06a0a9acf800-rep-595dd9c997–2lm4x 1/1 Running 0 11m\r\npvc-cb1064ee-6904–11e8–9f57–06a0a9acf800-rep-595dd9c997-jldjs 1/1 Running 0 11m\r\npvc-cb1064ee-6904–11e8–9f57–06a0a9acf800-rep-595dd9c997-kzlrc 1/1 Running 0 11m\r\npvc-cb111261–6904–11e8–9f57–06a0a9acf800-ctrl-668f5988c5-hv8vb 2/2 Running 0 11m\r\npvc-cb111261–6904–11e8–9f57–06a0a9acf800-rep-74974f6644-hsn49 1/1 Running 0 11m\r\npvc-cb111261–6904–11e8–9f57–06a0a9acf800-rep-74974f6644-lj64g 1/1 Running 0 11m\r\npvc-cb111261–6904–11e8–9f57–06a0a9acf800-rep-74974f6644-z6kfd 1/1 Running 0 11m\r\npvc-cb11a791–6904–11e8–9f57–06a0a9acf800-ctrl-585cf7c97d-58pnq 2/2 Running 0 11m\r\npvc-cb11a791–6904–11e8–9f57–06a0a9acf800-rep-79d658d94c-5bzn6 1/1 Running 0 11m\r\npvc-cb11a791–6904–11e8–9f57–06a0a9acf800-rep-79d658d94c-9dz5f 1/1 Running 0 11m\r\npvc-cb11a791–6904–11e8–9f57–06a0a9acf800-rep-79d658d94c-snkfb 1/1 Running 0 11m\r\n```\r\n\r\nGet the list of persistent volumes.\r\n\r\n```\r\n$ kubectl get pv\r\nNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE\r\npvc-cb0fc1b2–6904–11e8–9f57–06a0a9acf800 10Gi RWO Delete Bound default/gitlab-test-postgresql openebs-standard 17m\r\npvc-cb1064ee-6904–11e8–9f57–06a0a9acf800 10Gi RWO Delete Bound default/gitlab-test-redis openebs-standard 17m\r\npvc-cb111261–6904–11e8–9f57–06a0a9acf800 10Gi RWO Delete Bound default/gitlab-test-gitlab-ce-data openebs-standard 17m\r\npvc-cb11a791–6904–11e8–9f57–06a0a9acf800 1Gi RWO Delete Bound default/gitlab-test-gitlab-ce-etc openebs-standard 17m\r\n```\r\n\r\nYou can see above that four persistent volumes were created (**postgresql, redis, gitlab-ce-etc, gitlab-ce-data**), and each volume is protected by 3 replicas.\r\n\r\nNow go to the external endpoint address you have defined and start using GitLab after you set your new password.\r\n\r\n![](https://lh4.googleusercontent.com/9UnAe3ZuKt_weq1IbxOrgA_JQMpXE2ZCd80PgDxIodeUdFslr-wCt2DUjbWyoERYWa6RKht8JYvihV-_dQS0EYArc4dJhkPPtN0cGPNfYcDsiHgtjS7unCLOW9MTDre79AjZ660xm6IN94OPew)\r\n\r\nNow click on **Create a project**, then import your existing project from GitHub and start using GitLab.\r\n\r\n![](https://lh4.googleusercontent.com/CDe7SDXnBmCL5IGVTIOYATjzjZN2iMPsZaVBmuY3-l6qXFX8xReeU6M234eX0ELY1Pips6JfR1FJb4rzfL_d53KLDon0MrzBKqQvuBslQDboCw1yPehiKrSf771PMy79ckmPdLGWnhmijDFkVg)\r\n\r\n![](https://lh6.googleusercontent.com/AFqy2l5MohpC1kCk5k2yFoZA90qJGabfUymqmMmI0kFqcpgqXnrapoYCs1dMfrFDqKj-37ncNvoCe7Kf8UfCQq6VRvmFMK742abC58ju6TiRSUk2yeq1OtMBZWPMd3pqyQWawBDgUcSpSZ8Djg)\r\n\r\n---\r\n\r\nHopefully, this helps anyone who is motivated to reexamine their approach to Git to quickly and easily start running GitLab on Kubernetes. Thank you for reading, and please provide any feedback below or via Twitter — [**@**muratkarslioglu](https://twitter.com/muratkarslioglu)_Originally published at _[_Containerized Me_](http://containerized.me/git-freedom-on-kubernetes/)_._\r\n","slug":"git-freedom-on-kubernetes"},{"id":56,"title":"Berlin K8s meetup retrospect\r","author":"Jeffry Molanus\r","author_info":"Jeffry is the CTO at MayaData. At MayaData, his primary focus is to make sure the product is flexible and scalable. When he is not working with code, he practices martial arts.\r","date":"31-05-2018\r","tags":["OpenEBS"," Kubernetes"," DevOps"],"excerpt":"Last week, I was invited to give a talk about OpenEBS during the Kubernetes meetup in Berlin. The event was hosted by the friendly folks at Profitbricks, who once again I want to thank for the lovely venue and experience.\r","content":"\r\nLast week, I was invited to give a talk about OpenEBS during the Kubernetes meetup in Berlin. The event was hosted by the friendly folks at Profitbricks, who once again I want to thank for the lovely venue and experience. Matt Baldwin, from our friends at StackPoint Cloud, was once again an organizer — thank you Matt for your ongoing support of the community (and of OpenEBS as well).\r\n\r\nAs we went over some of the nitty-gritty details on how we are building OpenEBS, I received a few questions that I thought deserved an extended response. I will address one of those here.\r\n\r\nA common question was: “If I’m running on an _<insert cloud vendor>_ system, what is the benefit of OpenEBS?”\r\n\r\n**_So, let’s dive into one of the biggest questions— what if you are running on AWS and you are using EBS volumes, why use OpenEBS on top?_**\r\n\r\nFirst of all, we already made the implicit assumption that if you were to run an application managed by Kubernetes, you are using EBS volumes. But, this assumption does not have to be true. In fact, if you want fast and performant storage, AWS suggests that you use optimized storage instances, meaning _not using EBS_ volumes at all.\r\n\r\nThe EBS volumes are not the fastest thing you can get from AWS, but they do provide replication across zones and snapshots. This brings me to the second part, a snapshot, in AWS, is stored in S3. That bill (depending on dataset size) can quickly and easily pile up with the number of snaps. With OpenEBS, we store the snapshot locally on the volume itself, and we don’t require you to “copy” this into S3 or a similar location. Also, consider the amount of time it takes for a snapshot to be created in AWS; it can take hours and the snapshot restores require you to attach a new EBS volume. Moreover, if you do these types of things, you have to “fiddle” with the OS to get it attached, something that OpenEBS handles for you, making snapshots instantly and allowing you to rollback immediately.\r\n\r\nThere is also the matter of granularity; with OpenEBS, you can control everything per application or even per workload. You can fine-tune the replication factors (or not have it all) and you can use just one EBS volume for all your apps since OpenEBS handles the slicing and dicing for you.\r\n\r\nSo, this was about using EBS volumes, I hope the advantages are apparent and easy to understand. This brings data agility to your applications, not just in AWS, but also across clouds: public, private or hybrid. The developer does not have to make any changes to his or her YAML, and can write once and run everywhere, precisely what containers are supposed to do. Do not let others take that freedom away from you =)\r\n\r\nBack to the non-EBS volumes, what AWS refers to as “instance store.” More information from Amazon:\r\n\r\n![Instance stores](/images/blog/instance-stores.png)\r\n\r\nAs the docs point out, when you use this, you get high speed with zero features. With OpenEBS, you get high speed and all of the features if you delegate control of the “instance store” to OpenEBS. An interesting note, the instance store comes with the price of the machine instance itself, so there are no extra charges on your bill.\r\n\r\nIn a future blog I’ll cover some other common questions that arose — and I’m also going to continue talking about the shift of IO and so forth to the user space, and what it may mean for Container Attached Storage and running IO intensive workloads in general.\r\n\r\nFeel free to ask any questions below, or maybe I’ll see you on the [OpenEBS slack community](https://slack.openebs.io/?__hstc=216392137.c2ca19ae0ec72f00a9ae3bf6f8a512a3.1579861713935.1579861713935.1579861713935.1&__hssc=216392137.1.1579861713935&__hsfp=3765904294) where we are discussing many related subjects.\r\n","slug":"berlin-k8s-meetup-retrospect"},{"id":57,"title":"Container Attached Storage (CAS) — Taking off nicely\r","author":"Uma Mukkara\r","author_info":"Contributor at openebs.io, Co-founder & COO@MayaData. Uma led product development in the early days of MayaData (CloudByte).\r","date":"28-05-2018\r","tags":["Cas"," Kubernetes"," Stateful Applications"," OpenEBS"," MayaOnline"],"excerpt":"I had the fortune of presenting to a group of brilliant folks at SNIA India SDC event last week. This event being in Bangalore, I could sense the heat emanating from technology savvy brains mostly from the storage companies like DELL-EMC, NetApp, RedHat storage, HP storage etc\r","content":"\r\nI had the fortune of [presenting](https://www.slideshare.net/OpenEBS/openebs-cas-sdc-india-2018) to a group of brilliant folks at SNIA India SDC event last week. This event being in Bangalore, I could sense the heat emanating from technology savvy brains mostly from the storage companies like DELL-EMC, NetApp, RedHat storage, HP storage etc and the questions at the end of the presentation were a proof of it. Lots of great questions on the lines of “Nice architecture, I never knew storage can be run completely in user space”, “CAS — great topic, I understand the value and benefits, but are not you adding too many containers to the equation?”. In the interest of answering those questions in detail, I thought let me take the most commonly asked ones and answer them in this short article.\r\n\r\n## Just a quick recap on CAS:\r\n\r\n[Container Attached Storage (CAS)](https://docs.openebs.io/docs/next/conceptscas.html) is a new storage architecture to run the entire storage software in containers and hence in user space. This architecture has many benefits, primary one being “a dedicated storage controller per application” and bring in the possibility of hardening the storage controller for a given application workload. Read more on the benefits at the [CNCF blog](https://www.cncf.io/blog/2018/04/19/container-attached-storage-a-primer/). A typical CAS architecture example is shown below.\r\n\r\n![CAS architecture with controller and replica pods for each application](https://cdn-images-1.medium.com/max/800/1*4dJDmPbxxrP-fZK7NZZmYg.png)\r\n\r\nNow back to the CAS FAQ, here are a couple:\r\n\r\n### Q1: Well, how can you run entire storage in user space? I thought it can never be run in user level because of performance reasons.\r\n\r\nFor more technical answer, read our [CTO’s blog](https://blog.openebs.io/the-mule-and-the-flash-going-for-a-run-b104acbc74a2) on this precise topic 🙂\r\n\r\nShort answer is, we think storage should take advantage of container technology, so in CAS, we run storage as a microservice. The performance will be taken care by using technologies like SPDK, VPP and also taking advantage of the abundant availability of compute cores on the node.\r\n\r\nReality is that, linux kernel, as it is today, cannot deliver all the IOPS from the underlying NVMe flash disks. Do we think kernel can deliver 12 Million IOPS from the 24 NVMe disks ? Of course not, not today !!\r\n\r\nIn summary, higher performance can only be delivered using CAS architecture, SPDK, VPP and using more CPU cores.\r\n\r\n![CAS with SPDK leads to higher performance](https://cdn-images-1.medium.com/max/800/1*aKjepAaB5sIZF-hOq_dxIg.png)\r\n\r\n### Q2: In CAS, you are adding more containers to the cluster because of storage. Isn’t that increasing the compute needs of the Kubernetes cluster ?\r\n\r\nCAS enables native hyper convergence capability on Kubernetes. You don’t need an external storage array to manage the storage/data needs of applications on K8S, thats a lot of saving of CPU and hardware. With CAS, the overall TCO reduces as the additional storage (local disks), CPU and software (CAS) are provisioned on the same K8S cluster nodes and avoids the need of expensive external storage arrays.\r\n\r\nAs for the the question of dealing with large number of containers is concerned, there are nice tools like Weave Scope which you can use either on the local K8S or in a free service like MayaOnline. Check out [MayaOnline](https://www.mayaonline.io) where the storage extensions to Scope are put to use.\r\n\r\n![Application relationship with storage (PVC, PV, SC, and CAS)](https://cdn-images-1.medium.com/max/800/1*RQYjI0MdsXf1kj8AGqLJZA.png)\r\n\r\n## Conclusion:\r\n\r\nWe continue to say — With CAS, storage fades away as a concern !! Join our [slack community](https://slack.openebs.io) to find more !!\r\n","slug":"container-attached-storage-cas-taking-off-nicely"},{"id":58,"title":"My First Contribution to OpenEBS \\#OSS\r","author":"Vipul Gupta\r","author_info":"Enter a short bio? No, thank you. If you like to find me or my content, then I would be at http://mixstersite.wordpress.com/\r","date":"28-05-2018\r","tags":["OpenEBS"," Go"," Golang"," Summer Hackfest"," Open Source"],"excerpt":"Writing documentation for any project is tough, be it big or small, propriety or open-source. Rewriting and improving it is even tougher. Let no one tell you any different.\r","content":"\r\nWriting documentation for any project is tough, be it big or small, propriety or open-source. Rewriting and improving it is even tougher. Let no one tell you any different. Take it from someone who scoured through 6000+ lines of documentation written in Markdown spread across 20 or so files and been able to fix about 900 odd lines of them for a major open-source project. That’s how my story goes if you want to know about my first contribution to OpenEBS.\r\n\r\nHonestly, I have little experience in Go, I have never been inclined to use it much. As I am already comfortable, writing code in Python for about a year now. But that doesn’t stop me from learning new languages and technologies. Hence my utmost dedication to cure myself of the “Too Much too Learn” Syndrome. I went to the **Women Who Go meetup** in New Delhi, India for a [Go 101 workshop](https://twitter.com/vipulgupta2048/status/977893034808434689?s=09). And that’s how I got to know about the open-source project, OpenEBS, and their exciting Summer HackFest.\r\n\r\n[OpenEBS](https://openebs.io/) is an open source storage platform that provides persistent and containerized block storage for DevOps and container environments. OpenEBS is also tightly integrated with Kubernetes and is a part of Kubernetes-Incubator project. And works with all popular workloads such as PostgreSQL, Redis, Jenkins etc.\r\n\r\nNow, OpenEBS is still under active development from the team. Hence comes in, [Summer HackFest](https://openebs.io/hackfest). **Summer HackFest** is a unique opportunity for new contributors and people working with Go to develop and fix issues for OpenEBS and their projects such as [Maya](https://mayaonline.io/), [Litmus](https://openebs.io/litmus). By contributing to the Hackfest, you get community access, useful knowledge on working with new technologies, learn new skills and along the way win cool goodies, swag. Also, the chance to take home the grand prize, a laptop. HackFest starts out in April 2018. Being open-source, all contribution was needed to be submitted to [GitHub](https://github.com/openebs/openebs). I did and oh man, I had a good time writing code for OpenEBS. Sounds good. Want to contribute?\r\n\r\n---\r\n\r\n## Let’s get you started\r\n\r\nRefer to this [quick guide](https://github.com/search?utf8=%E2%9C%93&q=org%3Aopenebs+is%3Aissue+label%3Asummerhack+label%3Akind%2Funit-test&type=) to get started. You would also need to be familiar with the basics of Go, hence you can refer to the widely recommended tutorial [https://tour.golang.org/](https://tour.golang.org/), for the same. After that, make sure to join the OpenEBS Slack channel to resolve all doubts and questions that you might have. The link can be found here in the [contributing document](https://github.com/openebs/openebs/blob/master/CONTRIBUTING.md) on their repository. Read the document (I re-wrote it) And you are committed.\r\n\r\nGo to their website that I linked above, and figure out which section of issues you would like to contribute. Once done. Head over there, and do your thing. Push the changes, make that PR and rest is history.\r\n\r\n## Well, sure thing but how was your experience?\r\n\r\n![Contributors to OpenEBS Hackfest](/images/blog/hackfest-contributors.png)\r\n\r\nMy experience has been great so far while contributing to OpenEBS (_I am still actively contributing to it_). Everything was a breeze. They have very flexible rules and easy guidelines, no hard checks with the CI. The reviewers are very helpful, and would assist you in every possible manner ( Shoutout to Kiran Mova !!) I have been working on solving issues in the documentation of OpenEBS and vagrant files that are being used in the project.\r\n\r\nEarlier, I also attended a webinar OpenEBS conducted on Introduction to contributing and solving issues of Maya and scope, which was very informative and helpful. Hence goes on to show their dedication to helping their contributors even further then most people would go. The codebase could be quite intimidating at first, but with time and the helpful answers provided by the very vibrant and active community will keep you going. I can tell you for a fact, that the journey is the reward here.\r\n\r\nI asked so many questions, and never got a blowback. I really appreciated all the support shown to me by the community. The environment is beginner-friendly and very welcoming, great for all new contributors. It couldn’t get any better with the incentives they add to it for contributing.\r\n\r\nI honestly had a lot of fun while contributing. One of the most notable [pull requests](https://github.com/openebs/openebs/pull/1511) of mine to Summer Hackfest was about rewriting and improving the documentation, which received a whopping 392 comments. They were sweet enough to put my name on the website with the fellow contributors and made me the star contributor of the week. Woohoo !! They also awarded me with a book as a token of their appreciation. Thanks, OpenEBS !!\r\n\r\nAnd that’s it for this time, I guess. For all my PR’s to Summer HackFest, [click here](https://github.com/search?utf8=%E2%9C%93&q=org%3Aopenebs+is%3Apr++label%3Asummerhack++author%3Avipulgupta2048+is%3Amerged&type=Issues). I will update the blog post with a picture of the goodies once I receive them (_So excited_). I highly recommend heading over to [https://openebs.io/hackfest](https://openebs.io/hackfest), to take part in this golden opportunity to contribute to such a brilliant project and being a part of their community.\r\n\r\n---\r\n\r\nVipul Gupta ([vipulgupta2048](http://www.letmegooglethat.com/?q=vipulgupta2048)) posts occasional on his blog, [Mixster](http://www.mixstersite.wordpress.com/). Check him out there for more updates like these.\r\n","slug":"my-first-contribution-to-openebs-oss"},{"id":59,"title":"Using Kubernetes Custom Resources for Microservices IPC\r","author":"Ganesh Kumar\r","author_info":"Gopher, Open Source Contributor, Thinker, Health enthusiast\r","date":"11-05-2018\r","tags":["Kubernetes"," Golang"," OpenEBS"," Microservices"],"excerpt":"This blog talks about why I used Custom Resources as a way for communication between different microservices (aka Kubernetes Pods).\r","content":"\r\nThis blog talks about why I used [Custom Resources](https://kubernetes.io/docs/concepts/api-extension/custom-resources) as a way for communication between different microservices (aka Kubernetes Pods).\r\n\r\nOpenEBS is a fully containerized storage solution running within Kubernetes. Infact [OpenEBS](https://docs.openebs.io/) extends the Kubernetes cluster functionality to manage storage and stateful workloads.\r\n\r\nOpenEBS has an operator (or orchestration component) called [Maya](https://github.com/openebs/maya) (magic) that relays Volume management operations to several storage engines. OpenEBS already supports [Jiva](https://github.com/openebs/jiva) based storage engine. The purpose is to plugin a more independent [cStor](https://github.com/openebs/cstor)based storage engine (making use of zfs on userspace).\r\n\r\nI essentially have a user interacting with OpenEBS Maya using PV, PVC, StorageClasses etc. and OpenEBS Maya interacts with cStor Pods. I will be focusing on the design considerations for interactions between OpenEBS Maya and cStor Pods.\r\n\r\n![Architecture](/images/blog/architecture.png)\r\n\r\n_1 — Shows user creating StoragePoolClaim (SPC) CR, with details like the number and type of pools to be created. Let us consider, SPC specifies a cStor pool should be created._\r\n\r\n_2 — Maya has a custom controller that watches for the SPC CR and it will go ahead and create the cStor Pods with a cstor-pool container and a side-car cstor-pool-mgmt that has a CLI interface for creating pools and volumes. Side-car container (following the Kubernetes Ambassador Pattern), helps in translating the Pool and Volume operations triggered by Maya into the corresponding CLI commands._\r\n\r\n_3 — Depending on the user’s request for creating a pool or a volume, Maya will create CStorPool and CStorVolumeReplica CRs respectively. Note that, I could have had the cstor-pool-mgmt container expose an API service that Maya could have invoked. Instead, I decided to use CRs and I will explain why in the following sections._\r\n\r\n_4 — cstor-pool-mgmt sidecar application watches for CRs of CStorPool and CStorVolumeReplica and performs pool — volume operations._\r\n\r\n**One of the core design constraint while deciding on inter-pod communication between Maya and CStor Pod is that:** _When the user requests for a Volume, the cluster state may not be fully ready to satisfy all the criteria — for example, User requests for 3 replicas but there are only 2 nodes running. The request should be cached and a third replica has to be provisioned whenever a new node gets added to the cluster._\r\n\r\nDevelopers normally go with an approach to make a REST/gRPC call to the receiver and store in a database, running in separate pod/statefulset. But OpenEBS thinks beyond that.\r\n\r\nNow consider, that I had used the traditional approach of using a REST/gRPC method of interactions between Maya and CStor Pods, then Maya would have to implement/consider cases like:\r\n\r\n- Where to store the state of current request, as the request can’t be serviced immediately depending on the cluster state. This is required to handle the case where the node running Maya can itself go down.\r\n- When working in a scaled environment, when there are multiple Maya pods, who gets to service the requests and when one of the pod goes down, should the other take it over or not?\r\n- How to handle the case where, Maya sends the request to the CStor container and then it goes boom (after all this is Kubernetes Cluster and they are supposed to handle all kinds of Chaos), who handles the results of the operation at CStor. In other words, how to implement a 2-phase commit?\r\n\r\n_However, if you look at my design constraint, doesn’t it sound similar to how a Kubernetes deployment with 3 replicas work?_ The user defines a desired state (in this case Maya) and the controllers make it happen eventually. So, why not just, be a roman when in rome.\r\n\r\n### Thats exactly what OpenEBS does!\r\n\r\nOpenEBS goes with `watch`-er approach. i.e., watch [**k8s custom resource definition**](https://kubernetes.io/docs/concepts/api-extension/custom-resources). If a pool (virtual disk) must be created on top of the actual disk, Maya creates a custom resource (named CStorPool), and a pod running cstor-pool-mgmt watcher gets an event for corresponding resource request and starts performing pool related operations. Cool, isn’t it?\r\n\r\n### Where does the custom resource get stored?\r\n\r\nkubernetes etcd. You pronounced it right, that’s `yetsed`, :-)\r\n\r\n### How is custom resource efficient?\r\n\r\n- Storing critical details in a separate pod-database, leads to pod level consistency. Storing in etcd leads to **cluster level consistency**.\r\n- Even if the **receiver is not running**, when the request is generated, the receiver-watcher gets an event, as and when it starts running.\r\n- Users can access the resources via **k8s cli** — `kubectl get <crd-name>`\r\n- Update the status of request on the same custom resource.\r\n\r\n### What is the problem with custom resource?\r\n\r\n- It is not suitable for transactional communication. (Say if an OTP request needs to be done within 20 seconds, it is not applicable to go with, “as and when up” approach).\r\n  Solution: Before making any transactional call, verify status of receiver and make a REST/gRPC API call. No other go, :-(\r\n- It is slightly complex to implement watcher.\r\n  Solution: My next blog will address an easy way to implement CRD watcher, how to solve issues with watcher design and different ways to implement watching controller. Practise, you become perfect; Follow us, you become fantastic :-)\r\n\r\nSupport and follow us [**@gkGaneshR**](https://twitter.com/gkGaneshR) and [**@openebs**](https://twitter.com/openebs) to get instant updates.\r\n\r\nThanks [Kiran](https://twitter.com/kiranmova) for your valuable support. We at OpenEBS are always looking for help and feedback from Community. Please join us on [Slack](https://slack.openebs.io/) or comment on the [design doc](https://docs.google.com/document/d/1Q5W3uHktHa-vOm8oGp-3kpAQ3V1tvyk5AYmxxtf57Rg/edit?usp=sharing) and related [Pull Request](https://github.com/openebs/maya/pull/284).\r\n\r\n**Summary**\r\n\r\n- K8s CRD becomes a good alternative to REST/gRPC API for “push to perform” operations.\r\n- Few more implementation details will be covered in upcoming blogs — Follow us for updates.\r\n","slug":"using-kubernetes-custom-resources-for-microservices-ipc"},{"id":60,"title":"Announcing MayaOnline — A SaaS platform for freeing data management from its traditional…\r","author":"Uma Mukkara\r","author_info":"Contributor at openebs.io, Co-founder & COO@MayaData. Uma led product development in the early days of MayaData (CloudByte).\r","date":"01-05-2018\r","tags":["Gitops"," Kubernetes"," Mayaonline"," OpenEBS"," Stateful Workloads"],"excerpt":"At this Kubecon, we, at MayaData, are thrilled to make couple of announcements. One of them is the launch of beta version of MayaOnline.\r","content":"\r\nAt this Kubecon, we, at MayaData, are thrilled to make couple of [announcements](https://www.prnewswire.com/news-releases/mayadata-releases-litmus---open-source-chaos-engineering-for-kubernetes--free-tier-of-mayaonline-681458381.html). One of them is the launch of beta version of [MayaOnline](https://mayaonline.io). MayaOnline provides **free** visibility, ChatOps and cross-cloud control for users running OpenEBS or just local disks on Kubernetes clusters.\r\n\r\nMayaOnline provides application developers, Kubernetes administrators and CIOs different variants of visibility into stateful applications data and helps these users to better manage data operations.\r\n\r\nIt has become an almost untold expectation that the modern era tools being built for easing / helping DevOps are built with easy integration into GitOps; change controlling configurations much in the way that code is managed has been identified as a key determinant of success. MayaOnline takes the GitOps philosophy into its design; configurations come from single source of truth — Git repositories.\r\n\r\nTalking about simple integrations — we also have made APIs first class citizens in the design of MayaOnline. Almost anything you can do via the GUI you can do via APIs.\r\n\r\nKubernetes’ stateful applications journey is still evolving. We observe two primary usage patterns.\r\n\r\n1. Perhaps the most common pattern is running stateful workloads with the help of open source storage that is easy to use and operate; if the open source storage delivering capabilities to microservices and containers is itself built from microservices and containers — all the better.. OpenEBS is a leading example of this pattern, with an architecture described as [CAS](https://www.cncf.io/blog/2018/04/19/container-attached-storage-a-primer/) or container attached storage. In OpenEBS, data volumes are containerized and each workload has its own storage controller enabling teams to be fully in control of their storage without any central single point of failure (or latency)\r\n2. A second common pattern that we see is perhaps best characterized by NoSql workloads such as Cassandra, that manage the data operations themselves (replication, snapshotting and rebuilding) and therefore for which just raw storage underneath is good enough. This type of stateful workloads are starting to use Kubernetes Local PVs. However, the raw storage needs to be planned, monitoring and managed for Local PVs too otherwise your Cassandra and application engineers spend all their time trying to figure out why the ring is rebalancing again and again.\r\n\r\n**_MayaOnline is intended to be an all in one storage resource planning, monitoring and management solution for Kubernetes deployments across clouds; we do support the above patterns, allowing you to manage OpenEBS and Local PVs as the underlying storage choices._**\r\n\r\nMayaOnline is released as a beta version today and comes live with the following features. In this post, I discuss MayaOnline’s current capabilities and delve a bit into the vision as well.\r\n\r\n## Sifting through your PVCs and PVs:\r\n\r\nMicroservices architectures typically split applications into multiple Kubernetes PODs. It is not uncommon to have a production Kubernetes cluster with hundreds of PODs, in some cases even thousands. Each POD can have multiple volumes claims (PVCs), derived from a combination of storage classes (SCs) and resulting in volumes (PVs). Thanks in large part to our newly released Weave Scope integration, MayaOnline provides an efficient way to view, debug and for some scenarios manage these PVC and PVs and their relationships.\r\n\r\nOne simple use case is sifting through the snapshots of a volume and creating a clone out of one.\r\n\r\n![Browse storage configuration of a cluster](https://cdn-images-1.medium.com/max/800/1*uEEzklDvtzepvdjGUIQdJQ.gif)\r\n\r\n## Managing hyper-convergence:\r\n\r\nThe same problem of sifting through hundreds of objects and their logical and physical relationships can arise while managing underlying storage media, including disks, cloud volumes, SSDs, and more. MayaOnline helps here as well, simplifying disk monitoring and management, the pooling of disks, expansion of capacity . OpenEBS NDM is a key piece go get the hyper-convergence management right, you can refer to [this blog](https://blog.openebs.io/achieving-native-hyper-convergence-in-kubernetes-cb93e0bcf5d3) for more thoughts on contributing NDM to Kubernetes itself.\r\n\r\n![Browse disks relationship to a volume](https://cdn-images-1.medium.com/max/800/1*7w2jYA2KghNxT7c96snCxw.gif)\r\n\r\n## Visibility:\r\n\r\nPrometheus is a popular project applying a time series approach to monitoring. We use Prometheus in MayaOnline in a variety of ways. Thanks to Prometheus Developers, Operators and CIOs have readily customized dashboards for volume data and for storage resources data within and across clusters. MayaOnline makes it easy to aggregate Prometheus metrics from various clusters spread across multiple clusters and on-prem data centers. External API support, customization of Prometheus dashboards, and the creation of new dashboards are other favorite features of MayaOnline.\r\n\r\n![Comprehensive metrics of a volume, cluster and organization](https://cdn-images-1.medium.com/max/800/1*ZeFadSNW8zEQ9DWaotiOhA.gif)\r\n\r\n## ChatOps — Dedicated chatbot for automated operations:\r\n\r\nGetting useful alerts on time and be able to act on them is an integral part of data management operations. With MayaOnline, one can view and manage the alerts centrally by logging onto MayaOnline — or can just have them pop up in your chat thanks to our dedicated chatbot, which we call MuleBot. MuleBot is a [Slack application](http://slack.com/apps/A7XH78AAH-mulebot) that works hard to deliver alerts to the Slack channels you want while participating in your GitOps workflow by interacting with your teams end users, allowing them to storage infrastructure right from the slack channel.\r\n\r\n![MuleBot Slack Application](https://cdn-images-1.medium.com/max/800/0*U47i8j0o34sBq3AW.)\r\n\r\n## Looking into the future of MayaOnline:\r\n\r\n### Seamless cross cloud data movement:\r\n\r\nThough Kubernetes solves the problem of cloud lock-in with regard to application provisioning and management — by being a common orchestration framework and set of operations APIs across environments -, we still have the problem of lock-in caused by data gravity. MayaOnline’s cMotion feature — which we are working on actively and have demoed in the past — will help with seamless and policy based workload movements. cMotion APIs at MayaOnline will be used to automate workload movement across clouds or Kubernetes clusters right from the user’s DevOps platforms.\r\n\r\n### Learning workloads\r\n\r\nOne of the reasons we made MayaOnline freely available is to learn from users how they use OpenEBS and, more broadly, how they are managing stateful workloads on Kubernetes.\r\n\r\nIn the not too distant future we will use what we learn from MayaOnline to nudge users towards better approaches. For example, we are investigating how to suggest better storage policies based on our experience from many users. For example, certain workloads may benefit from larger block sizes and a replication approach optimized for videos — OpenEBS allows this kind of extreme customization thanks to its CAS architecture; with MayaOnline we intend to coach users towards better approaches.\r\n\r\n### It is free. Import your Kubernetes cluster today !\r\n\r\nMayaOnline follows a [freemium](https://en.wikipedia.org/wiki/Freemium) model. Using the free tier, one can manage certain number of Kubernetes clusters for free, forever.\r\n\r\nSign-up with your github credentials and import your Kubernetes cluster, we are eagerly looking for your feedback !!\r\n","slug":"announcing-mayaonline-a-saas-platform-for-freeing-data-management-from-its-traditional"},{"id":61,"title":"Litmus - Release a chaos monkey on your Kubernetes Stateful Workloads!\r","author":"Karthik Satchitanand\r","author_info":"Karthik has been into the Design and Development of tools for infrastructure as code, software testing performance & benchmarking & chaos engineering.\r","date":"01-05-2018\r","tags":["Chaos"," Kubernetes"," Litmus"," Software Testing"," E2e"," Chaos Engineering"],"excerpt":"If you are a Kubernetes Enthusiast and working on stateful workloads, you may be asking yourself\r","content":"\r\n**In this blog we quickly talk about what led us to build Litmus and to open source it.**\r\n\r\nIf you are a Kubernetes Enthusiast and working on stateful workloads, you may be asking yourself:\r\n\r\n“With all the options I have to run Kubernetes — the permutations are endless — how can I be sure that my particular mix of options works well end to end at keeping my data safe and accessible?”\r\n\r\nYou are not alone, as can be seen by the ever increasing conversations on Kubernetes sig-storage slack channel and other forums like Reddit or Twitter. To just pick a few conversations:\r\n\r\n![Is it really recommended to run stateful workloads like MySQL on Kubernetes?](https://cdn-images-1.medium.com/max/800/1*6VJXdgFpuwD-fUkEKPo0GA.png)\r\n\r\n[Is it really recommended to run stateful workloads like MySQL on Kubernetes?](https://www.reddit.com/r/kubernetes/comments/88fxdg/is_it_really_not_recommended_to_run_stateful/)\r\n\r\n![What are the storage solutions offered in Kubernetes today? Which one will suit my workload](https://cdn-images-1.medium.com/max/800/1*5s60fO7nzhZfC3SFNiY0gA.png)\r\n\r\n[What are the storage solutions offered in Kubernetes today? Which one will suit my workload](https://twitter.com/rothgar/status/978694465975083009)\r\n\r\nAnd say, you somehow have made the journey to explore different solutions out there, mostly referring to product documentation and blogs, how can you be sure that the solution will continue to work in your enterprise environment?\r\n\r\nAs enterprises move to DevOps and microservices, more and more of the infrastructure from policy engines through storage and everything in between such as DNS, tracing, logging and more are selected and operated by all in one teams. With this control and autonomy comes greater agility — and all too often, _stress_.\r\n\r\nMeanwhile, infrastructure vendors and projects are also (we know first hand) challenged to keep their end-to-end (e2e) and chaos engineering frameworks updated with the ever-increasing permutations of deployment scenarios. Kubernetes itself is changing, new providers emerge every day, workloads are changing, and all of it is increasingly simple to adopt and deploy. As a storage solution provider we simply cannot have the resulting explosion of “corner cases” go untested.\r\n\r\nThe solution providers can go one step ahead to open source their project, but it still doesn’t help the users to ensure that the selected Kubernetes stack works in their highly distributed and agile environments and they are not called to fight fires at 3 AM.\r\n\r\n![Fire-fighting production issues !!](https://cdn-images-1.medium.com/max/800/0*qX8CliW_E3gKMURn.)\r\n\r\n“What’s a person to do? Test, test, release the chaos monkeys, and test again!”\r\n\r\nThankfully, Kubernetes and containerization and Go and some software engineering we’re happy to share make it much easier to provide end to end validation in real world conditions !\r\n\r\n#### So — What is Litmus?\r\n\r\n**_Litmus is a community for e-2-e testing and chaos engineering for Kubernetes, focusing on stateful workloads._**\r\n\r\nThe primary objective of Litmus is to ensure a consistent and reliable behavior of Kubernetes for various persistent workloads and to catch hard-to-test bugs and unacceptable behaviors before users do. Litmus can detect many more real-world issues than relatively simple issues identified by unit and integration tests.\r\n\r\nLitmus can also be used to determine if a given Kubernetes deployment is suitable for stateful workloads. While Litmus tests and metrics were developed initially to test the resilience of container attached storage from OpenEBS and others — we realized that the use cases are broader and overall system resilience can be characterized, which is a major reason we are open sourcing our efforts and putting the time into starting the Litmus community.\r\n\r\nLitmus tests range from initial setup and configuration validation to deploying and running persistent workloads under various conditions and failures.\r\n\r\n_What sets Litmus apart is not just its intent of being an end to end testing framework that can be embedded into any CI/CD pipeline, but the ease with which different teams from product developers to customers can contribute to the tests. Litmus allows for defining scenarios using native language specifications (English !!) OR a set of easy-to-define/understand YAML templates which are internally converted into test scripts, with a simple Kubernetes manifest as the end-product._\r\n\r\nHere is a simple test, defined in plain English:\r\n\r\n![Simple test in plain english](https://cdn-images-1.medium.com/max/800/0*ar6cYX2rEJ7Nh_G2.)\r\n\r\n## How to get involved with Litmus?\r\n\r\nFirst, it might be useful to understand the basic pieces of Litmus. Litmus has the following major components:\r\n\r\n![Litmus: High level architecture](https://cdn-images-1.medium.com/max/800/1*CdBbpkSilx3aJnZA3tiAjQ.png)\r\n\r\n- **Deployments** that help in setting up different types of Kubernetes Clusters like on-premise, cloud, OpenShift, etc. The default is that the deployments provision and configure OpenEBS storage, however, these deployments are easily extended to support other storage and we are happy to help any user or storage vendor to build additional deployments.\r\n- **Facilitators** for test execution that aid: defining and running test suites, capturing logs and generating reports about the test runs, fault/error injection tools that help to perform chaos tests, examples that demonstrate how to integrate these test pipelines with Slack notifications\r\n- **Test modules** that are triggered from within a Kubernetes cluster. Think of these as containerized tests. For instance, the **_mysql-client_** can be launched as a pod to validate MySQL resiliency while the underlying nodes and the connected storage are subjected to chaos engineering.\r\n- **Tests** that themselves are written in easy to understand formats, either in plain English (thanks [Godog](https://github.com/DATA-DOG/godog)!) or in Ansible Playbooks. These tests primarily interact with the Kubernetes cluster via **_kubectl_** making them highly portable.\r\n\r\nLitmus can be used to test a given workload in a variety of Kubernetes environments, for example, a developer minikube or a GKE cluster with a specific storage solution or as a part of a full-fledged CI setup.\r\n\r\nLitmus is early and needs all the help you can provide to have it cover the ever-growing Kubernetes landscape. Checkout the [Litmus Project](https://github.com/openebs/litmus) on Github for more details or if you are at KubeCon EU, please join us for the talk this Friday on [End to End testing with Kubectl](https://kccnceu18.sched.com/event/DqwD/using-kubectl-to-run-your-end-to-end-tests-amit-kumar-das-uday-kiran-mayadata-intermediate-skill-level) to learn more about how we have built Litmus and a quic\r\n\r\n#### Conclusion:\r\n\r\nPlease welcome Litmus into the world! We’re pretty sure it addresses a set of needs being felt by everyone from developers and operators to service providers and cloud native open source projects such as OpenEBS. With Litmus we use microservices and containers and Kubernetes to test, validate and characterize environments end to end. Your feedback is welcome and needed. Thanks for reading!\r\n","slug":"litmus-release-a-chaos-monkey-on-your-kubernetes-stateful-workloads"},{"id":62,"title":"How do I create an OpenEBS storage pool on Google Persistent Disk\r","author":"Karthik Satchitanand\r","author_info":"Karthik has been into the Design and Development of tools for infrastructure as code, software testing performance & benchmarking & chaos engineering.\r","date":"13-04-2018\r","tags":["Docker"," OpenEBS"," Solutions"," Google Cloud Platform"," Kubernetes"],"excerpt":"The OpenEBS volume replicas, which are the actual backend storage units of the OpenEBS iSCSI target currently store the data in a hostPath on the Kubernetes nodes.\r","content":"\r\nThis article belongs to #HowDoI series on Kubernetes and OpenEBS.\r\n\r\nThe OpenEBS volume replicas, which are the actual backend storage units of the OpenEBS iSCSI target currently store the data in a hostPath on the Kubernetes nodes. By default, a folder with the volume (PV) name is created on the root filesystem, in a parent directory (/var/openebs) & bind mounted into the container during the replica pod instantiation. This parent directory (also created if not already available), which is basically a persistent path to hold the individual volumes is referred to as a **_Storage Pool_**.\r\n\r\nNote: The notion of the storage pool described above is specific to the current default storage engine,i.e., Jiva. Future releases may see availability of additional storage-engines which can consume block devices instead of hostdir to create storage pools\r\n\r\nFor various reasons, it may be desirable to create this storage pool on an external disk (GPD, EBS, SAN) mounted into specific locations on the Kubernetes nodes. This is facilitated by the **OpenEBS storage pool policy**, which defines the storage pool as a **_Kubernetes Custom Resource_** with the persistent path as an attribute.\r\n\r\nThis blog will focus on the steps to be followed to create the OpenEBS PV on Google Persistent Disks (GPD).\r\n\r\n## PRE-REQUISITES\r\n\r\n- 3-Node GKE cluster with the OpenEBS Operator installed (Refer: [https://docs.openebs.io/docs/cloudsolutions.html](https://docs.openebs.io/docs/cloudsolutions.html))\r\n- 3-Google Persistent Disks, one attached to each node of the cluster.This can be done using the **_gcloud compute disks create_** & **_gcloud compute instances attach-disk_** commands (Refer for console steps: [https://cloud.google.com/compute/docs/disks/add-persistent-disk#create_disk](https://cloud.google.com/compute/docs/disks/add-persistent-disk#create_disk))\r\n\r\n### STEP-1: Format the GPDs & Mount into desired path\r\n\r\nOn each node, perform the following actions :\r\n\r\n- Switch to root user _sudo su –_\r\n- Identify GPD attached _fdisk -l_\r\n\r\n  ```\r\n  root@gke-oebs-staging-default-pool-7cc7e313-0xs4:~# fdisk -l\r\n  Disk /dev/sda: 100 GiB, 107374182400 bytes, 209715200 sectors\r\n  Units: sectors of 1 \\* 512 = 512 bytes\r\n  Sector size (logical/physical): 512 bytes / 4096 bytes\r\n  I/O size (minimum/optimal): 4096 bytes / 4096 bytes\r\n  Disklabel type: dos\r\n  Disk identifier: 0x635eaac1\r\n\r\n  Device Boot Start End Sectors Size Id Type\r\n  /dev/sda1 \\* 2048 209715166 209713119 100G 83 Linux\r\n\r\n  Disk /dev/sdb: 10 GiB, 10737418240 bytes, 20971520 sectors\r\n  Units: sectors of 1 \\* 512 = 512 bytes\r\n  Sector size (logical/physical): 512 bytes / 4096 bytes\r\n  I/O size (minimum/optimal): 4096 bytes / 4096 bytes\r\n  ```\r\n\r\n- Format the disk with, say ext4 fs (_mkfs.ext4 /dev/sd<>)_\r\n\r\n  ```\r\n  root@gke-oebs-staging-default-pool-7cc7e313-0xs4:~# mkfs.ext4 /dev/sdb\r\n  mke2fs 1.42.13 (17-May-2015)\r\n  /dev/sdb contains a ext4 file system\r\n  last mounted on /openebs on Fri Apr 13 05:03:42 2018\r\n  Proceed anyway? (y,n) y\r\n  Discarding device blocks: done\r\n    Creating filesystem with 2621440 4k blocks and 655360 inodes\r\n  Filesystem UUID: 87d36681-d5f3-4169-b7fc-1f2f95bd527e\r\n  Superblock backups stored on blocks:\r\n  32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632\r\n\r\n  Allocating group tables: done\r\n    Writing inode tables: done\r\n    Creating journal (32768 blocks): done\r\n  Writing superblocks and filesystem accounting information: done\r\n  ```\r\n\r\n- Mount the disk into desired mount point (_mount -o sync /dev/sd<> /mnt/openebs_)\r\n\r\n  ```\r\n  root@gke-oebs-staging-default-pool-7cc7e313-0xs4:~# mount -o sync /dev/sdb /mnt/openebs/\r\n  root@gke-oebs-staging-default-pool-7cc7e313-0xs4:~# mount | grep openebs\r\n  /dev/sdb on /mnt/openebs type ext4 (rw,relatime,sync,data=ordered)\r\n  ```\r\n\r\n### STEP-2 : Create a storage pool custom resource\r\n\r\n- Construct a storage pool resource specification as shown below & apply it (Note that the custom resource definition for the storage pool is already applied as part of the operator install)\r\n\r\n  ```\r\n  apiVersion: openebs.io/v1alpha1\r\n  kind: StoragePool\r\n  metadata:\r\n  name: sp-mntdir\r\n  type: hostdir\r\n  spec:\r\n  path: \"/mnt/openebs\"\r\n  ```\r\n\r\n### STEP-3 : Refer the storage pool in a custom storage class\r\n\r\n```\r\n---\r\napiVersion: storage.k8s.io/v1\r\nkind: StorageClass\r\nmetadata:\r\n    name: openebs-custom\r\nprovisioner: openebs.io/provisioner-iscsi\r\nparameters:\r\n  openebs.io/storage-pool: \"sp-mntdir\"\r\n  openebs.io/jiva-replica-count: \"3\"\r\n  openebs.io/volume-monitor: \"true\"\r\n  openebs.io/capacity: 5G\r\n```\r\n\r\n### STEP-4 : Use the custom storage class in an application’s PVC spec\r\n\r\n```\r\n---\r\nkind: PersistentVolumeClaim\r\napiVersion: v1\r\nmetadata:\r\n  name: demo-vol1-claim\r\nspec:\r\n  storageClassName: openebs-custom\r\n  accessModes:\r\n    - ReadWriteOnce\r\n  resources:\r\n    requests:\r\n      storage: 5G\r\n```\r\n\r\n### STEP-5 : Confirm volume is created on the storage pool\r\n\r\n- Once the OpenEBS PV is created (_kubectl get pv, kubectl get pods_), list the contents of the custom persistent path mentioned in the storage pool custom resource. It should contain a folder with the PV name consisting of the sparse files (disk image files)\r\n\r\n  ```\r\n  karthik_s@strong-eon-153112:~$ kubectl get pv\r\n  NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE\r\n  pvc-556e7ab7-3ed9-11e8-8e6a-42010a800216 5G RWO Delete Bound default/demo-vol1-claim openebs-custom 59m\r\n\r\n  root@gke-oebs-staging-default-pool-7cc7e313-0xs4:~# ls /mnt/openebs/\r\n  lost+found pvc-556e7ab7-3ed9-11e8-8e6a-42010a800216\r\n  ```\r\n\r\n### GOTCHAS !!\r\n\r\n_Issue_: GPDs are detached in the event of a) Cluster resize (downscale/upscale) , b) upgrades & c) VM halts\r\n\r\n- No options to add “additional disks” during cluster creation\r\n- Instance templates are “immutable”, disks have to be added to instances separately\r\n\r\n_Workaround_: Perform a manual re-attach in above situations (Enlarged root disks are an option, but generally not recommended)\r\n","slug":"how-do-i-create-an-openebs-storage-pool-on-google-persistent-disk"},{"id":63,"title":"Using chaoskube with OpenEBS.\r","author":"Sudarshan Darga\r","author_info":"Senior Software Engineer at MayaData\r","date":"12-04-2018\r","tags":["OpenEBS"," Chaos Engineering"," Kubernetes"," Solutions"],"excerpt":"Chaos Engineering is the discipline of proving the reliability of any system by causing “chaos”. The word ‘Chaos’ means the state of confusion or failure caused due to unexpected reason.\r","content":"\r\n**Chaos Engineering** is the discipline of proving the reliability of any system by causing “chaos”. The word ‘Chaos’ means the state of confusion or failure caused due to unexpected reason.\r\n\r\n### Failures can be caused due to:\r\n\r\n- Power outages.\r\n- Software bugs.\r\n- Human Error.\r\n\r\n### Since failure is unavoidable.\r\n\r\n- Why not deliberately introduce failure to ensure the system can deal with the failure?\r\n- Chaoskube is one such tool, which can be used to introduce pod failures on Kubernetes Cluster.\r\n\r\n### Overview of Chaoskube:\r\n\r\n- Chaoskube is an open source Chaos Testing tool.\r\n- Written in GO language.\r\n- Can induce pod/controller failures on K8s Cluster.\r\n- Can kill pods by specifying the labels, namespaces.\r\n- Simple and easy to run.\r\n\r\n## Setup Chaoskube infrastructure on 3 node Kubernetes Cluster:\r\n\r\n```\r\nubuntu@kubemaster-01:~$ kubectl get nodes\r\nNAME            STATUS    ROLES     AGE       VERSION\r\nkubemaster-01   Ready     master    2d        v1.8.8\r\nkubeminion-01   Ready     <none>    2d        v1.8.8\r\nkubeminion-02   Ready     <none>    2d        v1.8.8\r\nkubeminion-03   Ready     <none>    2d        v1.8.8\r\nubuntu@kubemaster-01:~$ kubectl apply -f https://raw.githubusercontent.com/openebs/openebs/master/e2e/ansible/playbooks/resiliency/test-ctrl-failure/chaoskube.yaml\r\ndeployment \"chaoskube\" created\r\nserviceaccount \"chaoskube\" created\r\nubuntu@kubemaster-01:~$ kubectl apply -f https://raw.githubusercontent.com/openebs/openebs/master/e2e/ansible/playbooks/resiliency/test-ctrl-failure/rbac.yaml\r\nclusterrole \"chaoskube\" created\r\nclusterrolebinding \"chaoskube\" created\r\nubuntu@kubemaster-01:~$ kubectl get pods\r\nNAME                                   READY     STATUS    RESTARTS   AGE\r\nchaoskube-55fc8f5f6d-tb6hj             1/1       Running   0          32s\r\nmaya-apiserver-69f9db69-b9qxk          1/1       Running   0          2d\r\nopenebs-provisioner-77cb47986c-w6wbz   1/1       Running   1          2d\r\n```\r\n\r\n## Deploy Percona application on OpenEBS volume with Liveness probe:\r\n\r\n```\r\nubuntu@kubemaster-01:~$ kubectl apply -f https://raw.githubusercontent.com/openebs/elves/master/e2e/percona-liveness/percona.yaml\r\ndeployment \"percona\" created\r\npersistentvolumeclaim \"demo-vol1-claim\" created\r\nservice \"percona-mysql\" created\r\nubuntu@kubemaster-01:~$ kubectl create configmap sqltest https://raw.githubusercontent.com/openebs/elves/master/e2e/percona-liveness/sql-test.sh\r\nconfigmap \"sqltest\" created\r\nubuntu@kubemaster-01:~$ kubectl get pods\r\nNAME                                                             READY     STATUS    RESTARTS   AGE\r\nchaoskube-55fc8f5f6d-tb6hj                                       1/1       Running   0          6m\r\nmaya-apiserver-69f9db69-b9qxk                                    1/1       Running   0          2d\r\nopenebs-provisioner-77cb47986c-w6wbz                             1/1       Running   1          2d\r\npercona-85b8997987-dg6jm                                         1/1       Running   0          1m\r\npvc-0f07b9ae-3eff-11e8-8f7e-02b983f0a4db-ctrl-6fcb879bdb-vd8t5   2/2       Running   0          1m\r\npvc-0f07b9ae-3eff-11e8-8f7e-02b983f0a4db-rep-5df559c66c-64rv5    1/1       Running   0          1m\r\npvc-0f07b9ae-3eff-11e8-8f7e-02b983f0a4db-rep-5df559c66c-b5v25    1/1       Running   0          1m\r\npvc-0f07b9ae-3eff-11e8-8f7e-02b983f0a4db-rep-5df559c66c-gs69w    1/1       Running   0          1m\r\n```\r\n\r\n## Induce controller failure using Chaoskube:\r\n\r\n- Induce failure on pod with label ‘openebs/controller=jiva-controller’ for duration of 60 seconds with interval of 20 seconds, which means it will induce controller pod failure for every 20 seconds for 3 times.\r\n\r\n  ```\r\n  kubectl exec chaoskube-55fc8f5f6d-tb6hj -- timeout -t 60 chaoskube --labels 'openebs/controller=jiva-controller' --no-dry-run --interval=20s --debug\r\n  ```\r\n\r\n- Output should look something like this:\r\n\r\n  ```\r\n  time=\"2018-04-13T09:50:36Z\" level=info msg=\"terminating pod\" name=pvc-0f07b9ae-3eff-11e8-8f7e-02b983f0a4db-ctrl-6fcb879bdb-vd8t5 namespace=default\r\n  time=\"2018-04-13T09:50:36Z\" level=debug msg=sleeping duration=20s\r\n  ```\r\n\r\n- Lets observe the failure induces by watching `kubectl get pods` for every 2 seconds.\r\n\r\n  ```\r\n  Every 2.0s: kubectl get pods Fri Apr 13 09:55:35 2018\r\n  NAME READY STATUS RESTARTS AGE\r\n  chaoskube-55fc8f5f6d-tb6hj 1/1 Running 0 16m\r\n  maya-apiserver-69f9db69-b9qxk 1/1 Running 0 2d\r\n  openebs-provisioner-77cb47986c-w6wbz 1/1 Running 1 2d\r\n  percona-85b8997987-dg6jm 1/1 Running 7 12m\r\n  pvc-0f07b9ae-3eff-11e8-8f7e-02b983f0a4db-ctrl-6fcb879bdb-nh5fk 2/2 Running 0 15s\r\n  pvc-0f07b9ae-3eff-11e8-8f7e-02b983f0a4db-rep-5df559c66c-64rv5 1/1 Running 0 12m\r\n  pvc-0f07b9ae-3eff-11e8-8f7e-02b983f0a4db-rep-5df559c66c-b5v25 1/1 Running 0 12m\r\n  pvc-0f07b9ae-3eff-11e8-8f7e-02b983f0a4db-rep-5df559c66c-gs69w 1/1 Running 0 12m\r\n  ```\r\n\r\n- Observe that percona application pod with liveness probe is still running after inducing openebs controller pod failure using chaoskube. Hence, the system is reliable after causing ‘Chaos’.\r\n\r\n### Reference Links:\r\n\r\n- [https://github.com/linki/chaoskube](https://github.com/linki/chaoskube)\r\n- [https://docs.openebs.io/](https://docs.openebs.io/)\r\n","slug":"using-chaoskube-with-openebs"},{"id":64,"title":"How do I pin the OpenEBS Replica Pod(s) to the Kubernetes Nodes where they were scheduled?\r","author":"Amit Kumar Das\r","author_info":"Engineer the DAO\r","date":"26-03-2018\r","tags":["Howdoi"," Kubernetes"," OpenEBS"," Storage"," Solutions"," Tutorials"],"excerpt":"A OpenEBS Volume comprises of a Controller pod and one or more Replica pod(s). Controller pod (also known as a Target pod) is the one to which the application can make an iSCSI connection.\r","content":"\r\nThis article belongs to #HowDoI series on Kubernetes and OpenEBS.\r\n\r\nA OpenEBS Volume comprises of a Controller pod and one or more Replica pod(s). Controller pod (also known as a Target pod) is the one to which the application can make an iSCSI connection. The Replica pods are the ones that access the underlying disk resources for storing the data.\r\n\r\n**Use Case #1: In my Kubernetes cluster, [_OpenEBS volume pods are scheduled on appropriate nodes_](https://blog.openebs.io/how-do-i-configure-openebs-to-use-storage-on-specific-kubernetes-nodes-361e3e842a78). This is all fine till the cluster experiences a disruption due to network partition. Kubernetes tries to evict & re-schedule these volume pods into newer nodes that does not have the underlying data. This results in volume getting into offline state. I want the OpenEBS volume pods to stick to the nodes they were originally placed.**\r\n\r\n**Solution**: Patch the Replica deployment with **nodeAffinity** property\r\n\r\nAs per Kubernetes docs, nodeAffinity allows you to constrain which nodes your pod is eligible to be scheduled on. It is based on labels on the node.\r\n\r\nThere are currently two types of node affinity:\r\n\r\n– `requiredDuringSchedulingIgnoredDuringExecution` &\r\n\r\n– `preferredDuringSchedulingIgnoredDuringExecution`\r\n\r\nThese node affinity types can be thought of “_hard_” vs. “_soft_” affinity respectively.\r\n\r\n- _Hard_ affinity states that pod will be scheduled only if the conditions are met.\r\n- _Soft_ affinity implies Kubernetes will make a best effort but the affinity may not be guaranteed.\r\n\r\nWe shall make use of `hard affinity` as this fits perfectly to the needs of Replica deployment.\r\n\r\nSteps required to patch the Replica deployment are summarised below:\r\n\r\n**Step 1**:- Replica pod(s) gets scheduled by Kubernetes default scheduler (via OpenEBS provisioner — a dynamic Kubernetes storage provisioner)\r\n\r\n**Step 2**:- Wait till replica pod(s) get into `Running` state\r\n\r\n**Step 3**:- Operator determines the node(s) on which the replica pod(s) are scheduled\r\n\r\n**Step 4**:- Replica deployment is patched with nodeAffinity\r\n\r\n```bash\r\n# REPLACE <namespace-where-openebs-pods-are-deployed> WITH ACTUAL NAMESPACE\r\n# REPLACE <name-of-persistentvolume> WITH ACTUAL PV NAME\r\n# TAKE A NOTE OF THE NODE NAME(S) TO BE USED IN THE PATCH.YAML\r\n\r\nkubectl get po -n <namespace-where-openebs-pods-are-deployed> \\\r\n  -o=custom-columns=NAME:metadata.name,NODE:spec.nodeName,STATUS:status.phase \\\r\n  | grep -E 'NAME|<name-of-persistentvolume>-rep'\r\n```\r\n\r\n```bash\r\n$ cat replica_patch.yaml\r\n```\r\n\r\n```yaml\r\nspec:\r\n  template:\r\n    spec:\r\n      affinity:\r\n        nodeAffinity:\r\n          requiredDuringSchedulingIgnoredDuringExecution:\r\n            nodeSelectorTerms:\r\n              - matchExpressions:\r\n                  - key: kubernetes.io/hostname\r\n                    operator: In\r\n                    values:\r\n                      - nodename_where_replica_pod_1_got_scheduled\r\n                      - nodename_where_replica_pod_2_got_scheduled\r\n                      - nodename_where_replica_pod_3_got_scheduled\r\n```\r\n\r\n```bash\r\n# REPLACE <name-of-persistentvolume> WITH ACTUAL PV NAME\r\n\r\nkubectl patch deployment <name-of-persistentvolume>-rep \\\r\n  -p \"$(cat replica_patch.yaml)\"\r\n```\r\n\r\n```bash\r\n# VERIFY IF PODs ARE BACK TO `Running` AFTER PATCH\r\n# REPLACE <namespace-where-openebs-pods-are-deployed> WITH ACTUAL NAMESPACE\r\n# REPLACE <name-of-persistentvolume> WITH ACTUAL PV NAME\r\n\r\nkubectl get po -n <namespace-where-openebs-pods-are-deployed> \\\r\n  | grep -E 'NAME|<name-of-persistentvolume>-rep'\r\n```\r\n\r\nLearn more about nodeAffinity from Kubernetes docs at [https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity).\r\n\r\nIf you want to understand more on kubectl patch operation, then go through [https://kubernetes.io/docs/tasks/run-application/update-api-object-kubectl-patch/](https://kubernetes.io/docs/tasks/run-application/update-api-object-kubectl-patch/).\r\n","slug":"how-do-i-pin-the-openebs-replica-pods-to-the-kubernetes-nodes-where-they-were-scheduled"},{"id":65,"title":"How do I configure OpenEBS to use storage on specific Kubernetes nodes?\r","author":"Amit Kumar Das\r","author_info":"Engineer the DAO\r","date":"18-03-2018\r","tags":["Howdoi"," OpenEBS"," Solutions"," Kubernetes"," Tutorials"],"excerpt":"A OpenEBS Volume comprises of a Target pod and Replica pod(s). There can be one or more Replica pods. The Replica pods are the ones that access the underlying disk resources for storing the data.\r","content":"\r\nThis article belongs to **#HowDoI** series on [**Kubernetes**](https://kubernetes.io/) and [**OpenEBS**](https://openebs.io/).\r\n\r\n**Note: The approach mentioned in this article applies for OpenEBS version 6.0 or below. One can refer to this [link](https://github.com/openebs/community/pull/20) for OpenEBS version 0.8.0 and above.**\r\n\r\nA OpenEBS Volume comprises of a Target pod and Replica pod(s). There can be one or more Replica pods. The Replica pods are the ones that access the underlying disk resources for storing the data.\r\n\r\n**Use Case #1: In my Kubernetes Cluster, I have certain nodes that have disks attached. I call these as Storage Nodes. I want the OpenEBS Volume Replica Pods to be scheduled on these Storage Nodes.**\r\n\r\n**_Solution:_** Use Kubernetes “taints & tolerations” feature.\r\n\r\nAs per Kubernetes docs, taints allow a node to repel a set of pods. Taints and tolerations work together to ensure that pods are not scheduled onto inappropriate nodes.\r\n\r\n- You can apply `NoSchedule` & `NoExecute` taints to the node(s).\r\n- `NoSchedule` marks that the node should not schedule any pods that do not tolerate the taint.\r\n- `NoExecute` marks that the node should evict existing/running pods that do not tolerate this taint.\r\n- Tolerations are applied to pods, and allow the pods to get scheduled onto nodes with matching taints.\r\n- You need to set an ENV variable in maya API server Deployment specifications, which in turn ensures setting of above tolerations on the replica pods.\r\n- The ENV variable referred to here is `DEFAULT_REPLICA_NODE_TAINT_TOLERATION`\r\n\r\nFollowing are the instructions to do the same:\r\n\r\n````\r\n# Step 1  —  Taint the node(s)\r\n```bash\r\n# kubeminion-01 is the name of a Kubernetes node\r\n# The taint effects used here are `NoSchedule` and `NoExecute`\r\nkubectl taint nodes kubeminion-01 storage=ssd:NoSchedule storage=ssd:NoExecute\r\n```\r\n\r\n# Step 2  —  Maya API server should be deployed with below specs\r\n# This ensures the replica pods are set with appropriate tolerations\r\n```yaml\r\napiVersion: apps/v1beta1\r\nkind: Deployment\r\nmetadata:\r\n  name: maya-apiserver\r\nspec:\r\n  replicas: 1\r\n  template:\r\n  metadata:\r\n    labels:\r\n    name: maya-apiserver\r\n  spec:\r\n    serviceAccountName: openebs-maya-operator\r\n    containers:\r\n    —  name: maya-apiserver\r\n      imagePullPolicy: Always\r\n      image: openebs/m-apiserver:0.5.3\r\n      ports:\r\n      —  containerPort: 5656\r\n      env:\r\n      —  name: DEFAULT_REPLICA_NODE_TAINT_TOLERATION\r\n        value: storage=ssd:NoSchedule,storage=ssd:NoExecute\r\n```\r\n````\r\n\r\n**Use Case #2:** In my Kubernetes Cluster, I have certain nodes that have disks attached. I call these as Storage Nodes. I want the OpenEBS Volume Replica Pods to be scheduled on these Storage Nodes. In addition, I want a better utilization of these nodes by being able to schedule my application Pods on these nodes as well.\r\n\r\n**Solution:** Use Kubernetes taints & tolerations feature. You may also want to try with `nodeAffinity` to achieve this. However, this solution focuses on use of tolerations.\r\n\r\n- You need to make use of `PreferNoSchedule` as the taint effect.\r\n- This can be thought of as a _soft version_ of `NoSchedule`.\r\n- In other words the system tries to avoid placing a pod that does not tolerate the taint on the node, but it is not mandatory.\r\n\r\nFollowing are the instructions to do the same:\r\n\r\n````\r\n# Step 1  —  Taint the node(s)\r\n```bash\r\n# kubeminion-01 is the name of a Kubernetes node\r\n# The taint effect used here is `PreferNoSchedule` i.e. a soft version of `NoSchedule` \r\n# the system tries to avoid placing a pod that does not tolerate the taint on the node,\r\n# but it is not mandatory.\r\nkubectl taint nodes kubeminion-01 storage=ssd:PreferNoSchedule\r\n```\r\n\r\n# Step 2  —  Maya API server should be deployed with below specs\r\n# This ensures the replica pods are set with appropriate tolerations\r\n```yaml\r\napiVersion: apps/v1beta1\r\nkind: Deployment\r\nmetadata:\r\n  name: maya-apiserver\r\n  namespace: default\r\nspec:\r\n  replicas: 1\r\n  template:\r\n  metadata:\r\n    labels:\r\n    name: maya-apiserver\r\n  spec:\r\n    serviceAccountName: openebs-maya-operator\r\n    containers:\r\n    —  name: maya-apiserver\r\n      imagePullPolicy: Always\r\n      image: openebs/m-apiserver:0.5.3\r\n      ports:\r\n      —  containerPort: 5656\r\n      env:\r\n      — name: DEFAULT_REPLICA_NODE_TAINT_TOLERATION\r\n        value: storage=ssd:PreferNoSchedule\r\n  ```\r\n````\r\n\r\nIf you want to learn more on taints & tolerations, then go through [https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/)\r\n\r\nI shall strive to put more such articles in future. Do let me know if you want any specific topics that I should explain.\r\n\r\n_Thanks to Kiran Mova._\r\n","slug":"how-do-i-configure-openebs-to-use-storage-on-specific-kubernetes-nodes"},{"id":66,"title":"Achieving native hyper convergence in Kubernetes\r","author":"Uma Mukkara\r","author_info":"Contributor at openebs.io, Co-founder & COO@MayaData. Uma led product development in the early days of MayaData (CloudByte).\r","date":"13-03-2018\r","tags":["Hyper Convergence"," Kubernetes"," Nutanix"," OpenEBS"," Persistent Storage"],"excerpt":"Hyper convergence has a lot of benefits — which is one reason it has become popular in the traditional infrastructure-centric world of virtual machines with proprietary vendors like Nutanix reaching prominence over the last several years.\r","content":"\r\nHyper convergence has a lot of benefits — which is one reason it has become popular in the traditional infrastructure-centric world of virtual machines with proprietary vendors like Nutanix reaching prominence over the last several years.\r\n\r\nKubernetes is nearly ready as a layer enabling hyper convergence, as the compute orchestration is extremely flexible and networking has moved to a largely containerized approach that leverages local resources in attached physical and virtual hosts.\r\n\r\nWhen it comes to storage, however, there are a few pieces that are missing. Once added to Kubernetes, these pieces will unlock a number of benefits to users of Kubernetes including better resource utilization, reduction of noisy neighbor phenomena, simpler management, isolation at the node level thereby reducing the potential blast radius of failures, and, perhaps most importantly, further ownership and management of relevant infrastructure per workload and per DevOps team.\r\n\r\nStorage management capabilities in Kubernetes have improved in the last couple of years. For example, there is now clarity around how to connect a stateful application to persistent storage. The constructs of persistent volume claim (PVC), persistent volume (PV), and storage class (SC) along with dynamic provisioners from vendors have clarified how to connect a pod to a storage volume. With these Kubernetes constructs, a large ecosystem of legacy storage found its way to be connected to application pods. Many vendors and open source projects are so excited about this connectivity to cloud native environments that they have taken to calling their traditional storage “[cloud native](https://blog.openebs.io/cloud-native-storage-vs-marketers-doing-cloud-washing-c936089c2b58)”.\r\n\r\nIn order to explain why new tools and constructs are needed to improve the management of storage media, let’s start by reviewing pod connectivity. Shown below is a pod connected to external storage through a dynamic provisioner interface.\r\n\r\n![Need for new tools and constructs in Kubernetes for managing disks](https://cdn-images-1.medium.com/max/800/1*zm4UFgEvTWesM2JoxQF9Cg.jpeg)\r\n\r\nIn addition, we show the Local PV construct connected to local disks whether spinning or solid state.\r\n\r\nCurrently the Local PV can manage just a single disk. In a typical hyper-converged solution, more disks would be involved for a given pod. In addition to this single disk limitation, the following are limitations or gaps in the local PV feature.\r\n\r\n- Add disks / detach disks to a pod currently requires the pod to be restarted\r\n- Control and access to the storage is itself is limited. There will be a number of benefits of enabling access at times to the level of NUMA and to allowing CPU cores to be attached to the storage pod; keep in mind that these days using all the cores itself can be a challenge and driving up utilization is one of the central attributes of hyper converged systems\r\n- Today there is no standard ability to share the underlying disk. This is particularly important as extremely fast, and relatively expensive, NVMe SSD devices are now readily available and if shared they could be used as a cache for multiple Persistent Volumes\r\n- Lack of any fault management capabilities. Kubernetes needs to be able to receive and manage storage faults such as failures of the underlying disk, changes to the latency of disk IO\r\n\r\nWith these limitations in mind, we summarize needed enhancements as:\r\n\r\n- Capability to pool the disks, and provide an interface to manage the pooling\r\n- Capability to monitor disks, identify faults, forward them to the appropriate receivers\r\n\r\nIn the drawing above, these requirements are loosely shown as “constructs and tools to manage local disks”. These disk related constructs and tools are largely meant to be managed by Kubernetes cluster administrators and DevOps administrators in a Kubernetes like way.\r\n\r\nIt may be easier to think about this using human personas. Let’s say a DevOps developer is interested in connecting a working storage volume to their workload. Meanwhile a DevOps admin wants to rely as much as possible on Kubernetes to deliver storage services.\r\n\r\nToday, DevOps admins are forced to turning to different storage solutions to create storage classes as opposed to having a generic way of writing solutions around creating storage classes in a k8s native way. The DevOps admin would love to have a native k8s way to create storage classes so that they can standardize on an approach irrespective of the underlying storage systems or even storage cloud services.\r\n\r\n![Using and constructing a storage class in Kubernetes](https://cdn-images-1.medium.com/max/800/1*17YT5-GR_JUXEq6qW2SD1A.jpeg)\r\n\r\n## Some thoughts on what these new disk related constructs and tools could be\r\n\r\nJust like storage connectivity issue is solved with a dynamic volume provisioner, we could introduce pool provisioners into Kubernetes.\r\n\r\n![Proposed disk related constructs and interfaces](https://cdn-images-1.medium.com/max/800/0*eM2LjKDvhbl62mjG.)\r\n\r\nAs shown above, DevOps administrators will have the required tools to design the storage policy decisions. A toolset called is created node-disk-manager to provision, monitor, and manage disks on the node. The disks are then grouped into pools by an interface called pool provisioner. The pool provisioner gives a generic set of APIs to consume the Kubernetes disk objects and create a storage technology specific pools such as OpenEBS cStorPool, OpenZFS zpool, GlusterPool etc.The advantage of representing the pools in native Kubernetes constructs is that Kubernetes native tools can be extended to manage these new constructs.\r\n\r\nWith these constructs, the end-to-end volume provisioning work flow could be depicted like below.\r\n\r\n![New proposed workflow for managing local disks and achieving true hyper convergence in Kubernetes](https://cdn-images-1.medium.com/max/800/1*9bAs7wOPNNGLxELpgP-4FA.jpeg)\r\n\r\n## Conclusion:\r\n\r\nKubernetes native constructs and tools to manage and monitor local disks will help move towards achieving true hyper-convergence. We have observed many users in the OpenEBS community are using OpenEBS dynamic provisioner seamlessly and requesting tools to manage the disks and storage pools. We are thinking of adding such tools to Kubernetes itself so that they are available to the larger community. A draft design proposal is available at We are looking forward to proposing and discussing these thoughts with K8S SIG leadership.\r\n\r\nWe are cooking up some draft proposals in the OpenEBS project before we take the to K8S SIG. Your feedback is appreciated and needed.\r\n\r\n### Disk Manager design:\r\n\r\n[https://docs.google.com/presentation/d/11GLg21x7G-nMTNw8aNIOhhjW\\_-eK19zSI9Xm-0jYHKs/edit?usp=sharing](https://docs.google.com/presentation/d/11GLg21x7G-nMTNw8aNIOhhjW_-eK19zSI9Xm-0jYHKs/edit?usp=sharing)\r\n\r\n[https://github.com/kmova/node-bot/blob/3cb83976a5392003d02275f8a94d1860257915f0/design/node-storage-management.md](https://github.com/kmova/node-bot/blob/3cb83976a5392003d02275f8a94d1860257915f0/design/node-storage-management.md)\r\n\r\n### Pool Provisioner design:\r\n\r\n[https://github.com/kmova/openebs/blob/35fb65540b17ad3da3df270ccc425c4ec417ca12/contribute/design/proposal-cstor-orchestration.md](https://github.com/kmova/openebs/blob/35fb65540b17ad3da3df270ccc425c4ec417ca12/contribute/design/proposal-cstor-orchestration.md)\r\n","slug":"achieving-native-hyper-convergence-in-kubernetes"},{"id":67,"title":"The Mule and (the) Flash — going for a run?\r","author":"Jeffry Molanus\r","author_info":"Jeffry is the CTO at MayaData. At MayaData, his primary focus is to make sure the product is flexible and scalable. When he is not working with code, he practices martial arts.\r","date":"26-02-2018\r","tags":["Kubernetes"," Cloud Storage"," Container"],"excerpt":"In this blog, I discuss why we are building an innovative approach to user IO for the purpose of containerized storage, in particular vhost. If you just want the code, take a look at https://github.com/openebs/vhost-user.\r","content":"\r\nIn this blog, I discuss why we are building an innovative approach to user IO for the purpose of containerized storage, in particular vhost. If you just want the code, take a look at [https://github.com/openebs/vhost-user](https://github.com/openebs/vhost-user).\r\n\r\nFirst off, as mentioned in previous blog articles, OpenEBS is not yet another distributed file system. Let’s reiterate the reasoning behind this:\r\n\r\n- As microservices typically require only a small (relatively) amount of storage, there is no need to build a scale-out storage system\r\n- As Direct-attached Storage (DAS), in particular, NVMe, is the fastest storage you can get, you want the workload and the controller to be local with respect to each other; this is true even with SSD cloud storage offerings like AWS EBS instances\r\n- As single NVMe devices can reach 450K IOPS per device or [more](https://www.prnewswire.com/news-releases/supermicro-delivers-groundbreaking-18-million-iops-of-storage-performance-in-new-2u-ultra-server-300508258.html) there is no longer any need to “scale out” to achieve high IOPS or low latency, in fact, scale-out adds latency as per the above argument\r\n\r\nFinally, distributed applications are complex by nature. When you are building microservices, you are in fact, developing a distributed application. It seems unwise to put one distributed application on top of the other (storage) and sleep well at night. All that work you’ve done limiting single points of failure in your application layer can be undone through the use of complex distributed storage.\r\n\r\nAnother fundamental aspect of OpenEBS is that it runs in user space. This too has, we like to believe, a significant advantage as it does not require you to [build a kernel module](https://github.com/portworx/px-fuse) and taint your kernel (in case of closed source) with out-of-tree code. But it does not stop there; if you want to move your data from cloud to cloud (c2c), you do not have to worry about kernel version mismatches or anything like that. User space is the new kernel — when it comes to IO.\r\n\r\nBut what about performance? Linus Torvals himself said some years ago that file systems in user space are nothing but [toys](https://www.phoronix.com/scan.php?page=news_item&px=OTYwMA). But, as it turns out, with these low latency SSDs and high-speed networking (100GbE) the kernel, in fact, has become the bottleneck!\r\n\r\n_“fuse works fine if the thing being exported is some random low-use interface to a fundamentally slow device.”_\r\n\r\nSo it seems that we have reached an impasse? The kernel appears to be the bottleneck, and user space implementations are just “toys.” Or have we? When you look into why IO in user space is slow, it’s mostly due to the inability to do DMA, the required context switches, and the copying in and out of data. What if we could avoid this? Also, as you may know, hardware is already causing a change in the way we do things — 3D XPoint™ next to NVMe. This can be seen by technologies applied in SPDK and others like FD.IO. As OpenEBS is storage in containers, we have started to work on what we call the IOC, or the IO Container using these technologies.\r\n\r\n**The IOC runs in user space and can do IO to the underlying hardware, bypassing the kernel altogether. It owns a set of resources (CPU, NICs, memory, and storage) and applies polling for IO instead of being interrupt driven.**\r\n\r\nWith 18-core desktop computers being available today, it’s hardly an issue to use a core or two dedicated for IO — in the user space.\r\n\r\nBecause the IOC exposes block devices, we need a way to connect these devices to the other containers. Luckily — the VM space solved that problem for us: v[host](http://www.spdk.io/doc/vhost.html). By reusing these approaches, we create high a speed connection between the IOC and the containerized storage controller without making a change to the applications.\r\n\r\n![IOC model with vhost user interface and VPP](/images/blog/ioc-model-with-vhost-user-interface-and-vpp.png)\r\n\r\nThe above picture tries to depict the situation on a single node. As the application sends its IO through a block protocol (the target), OpenEBS — through the shared vhost subsystem — sends the IO to the replica which applies storage logic to it. With storage logic, we mean things that allow OpenEBS to do Copy-on-write (COW), snapshots, clones, compression or whatever is required. Also, OpenEBS is starting to further leverage this architecture to alter data management parameters including replication and snapshot patterns and even lower level parameters as well as block size in those containers depending on the workload.\r\n\r\nThen finally, the IO is submitted again to the IOC where an adaptive polling algorithm waits for its completion. Note, that the target — replicates `n` copies to the other node(s) which is depicted with R(n). So instead of doing IO through the kernel, your application passes the IO to the IOC which takes care of completing the IO as fast as possible all from user space.\r\n\r\nWith this approach, we get the best of both worlds and are in fact capable of surpassing the performance you would get when doing the same in the kernel — hands down — while also providing per workload granularity of control.\r\n\r\n![User space outperforming the kernel](/images/blog/user-space-outperforming-the-kernel.png)\r\n\r\nAs you can see from the repository, the design is fairly straightforward and is intended to support both legacy workloads as well as those built for faster underlying storage. We welcome input and contributions from anyone.\r\n\r\nWhile the vHost work stands alone it is central to a new storage engine forthcoming in OpenEBS 0.6, code named ‘cStore’.\r\n\r\nWe would really like your input so please [open an issue](https://github.com/openebs/vhost-user/issues) or join us on Slack to discuss at [openebs-community.slack.com](http://openebs-community.slack.com/) or just contact me directly. I can be reached at Twitter at [@jeffrymolanus](https://twitter.com/jeffrymolanus)\r\n","slug":"the-mule-and-the-flash-going-for-a-run"},{"id":68,"title":"OpenEBS plus Red Hat OpenShift and StackPointCloud and IBM Cloud Private and….\r","author":"Evan Powell\r","author_info":"Founding CEO of a few companies including StackStorm (BRCD) and Nexenta — and CEO & Chairman of OpenEBS/MayaData. ML and DevOps and Python, oh my!\r","date":"05-02-2018\r","tags":["DevOps"," Docker"," Kubernetes"," Updates"," OpenEBS"],"excerpt":"This week we announced that our partnership with Red Hat is flourishing. We achieved their Primed level of certification for their OpenShift offerings and are seeing more and more users rely upon OpenShift and Kubernetes as a means to provide persistence to their workloads.\r","content":"\r\nThis week we [announced](https://www.prnewswire.com/news-releases/openebs-certified-with-red-hat-openshift-stackpointcloud-and-ibm-cloud-672729373.html) that our partnership with Red Hat is flourishing. We achieved their Primed level of certification for their OpenShift offerings and are seeing more and more users rely upon OpenShift and Kubernetes as a means to provide persistence to their workloads.\r\n\r\nThe alternative pattern, of course, is to connect to an external storage system. Solutions like Rook and others such as the CSI efforts of RexRay and many others enable the use of external storage.\r\n\r\nActually — so does OpenEBS :)\r\n\r\nOpenEBS can and often does use external storage underneath. With OpenEBS, however, every workload has its own storage controller(s) that themselves are easily orchestrated by Kubernetes and data is local by default. There are three main benefits to the OpenEBS containerized architecture that external only storage cannot address due to architectural limitations:\r\n\r\n- **The granularity of control** — with OpenEBS the storage controller interprets ever more individualized and extensive storage policies and makes them so for each workload. Because OpenEBS is a full system (or is becoming one :)), it offers far more control than centralized storage that itself has to address the sometimes competing needs of countless — hundreds — of workloads. Developer teams can take on storage knowing they are much less constrained than they are working with least common denominator external storage.\r\n- **No SPOF** — in an age in which chaos engineering is becoming more and more popular, the notion of a sacrosanct dependency that cannot itself be disrupted or the entire system crashes potentially into a non-recoverable state is anachronistic. Put more directly — shared scale-out storage is an anti-pattern for many. Blast Radius.\r\n- **Performance** — as storage heads, we too often likely focus on performance. However, OpenEBS does work with databases, and in some cases the speed at which you run those workloads directly translates into user experience and hence money. So the tax a scale out storage system puts on performance versus the insane and rapidly accelerating speed of direct attached is essential. Ironically, scale-out first arose in part to work around how slow local disk was; times have changed. If you are interested in performance, you’ll want to grab our cStore by the way which, as the name suggests, is written in C and does much else as well to build upon our inherently faster Container Attached Approach. Stay tuned…\r\n\r\nSo why Red Hat and why StackPointCloud?\r\n\r\nIn both cases, we see organizations that are doing an incredible job helping their target users adopt Kubernetes based orchestration. With Red Hat, we tend to see especially larger enterprises taking the approach. With StackPointCloud, there is a real mix of departmental level users at large organizations as well as countless start-ups. In both cases, our support of Helm charts for OpenEBS makes it trivial to spin OpenEBS up.\r\n\r\nWhile OpenEBS itself as not achieve 1.0 status, we are working hand in hand w/ partners to make sure users are succeeding in their use of OpenEBS for stateful workloads. There must now be at least hundreds of production proof of concept deployments ongoing. We will be making [MayaOnline](http://www.mayaonline.io/) freely available to help these and other users in the near future via no cost monitoring and control and ChatOps integrations.\r\n\r\nPlease get in touch via [Slack](https://join.slack.com/t/openebs-community/shared_invite/enQtMjQzMTg4NTcyNTY2LTJiMzVjYjA5ZDk3YmI4NjAxY2QyYmI3MTA1MmUxMTAzNTU0NTM5NTViOTIxMjA1NWQ4NzVmMTBiNjk0NDU1YzQ) or otherwise if you would like to spend a little time with us to discuss your use cases and, of course, if you are running OpenEBS and testing it out.\r\n","slug":"openebs-plus-red-hat-openshift-and-stackpointcloud-and-ibm-cloud-private-and"},{"id":69,"title":"How to install OpenEBS on OpenShift?\r","author":"Murat Karslioglu\r","author_info":"VP @OpenEBS & @MayaData_Inc. Lives to innovate! Opinions my own!\r","date":"22-01-2018\r","tags":["Kubernetes"," Mongodb"," Openshift"," Percona"," Solutions"," OpenEBS"],"excerpt":"OpenShift Origin is the upstream community project used in all deployment models provided by Red Hat OpenShift such as OpenShift Online, OpenShift Dedicated, and OpenShift Container Platform.\r","content":"\r\n## What is OpenShift Origin?\r\n\r\n**OpenShift Origin** is the upstream community project used in all deployment models provided by Red Hat OpenShift such as **OpenShift Online**, **OpenShift Dedicated**, and **OpenShift Container Platform**. **Red Hat OpenShift** is an enterprise container application platform that is based on a core of **Docker** container packaging, **Kubernetes** container cluster management and the **OpenShift Origin** project itself.\r\n\r\nFirst, having more than one option sounds confusing, but they clearly differentiate from each other. Here is the summary of all available deployment models to start with OpenShift.\r\n\r\n- [**OpenShift Origin**](https://www.openshift.org/) is a distribution of Kubernetes optimized for continuous application development and multi-tenant deployment. Origin is open source and all source code for the Origin project is available under the Apache License v2.0 on GitHub. Website and documentation for the Origin project are under [www.openshift.org](https://www.openshift.org/). It is completely free, you can deploy Origin on baremetal, in a VM or on a cloud. This is the option I will focus on this article.\r\n- [**OpenShift Online**](https://manage.openshift.com/) is Red Hat’s public cloud application development and hosting service. Starter plan is free to use and includes 1 project, 1GiB memory, 1GiB terminating memory and 1GiB storage. Pro Plan costs $50/month and includes 10 projects, 2GiB memory, 2GiB terminating memory and 2GiB storage. Details are available [here](https://www.openshift.com/pricing/index.html).\r\n- [**OpenShift Dedicated**](https://www.openshift.com/dedicated/index.html) is Red Hat’s managed private cluster offering, built around a core of application containers powered by Docker, with orchestration and management provided by Kubernetes, on a foundation of Red Hat Enterprise Linux. It’s available on the Amazon Web Services (AWS) and Google Cloud Platform (GCP) marketplaces. A complete OpenShift 3 cluster, configured for high availability (HA) with a minimum of 5 masters, infrastructure nodes and 4 application nodes managed by Red Hat costs $48k. Details are available [here](https://www.openshift.com/dedicated/index.html#pricing).\r\n- [**OpenShift Container Platform**](https://www.openshift.com/container-platform/index.html) (formerly OpenShift Enterprise) is Red Hat’s on-premise private PaaS product.\r\n\r\nIn this blog post, I will focus on configuring **OpenEBS** as a **persistent storage** option on the open-source self-managed **OpenShift Origin** and deploy a stateful workload both from CLI and custom catalog template using OpenEBS storage classes.\r\n\r\n## Prerequisites\r\n\r\n### Hardware\r\n\r\n- Minimum two nodes. Recommended four or more (Baremetal, VMs or cloud instances)\r\n\r\n### Software components used\r\n\r\n- [CentOS 7.x](https://www.centos.org/download/)\r\n- [OpenShift Origin 3.7+](https://github.com/openshift/origin)\r\n- [OpenShift-Ansible](https://github.com/openshift/openshift-ansible) (master branch used for installation)\r\n- [OpenEBS 0.5.1](https://openebs.io/)\r\n\r\n**Note:** Make sure the following package dependencies are installed: python, wget, git, net-tools, bind-utils, iptables-services, bridge-utils, bash-completion, kexec-tools, sos, psacct, docker-1.12.6, ansible, pyOpenSS, httpd-tool\r\n\r\n### Install OpenShift Origin\r\n\r\nFollow instructions from [OpenShift Origin Latest Documentation](https://docs.openshift.org/latest/welcome/index.html) to deploy a multi-node Origin cluster. If you are deploying it for the first time it may be a bit complicated. I plan to post my notes, steps on getting minimum requirements satisfied and have a successful deployment after this post.\r\n\r\n### Verify OpenShift Origin deployment\r\n\r\nExecute the following commands to verify successful installation.\r\n\r\n```\r\n# oc get nodes\r\n```\r\n\r\nNumber of nodes you see maybe different in your case, but status should looks similar to below showing nodes ready.\r\n\r\n```\r\n# oc get nodes\r\n NAME STATUS AGE VERSION\r\n oonode1 Ready 2d v1.7.6+a08f5eeb62\r\n oonode2 Ready 2d v1.7.6+a08f5eeb62\r\n oonode3 Ready 2d v1.7.6+a08f5eeb62\r\n oonode4 Ready 2d v1.7.6+a08f5eeb62\r\n```\r\n\r\n### Configure access permissions\r\n\r\nCreate a new admin user with cluster-admin role/permissions and assing password using the following commands:\r\n\r\n```\r\n# oc adm policy add-cluster-role-to-user cluster-admin admin — as=system:admin\r\n# htpasswd /etc/origin/master/htpasswd admin\r\n```\r\n\r\nLogin as the `admin` user and you will be using default project.\r\n\r\n```\r\n# oc login -u admin\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n# oc login -u admin\r\n Authentication required for https://oonode1:8443 (openshift)\r\n Username: admin\r\n Password:\r\n Login successful.\r\nYou have access to the following projects and can switch between them with ‘oc project <projectname>’:\r\n* default\r\n kube-public\r\n kube-service-catalog\r\n kube-system\r\n logging\r\n management-infra\r\n openshift\r\n openshift-ansible-service-broker\r\n openshift-infra\r\n openshift-node\r\n openshift-template-service-broker\r\n openshift-web-console\r\nUsing project “default”.\r\n```\r\n\r\nProvide access to the host volumes which is needed by the OpenEBS volume replicas by updating the default security context (scc). If you miss this step your replicas will fail to deploy.\r\n\r\n```\r\n# oc edit scc restricted\r\n```\r\n\r\nNow set `allowHostDirVolumePlugin: true` and save changes. The file should look like below:\r\n\r\n```\r\n# Please edit the object below. Lines beginning with a ‘#’ will be ignored,\r\n# and an empty file will abort the edit. If an error occurs while saving this file will be\r\n# reopened with the relevant failures.\r\n#\r\nallowHostDirVolumePlugin: true\r\nallowHostIPC: false\r\nallowHostNetwork: false\r\nallowHostPID: false\r\nallowHostPorts: false\r\nallowPrivilegedContainer: false\r\nallowedCapabilities: []\r\nallowedFlexVolumes: []\r\napiVersion: v1\r\ndefaultAddCapabilities: []\r\nfsGroup:\r\ntype: MustRunAs\r\ngroups:\r\n— system:authenticated\r\nkind: SecurityContextConstraints\r\nmetadata:\r\nannotations:\r\nkubernetes.io/description: restricted denies access to all host features and requires\r\npods to be run with a UID, and SELinux context that are allocated to the namespace. This\r\nis the most restrictive SCC and it is used by default for authenticated users.\r\ncreationTimestamp: 2018–01–20T19:39:18Z\r\nname: restricted\r\nresourceVersion: “68274”\r\nselfLink: /api/v1/securitycontextconstraints/restricted\r\nuid: 9abddec5-fe19–11e7–8d06–005056873c08\r\npriority: null\r\nreadOnlyRootFilesystem: false\r\nrequiredDropCapabilities:\r\n— KILL\r\n— MKNOD\r\n— SETUID\r\n— SETGID\r\nrunAsUser:\r\ntype: MustRunAsRange\r\nseLinuxContext:\r\ntype: MustRunAs\r\nsupplementalGroups:\r\ntype: RunAsAny\r\nusers: []\r\nvolumes:\r\n— configMap\r\n— downwardAPI\r\n— emptyDir\r\n— hostPath\r\n— persistentVolumeClaim\r\n— projected\r\n— secret\r\n```\r\n\r\nSave changes.\r\n\r\n### Install OpenEBS on Origin\r\n\r\nThere are few easy ways to install OpenEBS. You can either apply the operator and storage classes direct from the URL or clone the repo and execute from the local copy. I prefer to clone a local copy, but i’ll also give you the other option if you prefer.\r\n\r\nClone the latest OpenEBS files and sample application specs using the below command on your OpenShift master node:\r\n\r\n```\r\n# git clone https://github.com/openebs/openebs.git\r\n# cd openebs/k8s\r\n```\r\n\r\nApply the file two yaml files below:\r\n\r\n```\r\n# oc apply -f openebs-operator.yaml\r\n# oc apply -f openebs-storageclasses.yaml\r\n```\r\n\r\nAlternative way — If you choose not to copy from the repo you can apply the yaml file direct from the URL below:\r\n\r\n```\r\noc apply -f https://openebs.github.io/charts/openebs-operator.yaml\r\n```\r\n\r\n### Verify OpenEBS deployment\r\n\r\nVerify that the OpenEBS provisioner and API server are created successfully and running.\r\n\r\n```\r\n# oc get deployments\r\nNAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE\r\nmaya-apiserver 1 1 1 1 2d\r\nopenebs-provisioner 1 1 1 1 2d\r\n```\r\n\r\nCheck pods to confirm maya-apiserver and openebs-provisioner.\r\n\r\n```\r\n# oc get pods\r\nNAME READY STATUS RESTARTS AGE\r\ndocker-registry-1-b5r7t 1/1 Running 0 2d\r\nmaya-apiserver-3053842955-xbx8w 1/1 Running 0 2d\r\nopenebs-provisioner-2499455298–46brm 1/1 Running 0 2d\r\nregistry-console-1-mrpc9 1/1 Running 0 2d\r\nrouter-1-bf775 1/1 Running 3 2d\r\n```\r\n\r\nCheck services to confirm maya-apiserver exists.\r\n\r\n```\r\n# oc get service\r\nNAME CLUSTER-IP EXTERNAL-IP PORT(S) AGE\r\ndocker-registry 172.30.113.229 <none> 5000/TCP 2d\r\nkubernetes 172.30.0.1 <none> 443/TCP,53/UDP,53/TCP 2d\r\nmaya-apiserver-service 172.30.17.113 <none> 5656/TCP 2d\r\nregistry-console 172.30.148.98 <none> 9000/TCP 2d\r\nrouter 172.30.229.239 <none> 80/TCP,443/TCP,1936/TCP 2d\r\n```\r\n\r\nCheck service accounts for openebs-maya-operator:\r\n\r\n```\r\n# oc get sa\r\nNAME SECRETS AGE\r\nbuilder 2 2d\r\ndefault 3 2d\r\ndeployer 2 2d\r\nopenebs-maya-operator 2 2d\r\nregistry 3 2d\r\nrouter 2 2d\r\n# oc get clusterrole openebs-maya-operator\r\n\\NAME\r\nopenebs-maya-operator\r\n# oc get clusterrolebindings openebs-maya-operator\r\nNAME ROLE USERS GROUPS SERVICE ACCOUNTS SUBJECTS\r\nopenebs-maya-operator /openebs-maya-operator default/openebs-maya-operator, default/default\r\n```\r\n\r\nAnd finally verify OpenEBS default storage classes.\r\n\r\n```\r\n# oc get sc\r\nNAME TYPE\r\nopenebs-cassandra openebs.io/provisioner-iscsi\r\nopenebs-es-data-sc openebs.io/provisioner-iscsi\r\nopenebs-jupyter openebs.io/provisioner-iscsi\r\nopenebs-kafka openebs.io/provisioner-iscsi\r\nopenebs-mongodb openebs.io/provisioner-iscsi\r\nopenebs-percona openebs.io/provisioner-iscsi\r\nopenebs-redis openebs.io/provisioner-iscsi\r\nopenebs-standalone openebs.io/provisioner-iscsi\r\nopenebs-standard openebs.io/provisioner-iscsi\r\nopenebs-zk openebs.io/provisioner-iscsi\r\n```\r\n\r\nAfter few easy steps we are now ready to deploy workloads on persistent storage provided by OpenEBS. I’ll cover both CLI and Catalog installation through the OpenShift Web Console.\r\n\r\n### Install Percona on OpenEBS using OC CLI\r\n\r\nUse OpenEBS as persistent storage for a Percona DB deployment by selecting the `openebs-percona` storage class in the persistent volume claim. I will use the sample file available in the openebs repo which I cloned locally in the previous steps.\r\n\r\nView the Percona deployment yaml:\r\n\r\n```\r\n# cd openebs/k8s/demo/percona\r\n# cat demo-percona-mysql-pvc.yaml\r\n— -\r\napiVersion: v1\r\nkind: Pod\r\nmetadata:\r\nname: percona\r\nlabels:\r\nname: percona\r\nspec:\r\ncontainers:\r\n— resources:\r\nlimits:\r\ncpu: 0.5\r\nname: percona\r\nimage: percona\r\nargs:\r\n— “ — ignore-db-dir”\r\n— “lost+found”\r\nenv:\r\n— name: MYSQL_ROOT_PASSWORD\r\nvalue: k8sDem0\r\nports:\r\n— containerPort: 3306\r\nname: percona\r\nvolumeMounts:\r\n— mountPath: /var/lib/mysql\r\nname: demo-vol1\r\nvolumes:\r\n— name: demo-vol1\r\npersistentVolumeClaim:\r\nclaimName: demo-vol1-claim\r\n— -\r\nkind: PersistentVolumeClaim\r\napiVersion: v1\r\nmetadata:\r\nname: demo-vol1-claim\r\nspec:\r\nstorageClassName: openebs-percona\r\naccessModes:\r\n— ReadWriteOnce\r\nresources:\r\nrequests:\r\nstorage: 5G\r\n```\r\n\r\nAs you can see in the YAML file above, `storageClassName` is set to `openebs-percona` which has 2 replicas.\r\n\r\nNow, apply the file:\r\n\r\n```\r\n# oc apply -f demo-percona-mysql-pvc.yaml\r\n```\r\n\r\nFinally, verify that Percona is deployed and OpenEBS controller and replica are running:\r\n\r\n```\r\n# oc get pods\r\nNAME READY STATUS RESTARTS AGE\r\ndocker-registry-1-b5r7t 1/1 Running 0 2d\r\nmaya-apiserver-3053842955-xbx8w 1/1 Running 0 2d\r\nopenebs-provisioner-2499455298–46brm 1/1 Running 0 2d\r\npercona-1378140207–5q2gb 1/1 Running 0 15mh\r\npvc-c7a24dc8-ffc7–11e7-a7cd-005056873c08-ctrl-1719480235-xf4t5 2/2 Running 0 15m\r\npvc-c7a24dc8-ffc7–11e7-a7cd-005056873c08-rep-1550141838-ldm59 1/1 Running 0 15m\r\n```\r\n\r\n### Install MongoDB on OpenEBS using the OpenShift Web Console\r\n\r\nLogin to the OpenShift Web Console using the admin credentials we have created earlier.\r\n\r\n![OpenShift Origin](https://cdn-images-1.medium.com/max/800/0*-IbP4t-ZgYZx4qh6.png)\r\n\r\nClick on **Add to Project** button and select **Import YAML / JSON**.\r\n\r\n![Add to project](https://cdn-images-1.medium.com/max/800/0*FEwbuF146LMi7Zsx.png)\r\n\r\nCopy the content of [https://raw.githubusercontent.com/openebs/openebs/master/k8s/openshift/examples/v3.7/db-templates/openebs-mongodb-persistent-template.json](https://raw.githubusercontent.com/openebs/openebs/master/k8s/openshift/examples/v3.7/db-templates/openebs-mongodb-persistent-template.json) file and paste into **Import YAML / JSON** window.\r\n\r\n![Import Yaml/JSON](https://cdn-images-1.medium.com/max/800/0*d6b0iSD6JG83ad-N.png)\r\n\r\nClick on **Create** button, select **Save template** and click **Continue**.\r\n\r\n![Add template](https://cdn-images-1.medium.com/max/800/0*14UvCpI6Gf-Q5Pd2.png)\r\n\r\nOn the **Template Configuration** window make sure Storage Class is `openebs-standard` and click on **Create**.\r\n\r\n![Template configuration](https://cdn-images-1.medium.com/max/800/0*l_agQ7YUPJnqvKkq.png)\r\n\r\n![Add template configuration](https://cdn-images-1.medium.com/max/800/0*K8665fQzu2nIGNZh.png)\r\n\r\n![Result](https://cdn-images-1.medium.com/max/800/0*E6Vp2d7hqBWtJpzm.png)\r\n\r\nYou have successfully deployed MongoDB on a persistent storage provided by OpenEBS.\r\n\r\n---\r\n\r\n_Originally published at _[_Containerized Me_](http://containerized.me/how-to-install-openebs-on-openshift/)_._\r\n","slug":"how-to-install-openebs-on-openshift"},{"id":70,"title":"Using OpenEBS as a Kubernetes persistent volume\r","author":"Jimmy Song\r","author_info":"Developer Advocate at Ant Financial, CNCF Ambassador, co-founder of ServiceMesher community, blog https://jimmysong.io\r","date":"10-01-2018\r","tags":["Kubernetes"," OpenEBS"," Docker"," Cloud Native"],"excerpt":"OpenEBS is a containerized block storage written in Go for cloud native and other environments which make the data workloads more reliable in Kubernetes.\r","content":"\r\n[OpenEBS](https://www.openebs.io/) is a containerized block storage written in Go for cloud native and other environments which make the data workloads more reliable in Kubernetes.\r\n\r\nOpenEBS is open sourced by [MayaData](http://www.mayadata.io/) who is a professional containerized storage company formerly known as CloudByte. Their vision is to make data workloads easy to use in Kubernetes across clouds or on premise.\r\n\r\nWe know that [EBS](https://translate.googleusercontent.com/translate_c?depth=1&hl=en&rurl=translate.google.co.in&sl=zh-CN&sp=nmt4&tl=en&u=https://amazonaws-china.com/cn/ebs/&usg=ALkJrhhv8rYmHkvvZS_bPmr_Ca1Wj24SnA) (Elastic Block Storage) is available in AWS, persistent block storage for Amazon EC2 to meet the functional and performance requirements of the most demanding applications, and OpenEBS is its open source implementation.\r\n\r\n## Introduction\r\n\r\nWith OpenEBS, you can treat containers that have persistent data as you would any other common container. OpenEBS itself is also deployed through containers that support Kubernetes, Swarm, Mesos, Rancher orchestration scheduling, and storage services can be assigned to each pod, application, cluster, or container level, including:\r\n\r\n- Data persistence across nodes\r\n- Synchronize data across available zones and cloud vendors\r\n- Use commercial hardware and container engines to provide highly scalable block storage\r\n- Integration with the container orchestration engine, the developer’s application can automatically configure OpenEBS\r\n- Based on CloudByte’s container-based experience in BSD, we provide users with OpenEBS QoS assurance\r\n\r\n## Architecture\r\n\r\nThe OpenEBS storage controller itself runs in a container. OpenEBS Volume consists of one or more containers that run microservices. This storage controller function is based on a microservices architecture — the data for each volume is provided by its own set of containers, not by a single monolithic storage controller that provides control for multiple volumes at the same time To provide. This is the essential difference between OpenEBS and traditional storage devices.\r\n\r\nThe OpenEBS architecture can be divided into Data Plane (Data Plane) and Control Plane (Control Plane) in two parts:\r\n\r\n- Data Plane: Provides data storage for applications\r\n- Control Plane: Managing OpenEBS Volume Containers, which typically uses the functionality of container layout software\r\n\r\n## Data plane\r\n\r\nThe following figure shows the architecture of OpenEBS deployed on Kubernetes cluster. Among them, the yellow or orange part is the OpenEBS persistent storage volume, created by Kubernetes’ PVs, implemented using iSCSI, and stored on host nodes or in the cloud (such as EBS, GPD, etc.) depending on where your cluster is deployed. The OpenEBS volume is completely independent of the user’s application life cycle to manage, which is Kuberentes PV in the basic idea.\r\n\r\n![OpenEBS Cluster - Data Pane](/images/blog/openebs-data-plane.png)\r\n\r\nOpenEBS volumes provide persistent storage for containers with resiliency to system failures and faster access to storage, snapshots and backups. In addition, it provides mechanisms for monitoring usage and enforcing QoS policies.\r\n\r\nThe disk that stores the data is called the storage backend and can be a host directory, an attached block device, or a remote disk. Each OpenEBS volume contains an iSCSI target container (represented as openebs-vol1 in the previous figure) and one or more replica containers (openebs-vol1-R1 and openebs-vol1-R2).\r\n\r\nThe application pod accesses the storage through the iSCSI target container, which copies the data to all of its replicas. In the event of a node failure, the iSCSI target container starts from one of the remaining online nodes and provides data by connecting to the available replica containers.\r\n\r\n**Source**\r\n\r\nThe implementation of this section consists of two containers:\r\n\r\n- [openebs/jiva](https://translate.googleusercontent.com/translate_c?depth=1&hl=en&rurl=translate.google.co.in&sl=zh-CN&sp=nmt4&tl=en&u=https://github.com/openebs/jiva&usg=ALkJrhhhCfHb4LkQReHbpayqLJwjwdctgw) : storage control functions, including copy logic\r\n\r\n- [openebs/gotgt](https://translate.googleusercontent.com/translate_c?depth=1&hl=en&rurl=translate.google.co.in&sl=zh-CN&sp=nmt4&tl=en&u=https://github.com/openebs/gotgt&usg=ALkJrhgoXb10SL2TVf8_urB_TIfEVSDBxg) : iSCSI target features used by openebs/jiva\r\n\r\n## Control plane\r\n\r\nThe OpenEBS control plane is also known as maya. The purpose is to create a hyper-converged OpenEBS that is mounted on a container scheduling engine such as Kubernetes, Swarm, Nomad, etc. to extend the storage capabilities provided by a particular container orchestration system.\r\n\r\n![OpenEBS Cluster - Control Plane](/images/blog/openebs-control-plane.png)\r\n\r\nOpenEBS’s control plane is also based on microservices, and its services can be divided into the following sections:\r\n\r\nContainer layout plug-in, used to enhance the function of the strong container layout framework:\r\n\r\n- **Kubernetes Dynamic Configuration** : [openebs-provisioner](https://translate.googleusercontent.com/translate_c?depth=1&hl=en&rurl=translate.google.co.in&sl=zh-CN&sp=nmt4&tl=en&u=https://github.com/openebs/external-storage/tree/master/openebs&usg=ALkJrhjuOf_IBvwR0NC-g734l_p4Ia14hg)\r\n- **Kubernetes-dashboard** : [openebs-dashboard](https://translate.googleusercontent.com/translate_c?depth=1&hl=en&rurl=translate.google.co.in&sl=zh-CN&sp=nmt4&tl=en&u=https://github.com/openebs/dashboard&usg=ALkJrhigRmJSDzmVT_NRMupygPwAM5EX9g)\r\n- **Extended schema** : Kubernetes-based CRDs (custom resource defination) that store OpenEBS-related configuration data\r\n\r\nCluster services provide OpenEBS-specific storage intelligence such as:\r\n\r\n- **maya-apiserver** : Contains APIs for performing volume operations that translate requests into container-specific system-specific operations\r\n- **maya-mulebot** : Use the information collected to suggest optimized layout and event handling tips\r\n- **maya-connect** : Allows monitoring data to be uploaded to `maya-cloud` for further storage access mode analysis\r\n\r\nNode Services, which provide OpenEBS-specific storage intelligence that runs with kubelet, such as:\r\n\r\n- **maya-agent** : Includes storage management features\r\n\r\nBy using prometheus, heapster, grafana and jaegar for these services, you can add monitoring and tracking capabilities.\r\n\r\n**Source**\r\n\r\n- [openebs / maya](https://translate.googleusercontent.com/translate_c?depth=1&hl=en&rurl=translate.google.co.in&sl=zh-CN&sp=nmt4&tl=en&u=https://github.com/openebs/maya&usg=ALkJrhgksSLVDOSt9WRSnCdGdaf4nezkyQ) : All of the specific binary code (non-plugins) is stored in this repository, such as `maya-apiserver` , `maya-agent` , `maya-mulebot` , `maya-connect` , `mayactl` and more.\r\n- [openebs-dashboard](https://translate.googleusercontent.com/translate_c?depth=1&hl=en&rurl=translate.google.co.in&sl=zh-CN&sp=nmt4&tl=en&u=https://github.com/openebs/dashboard&usg=ALkJrhigRmJSDzmVT_NRMupygPwAM5EX9g) : A branch of the kubernetes-dashboard project that extends storage capabilities.\r\n- [openebs-provisioner](https://translate.googleusercontent.com/translate_c?depth=1&hl=en&rurl=translate.google.co.in&sl=zh-CN&sp=nmt4&tl=en&u=https://github.com/openebs/external-storage/tree/master/openebs&usg=ALkJrhjuOf_IBvwR0NC-g734l_p4Ia14hg) : The OpenEBS K8s Provisioner from the Kubernetes incubator project.\r\n\r\n## Install OpenEBS on Kubernetes\r\n\r\nBelow we will use the way to install OpenEBS operator, you need to make sure you have already installed iSCSI on your node before installation.\r\n\r\n## Prerequisites\r\n\r\nOpenEBS relies on iSCSI for storage management, so you need to make sure that you have OpenEBS installed on your cluster.\r\n\r\n**Note** : If you are using kubeadm, container-mounted kublet, it comes with iSCSI and does not need to be manually installed. For a kubelet installed directly on the bare metal in binary form, you need to install iSCSI yourself.\r\n\r\nThe iSCSI (Internet Small Computer System Interface) is a TCP / IP-based protocol used to establish and manage interconnections between IP storage devices, hosts and clients, and to create storage area networks (SANs ). The SAN makes it possible for the SCSI protocol to be used in high-speed data transmission networks, with block-level data transfer between multiple data storage networks. The SCSI architecture is based on C/S mode and is typically used in environments where devices are close to each other and these devices are connected by a SCSI bus.\r\n\r\nOpenEBS needs to use iSCSI as a storage protocol, and CentOS default does not have iSCSI installed, so we need to manually install.\r\n\r\nThere are two types of roles in iSCSI:\r\n\r\n- **target** : used to provide storage (server)\r\n- **initiator** : use the stored client (client)\r\n\r\nThe following figure in Kubernetes uses iSCSI architecture (Source: [http://rootfs.github.io/iSCSI-Kubernetes/)](https://translate.googleusercontent.com/translate_c?depth=1&hl=en&rurl=translate.google.co.in&sl=zh-CN&sp=nmt4&tl=en&u=http://rootfs.github.io/iSCSI-Kubernetes/%25EF%25BC%2589&usg=ALkJrhgk4iuBd1pHB1zGq6XKLwffkSGZew)\r\n\r\n![iSCSI-Kubernetes](/content/images/2020/01/iscsi-kubernetes.png)\r\n\r\nInstalling the iSCSI service is very simple, you do not need additional configuration, just start the service after installation.\r\n\r\nExecute the following command on each node node:\r\n\r\n```\r\nyum -y install iscsi-initiator-utils systemctl enable iscsid systemctl start iscsid\r\n```\r\n\r\n## Quick start\r\n\r\nRun the OpenEBS service using Operator:\r\n\r\n```\r\nwget https://raw.githubusercontent.com/openebs/openebs/master/k8s/openebs-operator.yaml kubectl apply -f openebs-operator.yaml\r\n```\r\n\r\nUse the default or custom storageclass:\r\n\r\n```\r\nwget https://raw.githubusercontent.com/openebs/openebs/master/k8s/openebs-storageclasses.yaml kubectl apply -f openebs-storageclasses.yaml\r\n```\r\n\r\nMirror used are:\r\n\r\n- openebs/m-apiserver: 0.5.1-RC1\r\n- openebs/openebs-k8s-provisioner: 0.5.1-RC2\r\n- openebs/jiva: 0.5.1-RC1\r\n- openebs/m-exporter: 0.5.0\r\n\r\n## Test\r\n\r\nLet’s use the Example from the official OpenEBS documentation to install the Jenkins test:\r\n\r\n```\r\nwget https://raw.githubusercontent.com/openebs/openebs/master/k8s/demo/jenkins/jenkins.yml kubectl apply -f jenkins.yml\r\n```\r\n\r\nCheck PV and PVC\r\n\r\n```\r\n$ kubectl get pv\r\nNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE\r\npvc-8e203e86-f1e5-11e7-aa47-f4e9d49f8ed0 5G RWO Delete Bound default/jenkins-claim openebs-standard 1h\r\n$ kubectl get pvc kubectl get pvc NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE\r\njenkins-claim Bound pvc-8e203e86-f1e5-11e7-aa47-f4e9d49f8ed0 5G RWO openebs-standard 1h\r\n```\r\n\r\nView Jenkins pod:\r\n\r\n```\r\nEvents: Type Reason Age From Message ---- ------ ---- ---- ------- Warning FailedScheduling 29m (x2 over 29m) default-scheduler PersistentVolumeClaim is not bound: \"jenkins-claim\" (repeated 3 times) Normal Scheduled 29m default-scheduler Successfully assigned jenkins-668dfbd847-vhg4c to 172.20.0.115 Normal SuccessfulMountVolume 29m kubelet, 172.20.0.115 MountVolume.SetUp succeeded for volume \"default-token-3l9f0\" Warning FailedMount 27m kubelet, 172.20.0.115 Unable to mount volumes for pod \"jenkins-668dfbd847-vhg4c_default(8e2ad467-f1e5-11e7-aa47-f4e9d49f8ed0)\": timeout expired waiting for volumes to attach/mount for pod \"default\"/\"jenkins-668dfbd847-vhg4c\". list of unattached/unmounted volumes=[jenkins-home] Warning FailedSync 27m kubelet, 172.20.0.115 Error syncing pod Normal SuccessfulMountVolume 26m kubelet, 172.20.0.115 MountVolume.SetUp succeeded for volume \"pvc-8e203e86-f1e5-11e7-aa47-f4e9d49f8ed0\" Normal Pulling 26m kubelet, 172.20.0.115 pulling image \"sz-pg-oam-docker-hub-001.tendcloud.com/library/jenkins:lts\" Normal Pulled 26m kubelet, 172.20.0.115 Successfully pulled image \"sz-pg-oam-docker-hub-001.tendcloud.com/library/jenkins:lts\" Normal Created 26m kubelet, 172.20.0.115 Created container Normal Started 26m kubelet, 172.20.0.115 Started container\r\n```\r\n\r\nStart up successful. The Jenkins configuration uses **NodePort** mode access and now accesses the NodePort of Jenkins service for any node in the cluster.\r\n\r\n## Reference\r\n\r\n- [OpenEBS Documentation](http://openebs.readthedocs.io/)\r\n- [CentOS 7.x 下配置 iSCSI 网络存储](http://blog.csdn.net/wh211212/article/details/52981305)\r\n- [Configure iSCSI Initiator](https://www.server-world.info/en/note?os=CentOS_7&p=iscsi&f=2)\r\n- [https://www.openebs.io/](https://www.openebs.io/)\r\n- [https://github.com/openebs/openebs](https://github.com/openebs/openebs)\r\n- [Data Scientists adopting tools and solutions that allow them to focus more on Data Science and less on the infrastructure around them](https://blog.openebs.io/data-scientists-adopting-tools-and-solutions-that-allow-them-to-focus-more-on-data-science-and-less-db9654063bd5)\r\n- [RHEL7: Configure a system as either an iSCSI target or initiator that persistently mounts an iSCSI target.](https://www.certdepot.net/rhel7-configure-iscsi-target-initiator-persistently/)\r\n\r\nOriginal page: [https://jimmysong.io/posts/using-openebs-as-kubernetes-persistent-volume/](https://jimmysong.io/posts/using-openebs-as-kubernetes-persistent-volume/)\r\n\r\nTranslated from Chinese to English by Google Translate\r\n","slug":"using-openebs-as-a-kubernetes-persistent-volume"},{"id":71,"title":"In 2018 - IT dreams deferred finally achieved?\r","author":"Evan Powell\r","author_info":"Founding CEO of a few companies including StackStorm (BRCD) and Nexenta — and CEO & Chairman of OpenEBS/MayaData. ML and DevOps and Python, oh my!\r","date":"09-01-2018\r","tags":["Containerization"," Docker"," Kubernetes"," OpenEBS"," Storage"],"excerpt":"At MayaData, we believe we, and others are building the foundation for a much longer cycle of software-centric innovation thanks to proactively eliminating sources of lock-in.\r","content":"\r\n# **_…..Dreams deferred_**\r\n\r\nMany of us in the infrastructure business have been forced by experience to lower our expectations of what is possible. While we’ve all dreamed for decades of a world in which software just works — and delivers value where and how it is needed — we’ve been disappointed again and again.\r\n\r\nWe have seen open systems that, over time, became increasingly proprietary with Unix diverging into proprietary camps.\r\n\r\nWe’ve seen SQL go from a fascinating research project to a broadly deployed standard to, with the help of stored procedures and truly nefarious licensing, a source of lock-in dominated by one company and one eccentric multi-billionaire.\r\n\r\nWe’ve seen a vision of Java as a cross infrastructure abstraction layer bloom and wither.\r\n\r\nAnd of course, we’ve seen virtual machines offer the promise of cross infrastructure mobility only to fall prey to the rest of the stack and proprietary business models and incorrect levels of abstraction.\r\n\r\nOver time the result has been infrastructure by silos, with each silo — security, storage, networking and compute — dominated by proprietary solution providers that over time sought to provide the entire stack to drive up their sales, even if doing so meant increasing the friction for users seeking to combine best of breed solutions.\r\n\r\n# **_On the other hand…._**\r\n\r\nAll along technological progress has continued. Allowing for new possibilities.\r\n\r\nWe’ve even seen — finally — broadband make its way into the United States so that more and more we can cost effectively access the cloud (yes, the loss of net neutrality seems to put this at risk for at least consumers and new entrants).\r\n\r\nAnd intra data center networking has gotten insanely fast — which is crucial if we are to run workloads in a flexible manner.\r\n\r\nAnd arguably the best example of innovation at scale in modern business — Amazon — focusing on the right persona — the developer — and raising the bar massively for all of us in infrastructure.\r\n\r\nAnd perhaps most importantly, the Open Source community, which as Richard Stallman and others have pointed out predates the commercial software world and which some have called the world’s first social network, grew to become an undeniable force.\r\n\r\nAnd pulling all the positive forces together — DevOps and microservices. DevOps as a cultural movement and approach to building and running software at scale PLUS an emerging understanding of how to run systems via microservices as explained by the [12 factor approach](https://www.12factor.net/) and elsewhere led to countless examples of “software eating the world.”\r\n\r\n# **But …. What about lock-in?**\r\n\r\nSo as the above suggests, one theme in the story of innovation in IT over the years has been breakthrough technologies, and business models, enabling fundamentally better software delivered more easily to users. And as one approach came to predominate, proprietary approaches over time led to more “rent seeking”, where leading vendors extracted more value from their users and slowed their innovation. And this stagnation leads to pent up demand for better approaches — triggering the next cycle.\r\n\r\nWell — what about this time?\r\n\r\nKubernetes has emerged in part because it promises a world more free from lock-in to AWS and other clouds. Could it be that we have collectively learned enough from all the boom and bust cycles to know what is good for us?\r\n\r\nCould be — the signs are incredibly promising as all the cloud vendors and RedHat and Cloud Foundry and Docker and Mesos have all embraced Kubernetes as the standard control plane. This means that you are no longer locked-in by the control plane logic and should be able to move your applications from cloud to cloud and from on premise to off. Crucially — Kubernetes itself is open source and all the major vendors have pledged to not fork it; so it shouldn’t be _too_ bad to move from one vendor supporting Kubernetes to another.\r\n\r\n_…. but what about data?_ Without data mobility all you can move is the stateless components of your applications — provided you address having those components able to access your store of state.\r\n\r\n# **And your data remains largely locked-in**\r\n\r\n_Locked into_ proprietary vendors.\r\n\r\n_Locked into_ underlying systems that are sources of risk and that themselves are resolutely monolithic.\r\n\r\nI harken back to a speech Randy Bias gave at one of the OpenStorage summits I helped host back in 2010 about `blast radius`. The basic idea is that microservices dramatically reduce the blast radius of any single outage; conversely putting all your state in a shared storage system is, by comparison, an anti-pattern. When your shared storage dies or slows down unexpectedly perhaps due to a rebalancing, so does your entire environment. So much for being built for failure!\r\n\r\nS3 for non performant data and EBS for performant data have become defacto standards. They are easy, they “just work”, and — crucially — they put the responsibility for the configuration, care and feeding of state in the hands of the teams that also control the microservices.\r\n\r\nThe only problem is that it is _hard_ to move your data from these AWS services to other solutions without a lot of work that frankly software development teams don’t have the time or inclination to invest. I see the lock-in that results as the TBs pile up treated much as technical debt is treated — it is annoying and yet it is much less important than getting valuable capabilities in the hands of end users.\r\n\r\nAnd putting all your data in a scale-out software solution running on these clouds only makes the issue worse. Now you have the blast radius issue and you have your data stored in a solution that cannot be stretched across clouds. Two sources of lock-in and at least twice the effort!\r\n\r\nIt might be worth remembering that networking, security and compute are all becoming both infrastructure services delivered as services **to** today’s microservice environments and **are themselves also microservice based services**. Take a look at Project Calico for instance. Or at Kubernetes itself.\r\n\r\n**Nobody says — hey, Kubernetes is just a black box that sits to the side and so it needn’t be a bunch of microservices. But not storage. Storage somehow gets a pass. It gets to live with aged architectures and typically aged business models.**\r\n\r\n## Which raises the question: What if storage was itself delivered as microservices and orchestrated by Kubernetes?\r\n\r\nFor the purpose of this exercise, **assume** it were possible to make storage a set of capabilities delivered as microservices with the controller running on containers.\r\n\r\nYou’d probably agree that such an approach would have some benefits including:\r\n\r\n**Familiarity:**\r\n\r\n- If storage is delivered as microservices within Kubernetes then if you know how to run Kubernetes then you know how to run the storage.\r\n- Perhaps more importantly, you are familiar with the failure domain. You lose a storage controller — well, you just lost a stateless container that itself simply provides services and pointers towards the underlying data. Your data is always safe in multiple locations and your storage system itself is resilient (at least the way OpenEBS is architected with the use of atomic transactions).\r\n\r\n**Granularity:**\r\n\r\n- As mentioned above, the defacto standard approach to delivering storage is to use AWS itself with each team organized around one or more microservices having their own approach to EBS for performant storage and S3 for blobs of data.\r\n- Using a shared storage system runs counter to this approach and cuts these teams out of the loop. They are back to lobbying central IT as one of hundreds or even thousands of workloads with particular desires as to how storage should be configured. And, yes, those configurations matter. And, actually, they are impossible to get right. We’ve talked about that in the past including at Meet-ups: [https://www.slideshare.net/MattBaldwin3/containerized-storage-for-containers-why-what-and-how-openebs-works](https://www.slideshare.net/MattBaldwin3/containerized-storage-for-containers-why-what-and-how-openebs-works)\r\n\r\n![What move the data and configs next to the app](/images/blog/what-move-the-data-and-configs-next-to-the-app.png)\r\n\r\n**Performant:**\r\n\r\n- This being a storage blog, it is worth reiterating the point that shared storage is inherently less performant these days than direct attached or DAS. That is a fairly new reality. It used to be that DAS was really slow disk and the way to get IOPS was to stripe across a bunch of faster disks. That was a primary driver for shared storage. Imagine that — at one time CEPH would have been faster than the underlying hardware! How times have changed.\r\n- Our CTO, Jeffry Molanus does a good job walking through how the landscape of performance has changed why this and other changes now favor what we call “container attached storage”:\r\n- [https://blog.openebs.io/not-yet-another-distributed-storage-system-57ee9220c409](https://blog.openebs.io/not-yet-another-distributed-storage-system-57ee9220c409)\r\n\r\n**Natively cross cloud — with the help of metadata and routing services:**\r\n\r\n- What is perhaps least well appreciated about the potential of treating storage as a service delivered via microservices is that, correctly engineered, this means that data itself can be served as a service in the background across underlying clouds.\r\n- The first prerequisite is that the controller itself runs in a container or set of containers.\r\n- The second prerequisite is that the controller performs its magic in the user space so that the container does not need to be a special build and so that the system can perform.\r\n- Third, there needs to be the management of metadata to see where the data is versus the workloads. Kubernetes can help here as it expands however in addition a solution such as MayaOnline.io — as it matures — is needed. This service acts as an air traffic controller, helping the data to get to where it is needed. Such a service can also become more intelligent over time, for example suggesting improvements to Kubernetes storage policies based on success in running similar workloads.\r\n\r\n# **TL;DR:**\r\n\r\nSo, in short, this time perhaps it really _is_ different.\r\n\r\nThis time we “won’t get fooled again” (gratuitous old guy music reference :)).\r\n\r\nThis time we _will_ address the sources of lock-in not just at the controller plane via Kubernetes but also at the data layer. And in so doing we will avoid ending the the cycle of innovation prematurely. Perhaps it goes without saying — only an open source solution like OpenEBS that is widely accepted and easy to fork if needed can help free us from the risk of cloud lock-in without adding yet another source of lock-in.\r\n\r\nAnd we can address lock-in while respecting and extending the patterns we know are working including: every team controlling their infrastructure themselves, the elimination of single points of failure (aka “storage blast radius”), and allowing Kubernetes to control more and more of the environment, leaving the developers to focus on capabilities that add value to their end users.\r\n\r\nIn short, at MayaData we believe we and others are building the foundation for a much longer cycle of software-centric innovation thanks to proactively eliminating sources of lock-in.\r\n\r\nPlease help this reality come true by providing us feedback on [OpenEBS](http://www.openebs.io/) and [MayaData](http://www.mayadata.io/) or see us on the Kubernetes storage SIG where we are trying to be helpful as well.\r\n","slug":"in-2018-it-dreams-deferred-finally-achieved"},{"id":72,"title":"Austin KubeCon — Persistent Storage Round-up and Looking beyond!\r","author":"Kiran Mova\r","author_info":"Contributor and Maintainer OpenEBS projects. Chief Architect MayaData. Kiran leads overall architecture & is responsible for architecting, solution design & customer adoption of OpenEBS.\r","date":"08-01-2018\r","tags":["Kubecon"," Kubernetes"," Persistence"," Storage Containers"," Updates"],"excerpt":"Kubernetes Clusters are up and running at the push of a button or even better by talking to your favorite bot.\r","content":"\r\nTL;DR\r\n\r\nThis rather has become a long post as I drafted it and incorporated feedback from community members. So, in short:\r\n\r\n- 2017 saw Kubernetes being crowned as the de-facto container orchestration engine. And from the storage perspective, containerized storage makes its presence felt.\r\n- 2018 — The reign of Kubernetes continues. Containerized Storage gains momentum with renewed focus on manageability of persistence workloads\r\n\r\n—\r\n\r\nKubernetes Clusters are up and running at the [push of a button](https://twitter.com/muratkarslioglu/status/941399154714066944) or even better by [talking to your favorite bot](https://www.youtube.com/watch?v=07jq-5VbBVQ).\r\n\r\n![Push a button](https://cdn-images-1.medium.com/max/800/1*oz5esyJvsb5zBIaoyDKUeQ.png)\r\n\r\nsource: Containerized Storage for Containers — session at Kubernetes Meetup [https://t.co/tdQaOue5w8](https://t.co/tdQaOue5w8)\r\n\r\nBut just about a year ago when we started envisioning OpenEBS — Containerized Storage for Containers — to be orchestrated by Kubernetes, setting up a cluster took a good three days. Phenomenal progress by the Kubernetes Community in 2017 — from Kubernetes — the Hard-Way to making it Child’s play!\r\n\r\nIf you were at KubeCon, you would have definitely been caught up in or at least glimpsed the Euphoria around Kubernetes. Kubernetes, almost feels like Noah’s Ark right now — you are either in or wait to perish. A little exaggerated, I know, but only a little.\r\n\r\n_Every Technology and Cloud Service Provider are now providing or planning to provide a container service using Kubernetes and almost every infrastructure provider is looking at putting themselves on the map of Kubernetes._\r\n\r\n![Cloud Native Landscape](https://cdn-images-1.medium.com/max/800/1*YJIF6xBEPL1WpVgOK4VV0Q.png)\r\n\r\n[https://raw.githubusercontent.com/cncf/landscape/master/landscape/CloudNativeLandscape_latest.png](https://raw.githubusercontent.com/cncf/landscape/master/landscape/CloudNativeLandscape_latest.png)\r\n\r\nAnd why not!\r\n\r\nKubernetes has reached the level of maturity that can be used with ease in controlled environments and at the same time, has gained tremendous strength from a community that is not afraid to re-engineer or re-architect the core components. The popularity of Kubernetes is enabling many meta-kubernetes projects like — kubespray, stackpointcloud, kubeless, heptio ksonnet, heptio ark, etc. And with these new projects and possibilities, many _Kubernetes — blue ocean — companies are on the rise!_\r\n\r\n—\r\n\r\nI am very bullish that Kubernetes is that magical ingredient that will renew the focus on HumanOps!\r\n\r\nOne inevitable aspect of being an infrastructure operations admin is to be prepared for smooth operations, scaling, maintaining and recovering from faults and disasters — which usually tend to put a lot of unwarranted pressure on the admins when dealing with their own management (business impact) and the vendors whose technology they used to build a “black-box” infrastructures. A “black-box” infrastructure that doesn’t comply with what they were told and assumed would do — and involves talking to people building those black-boxes often crossing company borders, leading into non-technical calls about blaming who is at fault. Such stressful conditions also exist within an organization where there is a crunch of resources.\r\n\r\nKubernetes and the meta-kubernetes projects are helping administrators build — what I call “white-box” infrastructures. Often professed and hardly-prevailed aspect of Infrastructure is the [_HumanOps_](https://blog.serverdensity.com/humanops/) _— \"_ technology affects the well being of humans just as humans affect the reliable operation of technology *\"* — which can be achieved by building “white-box” infrastructures that are easy to operate and reduce the dependency on specialists that tend to be over-worked in an organization. _The “white-box” infrastructures are built with API-driven Open Source Micro-Services._\r\n\r\nThe key to the widespread adoption of Kubernetes in such a short time is the inclusive nature of it, which was well captured by this slide from the KubeCon:\r\n\r\n![Extensibility](https://cdn-images-1.medium.com/max/800/1*IXods_RnXRco2z7UcngePw.png)\r\n\r\n[https://schd.ws/hosted_files/kccncna17/ac/KubeCon_2017\\_-_Kernels_and_Distros.pdf](https://schd.ws/hosted_files/kccncna17/ac/KubeCon_2017_-_Kernels_and_Distros.pdf)\r\n\r\n### **_Kubernetes is more than an orchestration engine → It is the new kernel for building clustered infrastructures._**\r\n\r\nI consider this shift towards making Kubernetes a Kernel that can be extended by custom solutions that can be downloaded and installed as a true enabler for driving innovation — which is inline with the Psyche of keeping “Community First and Company Next!”.\r\n\r\n—\r\n\r\nThis past year, saw the rise in user awareness for securing Containers. Different teams started tackling this issue from different perspectives — from providing secure container runtime like Kata Containers to using different types of Service Meshes to better access control and more.\r\n\r\nService Mesh was definitely a buzzword in 2017! The options — linkerd, envoy, istio and conduit — all of which are (or will be) accepted into CNCF sooner or later, provide a glimpse of interesting trend. For instance, [conduit](https://buoyant.io/2017/12/05/introducing-conduit/) is from the same team that built Linkerd. Conduit provides similar capabilities like Linkerd for managing the communication between micro-services, but seems better suited for Kubernetes environment that can run across clouds and with low resource constraints.\r\n\r\nLike Service Mesh, the other infrastructure components — logging, monitoring, tracing, and networking are all being containerized (re-engineered) to work well with Kubernetes primitives (resources, pods, policies, federations, labels, taints, tolerations, affinity and anti-affinity, CR, CRDs, Custom Controllers, etc.)\r\n\r\n### **_Kubernetes has become a powerful set of nuts and bolts, that is changing the way people should think about infrastructures and how systems are built._**\r\n\r\n—\r\n\r\nStorage is no different. How data is stored and managed is also being transformed by the possibilities afforded by Kubernetes. Like Service Mesh of initial days, a lot of incumbent storage vendors are providing a patched (which some view as cloud washed or container plugged) solutions that will result in operations and developers spending endless hours firefighting to make them work with cloud native environments.\r\n\r\nThe key for any infrastructure component to be called container-native will be characterized by being hardware agnostic and usable at scale! The past few months, there is an active workgroup team grappling with defining — [_Cloud Native Storage (WIP White Paper by CNCF Storage Workgroup)_](https://docs.google.com/document/d/1cJLgOAIWbi-Ya27BY7mjH61yoO3oWcO5tOZYteaDVgI/edit#heading=h.ik4inq9mv6b4)\r\n\r\nWhile deliberations are ongoing about what Cloud Native Storage is, which I think will finally be about users adoption, the talks at KubeCon suggest the community sees three distinct storage options for Kubernetes:\r\n\r\n- Persistence Volumes from External Storage Providers\r\n- Local/Ephemeral Storage for Containers\r\n- Containerized Storage for Containers\r\n\r\n—\r\n\r\n**Persistence Storage from External Storage Providers**\r\n\r\nMost of the cloud providers and incumbent storage vendors want the users to opt for this option where storage is connected via in-tree or out-of-tree dynamic volume provisioners. Many vendors are coming together in helping shape the CSI [(Container Storage Interface)](https://github.com/container-storage-interface/spec), and the initial implementation are slated to get into beta stage in early 2018. There are constant improvements — or strides — being made in storage workflow automation via controllers and `kubectl` — dynamically provisioning volumes, resizing, and snapshots.\r\n\r\nI spoke to a number of storage users at KubeCon, including the team at GitHub who are at the forefront of putting Kubernetes in production. The users are still very wary with the state of storage w.r.t using the PVs to connected storage and the amount of work involved in rewriting their operational scripts and playbooks.\r\n\r\nAnother issue I heard users talk about that puts them off NAS or SAN — and this was a little surprising as I’ve spent years building a unified storage system that in some environments is really fundamental to the architectures of private clouds and hosting environments — is that they think shared underlying storage does not fit a microservices architecture. Of course, if you read the 12 Factor definition it talks about storage if at all as an attached resource. However — it also is clear from 12 Factor approaches that _dev should be the same as possible as production and that the same people should be doing coding and deploys._ That’s just not the world of external arrays with special teams running storage and different arrays for dev, test, staging, and production.\r\n\r\nIt is also worth noting and taking time to understand that these options of connecting to network storage have been around for more than couple of years, and the fact that Stateful workloads on Kubernetes aren’t yet as prevalent says something about user acceptance of the approach! _Users are waiting for better options to be made available — like the support for local storage or something else — but not NAS!_\r\n\r\nLearning from the HBO team that was streaming GoT using Kubernetes, it is interesting to see a solution like Rook being used on top of EBS, while EBS is provided as PVs themselves.\r\n\r\n![Telemetry](https://cdn-images-1.medium.com/max/800/1*Zl5PPYzJpDZoXrK7DCL_0w.png)\r\n\r\n[https://www.youtube.com/watch?v=7skInj_vqN0](https://www.youtube.com/watch?v=7skInj_vqN0)\r\n\r\nRook also presented a pretty interesting study against using PVs from external storage to Pods in their talk [here](https://schd.ws/hosted_files/kccncna17/b3/Cloud%20storage-2.pdf). This is inline with what the teams at [PortWorx](https://portworx.com/ebs-stuck-attaching-state-docker-containers/), [StorageOS ](https://schd.ws/hosted_files/kccncna17/ca/2017-12-8-persistent-storage.pdf)and OpenEBS have been advocating as well.\r\n\r\n- Make static assignments of disks (physical or virtual) to nodes and use them as local storage — avoid detaching/attaching disks from nodes\r\n- As long as the applications can take care of replication and sustain longer downtime for nodes and cluster rebuilding times — use local PVs with the storage provisioned in the previous steps.\r\n- For workloads that don’t inherently support replication, snapshots, etc. use a containerized storage option.\r\n\r\n_I am a firm believer in CSI and what it was set to achieve and has already accomplished— Open Standard for interfacing with Storage. Something which SNIA should have done and couldn’t do in past two decades of my experience. OpenSDS seems to be an effort in that direction by SNIA, but is being received with the same cold response from vendors and in turn the community. FWIW, REX-Ray is also playing in the same space._\r\n\r\nAt the moment, the focus for CSI is on (simplifying a bit) provisioning and de-provisioning volume, but albeit a good start. But is it enough for the users to start using it? There was an interesting observation made in the F2F storage workgroup meeting at KubeCon that CSI discussions are mostly driven by vendors. Where are the users? Can we say that vendors represent the users, because they interact with their users?\r\n\r\nComing from a operational background, for me to consider using CSI to connect with external storage systems, CSI requires to evolve and include API for Day 2+ Operational Usecases that involve — ease of debugging, snapshots, backups, migration and most importantly, a unified monitoring system of the Kubernetes Clusters and the Storage Systems.\r\n\r\nDon't get me wrong. We need storage, lots and lots of it and it will be served from external storage systems — cloud (EBS, GPD, etc., ) or on-premise SAN/NAS products. But these external storage systems weren’t designed to be used for micro-services environment but rather to provide volumes to Nodes (physical or virtual) that are long running and are not subject to rapid connects, disconnects and migrations.\r\n\r\n_I believe in the long run we will be using CSI with these external storage for what they were designed for — mainly to provision storage to the nodes rather than Pods._\r\n\r\n—\r\n\r\n**Local/Ephemeral Storage for containers (aka Direct Attached Storage — DAS)**\r\n\r\nKubernetes keeps improving the capabilities for managing the local/ephemeral storage. The recent advancements include:\r\n\r\n- Support for attaching [block devices](https://schd.ws/hosted_files/kccncna17/8e/Mitsuhiro_Tanino_Block_Volume_KC_CNC_NA17.pdf) to pods\r\n- Support for enforcing policies or [resource limits for ephemeral storage](https://schd.ws/hosted_files/kccncna17/3e/Kubecon_localstorage.pdf)\r\n- Enhance the UX for using [local storage for PVs](https://schd.ws/hosted_files/kccncna17/3c/2017%20Kubecon%20Storage%20-%20FINAL.pdf) — dynamic provisioning, hook into the scheduler for pods requiring local storage PVs etc.,\r\n\r\n_When using local storage for PVs, the applications using these PVs need to also own up some of the features like — data consistency, replication, snapshots, etc., that are typically taken care of by the storage controllers._\r\n\r\n_One of the ongoing issue with using the local storage in clouds are the quirks of disconnecting and connecting the disks to different instances. The local storage is really meant for using storage that is tied to the node — either physically inserted or hardwired to a VM instance._\r\n\r\n—\r\n\r\n**Containerized Storage for Containers (aka Container Attached Storage — CAS)**\r\n\r\nThe appeal for fully containerized storage for containers is in the possibilities that it opens up to the DevOps administrators who are interested in building on-demand programmable infrastructures, which include:\r\n\r\n- storage can be observed down to the bit using the same set of tools they use to monitor their compute and network.\r\n- storage can also be secured using the same tools used to secure application pods\r\n- storage can be made policy driven similar to networks\r\n- storage can be programmed and versioned — made an integral part of the work flows for developers and operations administrators\r\n- storage can also use federation features for cloud migration similar to application pods.\r\n\r\n_StorageOS presented at KubeCon on what we call Container Attached Storage — and on how to select which storage approach for which workload and environment. It was a good talk — slides are here: _[talk](https://schd.ws/hosted_files/kccncna17/ca/2017-12-8-persistent-storage.pdf)\r\n\r\n_Kubernetes can provide an unified infrastructure layer to the applications by pooling together nodes with compute, network, and **storage as well**._\r\n\r\nKubeCon showcased a demo of launching [glusterfs in containers](https://schd.ws/hosted_files/kccncna17/7b/KubeRunningYourStorage1208.pdf). While this is feasible, it might put some hard requirements on the amount of RAM and CPU required for running the software optimized for running in the nodes in containers.\r\n\r\nTo be container-native storage, the storage software needs to be broken down into micro-services, just like how Kubernetes runs using micro-services. There has to be greater flexibility provided to the developers and operations to run seamlessly on their choice of hardware!\r\n\r\nOpenEBS does just that! OpenEBS provides all the enterprise grade storage features by its open-source containers that can run anywhere. _No kernel dependencies and vendor lock-in._ A typical data path using the OpenEBS Containers is as follows:\r\n\r\n![Stateful Apps using OpenEBS Volumes](https://cdn-images-1.medium.com/max/800/1*Ifsa-k-q4EnO7Fpg7E6jLA.png)\r\n\r\n[https://github.com/openebs/openebs/blob/master/contribute/design/OpenEBS%20Architecture%20and%20Design.pdf](https://github.com/openebs/openebs/blob/master/contribute/design/OpenEBS%20Architecture%20and%20Design.pdf)\r\n\r\nOpenEBS can consume any storage connected to the node and provide enterprise grade storage features (like snapshots, replication, data-consistency, cross-cloud migration, etc.) to Stateful workloads.\r\n\r\n2017 saw a steep rise in the community for building OpenEBS with users evaluating it for different types of storage workloads from Cassandra, Minio to MySQL and some users also rolling out services to their customers using Kubernetes and OpenEBS. _I am looking forward to more application work-flow focused automation of Stateful workloads using OpenEBS in 2018._\r\n\r\n—\r\n\r\nManaging Storage in an enterprise environment — whether it is cloud or on-premise has to be as seamless as interacting with your favorite bot! I know it is a bit far fetched, but it is definitely going to happen in 2018 with companies like MayaData leading from the front!\r\n\r\n2017 saw some major improvements to storage in Kubernetes, but there is a lot more to look forward to in 2018!\r\n\r\n- CSI spec will mature to encompass all the storage API and will be adopted by a large percentage of storage vendors.\r\n- Improved debuggability/observability of PV — Metrics and Alerts etc.\r\n- Make PVs accessible via namespaces and RBAC and extend the Policies to involve HumanOps!\r\n- Further improvements to resource constraints from the IOPS perspective\r\n- Support for host-supported file system types to be used on top of local storage\r\n\r\n_Programmable and Predictable Infrastructures are what the developers need while the administrators are looking for building infrastructures that can be easily versioned, built, and deployed anywhere — where the economics makes sense._\r\n\r\n—\r\n\r\nI take tremendous pride in having been associated with MayaData team that is at the forefront of making Storage Operations fade away by extending Kubernetes with containerized storage for containers.\r\n\r\nYour participation will shape and accelerate the movement of Stateful Workloads on Kubernetes. Do join us on Slack on either [Kubernetes sig-storage](http://slack.k8s.io/) or [OpenEBS users](http://slack.openebs.io/) or join the [CNCF storage events](https://calendar.google.com/calendar/embed?src=linuxfoundation.org_o5avjlvt2cae9bq7a95emc4740%40group.calendar.google.com)!\r\n\r\nLooking forward to an exciting 2018 for the Stateful Workloads on Kubernetes!\r\n","slug":"austin-kubecon-persistent-storage-roundup-and-looking-beyond"},{"id":73,"title":"Install OpenEBS using StackPointCloud Trusted Charts?\r","author":"Murat Karslioglu\r","author_info":"VP @OpenEBS & @MayaData_Inc. Lives to innovate! Opinions my own!\r","date":"07-01-2018\r","tags":["Digital Ocean"," Helm"," Kubernetes"," Solutions"," StackPointCloud"],"excerpt":"What is StackPointCloud Trusted Charts?\r","content":"\r\n#### What is StackPointCloud Trusted Charts?\r\n\r\n[StackPointCloud](https://stackpoint.io/) (SPC) introduced a concept of Trusted Charts, a list of validated [Helm](https://helm.sh/) Charts provided by its partners to quickly spin up a solution in a [Kubernetes](https://kubernetes.io/) cluster. Helm Charts helps you define, install, and upgrade even the most complex Kubernetes application.\r\n\r\nPreviously, I wrote about few different ways of getting OpenEBS up and running on different cloud vendors. Using Helm Chart is one of the available options to deploy OpenEBS. OpenEBS Helm Charts were available since v.5.0 both on [Github](https://github.com/openebs/openebs/tree/master/k8s/charts/openebs) and as a [packaged chart](https://openebs.github.io/charts/). Recently SPC included OpenEBS into their Trusted Charts repo and made it one-click easy for its customers.\r\n\r\nSPC Trusted Charts currently offers 23 solutions including databases, CI/CD, monitoring, storage and ingress solutions. Here is the list of Trusted Charts:\r\n\r\n### CI/CD\r\n\r\n- [Jenkins](https://jenkins-ci.org/)\r\n- [GitLab Runner](https://docs.gitlab.com/runner/)\r\n- [Spinnaker](https://www.spinnaker.io/)\r\n\r\n### Databases\r\n\r\n- [CockroachDB](https://www.cockroachlabs.com/)\r\n- [Crunchy PostgreSQL Operator](https://github.com/CrunchyData/postgres-operator)\r\n- [Patroni](https://github.com/turbonomic/kubeturbo)\r\n- [Redis](https://redis.io)\r\n- [RethinkDB](https://www.rethinkdb.com/)\r\n- [MongoDB Replica Set](https://docs.mongodb.com/manual/replication/)\r\n\r\n### Ingress/Proxy/Load Balancer\r\n\r\n- [Nginx Ingress](https://github.com/kubernetes/ingress-nginx)\r\n- [Traefik](https://traefik.io/)\r\n\r\n### Messaging\r\n\r\n- [Kafka](https://kafka.apache.org/)\r\n- [Rabbitmq](https://www.rabbitmq.com)\r\n\r\n### Storage\r\n\r\n- [OpenEBS](https://openebs.io/)\r\n- [Minio](https://www.minio.io/)\r\n- [Etcd-operator](https://github.com/kubernetes/charts/tree/master/stable/etcd-operator)\r\n\r\n### Others\r\n\r\n- [Grafana](https://grafana.com/)\r\n- [Keel](https://keel.sh/)\r\n- [Kube-lego](https://github.com/jetstack/kube-lego)\r\n- [Kubeturbo](https://github.com/turbonomic/kubeturbo)\r\n- [Memcached](https://memcached.org/)\r\n- [Tensorflow Inception](https://github.com/tensorflow/models/tree/master/research/inception)\r\n\r\nI’ll go through the quick steps of deploying OpenEBS.\r\n\r\n### Prerequisites\r\n\r\nMinimum requirements for deploying your Kubernetes clusters on StackPointCloud:\r\n\r\n### Cloud Provider Account\r\n\r\n- [Amazon Web Services (AWS)](https://aws.amazon.com/) or\r\n- [DigitalOcean](https://www.digitalocean.com)\r\n\r\n### Deploy a New Kubernetes Cluster\r\n\r\nFirst, go to [stackpoint.io](https://stackpoint.io/) and click on **Launch a Cluster** button to start your free trial.\r\n\r\n![Universal control plane for managed Kubernetes](https://cdn-images-1.medium.com/max/800/0*0cB3ttYmslFZgH1h.png)\r\n\r\nThen choose your cloud provider. In this example, I will use **Digital Ocean**.\r\n\r\n![Choose cloud provider](https://cdn-images-1.medium.com/max/800/0*21G24JgfuqlR6snZ.png)\r\n\r\n### Configure Access to Digital Ocean\r\n\r\nOn the next screen, we need to configure our provider. You need to provide Digital Ocean API Token and optionally your SSH Key.\r\n\r\n![Configure your provider](https://cdn-images-1.medium.com/max/800/0*wDcMg-_HTjIOFvgb.png)\r\n\r\nClick on **Add API Token** button.\r\n\r\n![Add API token](https://cdn-images-1.medium.com/max/800/0*53wGtQ7eUt18u6pS.png)\r\n\r\nAfter you add your credentials, click on **Submit**.\r\n\r\n### Configure K8s Cluster\r\n\r\nOn “Configure your cluster” page click the edit button on **Distribution** and choose **Ubuntu 16.04 LTS**.\r\n\r\n![Configure your cluster](https://cdn-images-1.medium.com/max/800/0*NvtnryAA8GNi-fyN.png)\r\n\r\nChange the **Cluster Name** something meaningful like **OpenEBS Demo**.\r\n\r\n![Enter cluster name](https://cdn-images-1.medium.com/max/800/0*LTa6zBooJdTsyqss.png)\r\n\r\nLeave everything else as default and click on **Submit**.\r\n\r\nIn about 10–15 minutes you will get your new cluster deployed.\r\n\r\n### Adding OpenEBS to Your Kubernetes Cluster\r\n\r\nFirst, make sure your cluster and all nodes are up.\r\n\r\nOn the **Control Plane** tab click on your recently created cluster.\r\n\r\n![Control plane](https://cdn-images-1.medium.com/max/800/0*RHQ9LbyxydjHkJSk.png)\r\n\r\nOnce the Kubernetes cluster is up on Digital Ocean with functional Helm, scroll down to the **Solutions** tab and click on **Add Solution** button.\r\n\r\n![Add Solution](https://cdn-images-1.medium.com/max/800/0*sH0lzv23vHonV5Zk.png)\r\n\r\nClick on **Add Solutions**, and select **Trusted Charts**.\r\n\r\n![Select charts](https://cdn-images-1.medium.com/max/800/0*V6iP5PzNAzFk4sME.png)\r\n\r\nFrom the list above select **OpenEBS**.\r\n\r\n![OpenEBS namespace](https://cdn-images-1.medium.com/max/800/0*CJkPrkJCS9Fp_GXu.png)\r\n\r\n**Release Name** is randomly generated every time. If you want to use OpenEBS example workloads provided in OpenEBS repos without any modification then use `default` as **NameSpace**. Otherwise, you need to modify the namespace for workloads you deploy and make sure to use the same name.\r\n\r\nClick on **Install** to deploy OpenEBS on your cluster.\r\n\r\n**Note:** Default settings assume that RBAC is enabled. If you disabled RBAC while you are configuring your provider previously then set `rbacEnable: false` otherwise use default values.\r\n\r\nState field should be green after OpenEBS is successfully added.\r\n\r\n![OpenEBS successfully added](https://cdn-images-1.medium.com/max/800/0*HzCZp3Z5LbT3Hsrh.png)\r\n\r\nNow your cluster is ready; you can run your workloads on `openebs-standard` and other predefined storage classes.\r\n\r\nTo confirm, click on **Kubernetes Dashboard**. This will bring up your Kubernetes Dashboard UI in a new window. You will find all predefined OpenEBS **Storage Classes** here under **Storage Classes** section.\r\n\r\n![Kubernetes Storage Classes](https://cdn-images-1.medium.com/max/800/0*mNU-nhwvNy9UB0W5.png)\r\n\r\nNow you are ready to deploy your stateful workloads.\r\n\r\nTake a look at my previous articles on step-by-step instructions for deploying few popular stateful workloads such as [Cassandra](http://containerized.me/how-to-deploy-a-cassandra-cluster-ring-on-kubernetes-openebs/), [Jenkins](http://containerized.me/how-to-deploy-jenkins-on-kubernetes-openebs/), and [Postgres](http://containerized.me/how-to-deploy-a-postgresql-cluster-on-kubernetes-openebs/) on OpenEBS persistent storage.\r\n\r\n---\r\n\r\n_Originally published at _[_Containerized Me_](http://containerized.me/install-openebs-using-stackpointcloud-trusted-charts/)_._\r\n","slug":"install-openebs-using-stackpointcloud-trusted-charts"},{"id":74,"title":"How we built multi-tenant ChatOps.. for MayaOnline!\r","author":"Satyam Zode\r","author_info":"Go Developer @openebs | Open Source Contributor | Avid Learner\r","date":"31-12-2017\r","tags":["Kubernetes"," Slack"," Chatbots"," ChatOps"," Chatbot Design"],"excerpt":"Maya-ChatOps is one of the core areas of MayaOnline, covering the storage operational support of Kubernetes clusters.\r","content":"\r\n## What is Maya ChatOps?\r\n\r\nMaya-ChatOps is one of the core areas of [MayaOnline](https://mayaonline.io/), covering the storage operational support of Kubernetes clusters. DevOps developers and admins get the alerts and analytics of their OpenEBS volumes deployed across multi-cloud Kubernetes clusters right into their [slack](https://slack.com/) channels. Our vision of ChatOps extends beyond just simply providing alerts and providing a way to query any configuration and status from slack. It goes all the way to interact with DevOps developers and admins to manage the YAML config files in their CI/CD system.\r\n\r\n## What is MuleBot ?\r\n\r\n![MuleBot](/images/blog/mule-bot.png)\r\n\r\nMuleBot is the name of the bot or slack application from Maya. MuleBot is a distributed slack application. MuleBot responds to user’s queries about configuration and status of the OpenEBS volumes. Sometimes, MuleBot tries to surprise you with smart alerts prior to a real situation happens.\r\n\r\n## How to use Maya ChatOps?\r\n\r\nYou can start using ChatOps by adding Slack integration in MayaOnline. The MuleBot slack application will be installed in your workspace. Subsequent steps involve configuring a single or multiple clusters to the desired slack channel. This mapping is maintained in the MO in the form of a “slack-card”.\r\n\r\nYou can add as many slack cards as you want for your clusters. Through this channel, you will be able to interact with clusters imported in the MayaOnline.\r\n\r\n## What are we using underneath for powering our ChatOps?\r\n\r\nWell, this is why I am writing this blog, to tell you the various choices we had and why we ended up with a particular choice. Some of the design goals we kept while choosing the bot framework are:\r\n\r\n- Users of MayaOnline will be in thousands to begin with, so, the bot framework has to be multi-tenant\r\n- The bot has to be a micro service and suitable to run seamlessly on Kubernetes\r\n- The bot framework has to have the NLP AI support for us to get that capability out to the users in the near future\r\n\r\nSo, we looked at [Hubot](https://hubot.github.com/), [StackStorm](https://github.com/StackStorm)/errBot and [BotMan](https://botman.io/)\r\n\r\nEach one of them had their benefits but none of them were multi-tenant. Then we looked at which is easiest to add the multi-tenant support to, BotMan came surprisingly easy to add this support to. BotMan is thin, and is written as a stateless application. The preliminary approach involved passing the user configuration in environment variables. All it needed was a thin shim to get user-config details dynamically and we had achieved multi-tenancy! It is that simple.\r\n\r\nWe kept a combination of slack **team_id**, **channel-id** as the key of the mulebot to manage the link between the slack user config and MayaOnline user config.\r\n\r\n![Chat Ops Architecture](/images/blog/bot-architecture.jpeg)\r\n\r\nWith the above design Maya ChatOps allows users to configure different slack channels for different Kubernetes clusters at MayaOnline.\r\n\r\nNext steps:\r\n\r\n- In the coming weeks, we will try to post some example scenarios suggesting how smart our MuleBot can be 😄\r\n- We plan to extend the BotMan framework to provide Maya ChatOps API. A DevOps developer/admin can use these APIs to integrate better into their CI/CD\r\n- Currently it is integrated with Slack. PagerDuty is on our horizon.\r\n","slug":"how-we-built-multitenant-chatops-for-mayaonline"},{"id":75,"title":"OpenEBS 0.5 enables Storage Policies for Kubernetes Persistent Volumes\r","author":"Kiran Mova\r","author_info":"Contributor and Maintainer OpenEBS projects. Chief Architect MayaData. Kiran leads overall architecture & is responsible for architecting, solution design & customer adoption of OpenEBS.\r","date":"30-11-2017\r","tags":["Container"," Open Source"," Storage Containers"," Kubernetes"," Updates"],"excerpt":"Personally, it is very exciting and enriching to see the growth of the OpenEBS project — from its capabilities, contributors and community perspective!\r","content":"\r\n\r\nPersonally, it is very exciting and enriching to see the growth of the OpenEBS project — from its capabilities, contributors and community perspective!\r\n\r\nI believe the metric to measure the success of OpenSource Projects is determined by the number of users and the conversion ratio of users turning into contributors. The past couple of months (thanks to campaigns like Hacktoberfest and the ongoing OpenEBS Hackfest), we have seen a steep rise in the number of contributors and contributions to the OpenEBS project.\r\n![OpenEBS contributors](https://cdn-images-1.medium.com/max/800/1*BMOr9ULh_7KnM6k8aUj9hw.png)\r\n\r\nIn almost all the interactions we had with the user community, we are seeing a clear resonance of the value proposition that OpenEBS brings to the [DevOps teams managing systems with large number of micro-services](https://twitter.com/muratkarslioglu/status/921072858628997121). The best part is that the users are independently evaluating OpenEBS and finding ways to automate their Compute, Network, Storage, and Data related Operations.\r\n![Towards Kubernetes](https://cdn-images-1.medium.com/max/800/0*XilwHl_ucs5K5fcK.jpg)\r\n\r\nToday, I can look back on our decision to use Kubernetes as a framework to build OpenEBS is one of the best decisions we have made. While the core of the Kubernetes community is helping DevOps teams treat Compute and Network as Code — we at OpenEBS are focused at extending Kubernetes to enable treating Storage and Data also as Code.\r\n\r\nI am delighted to announce that OpenEBS 0.5 is released with 300+ PRs coming from 50+ new community contributors, with several new features and bug fixes. Summary of changes are available in the [Release Notes](https://github.com/openebs/openebs/releases/tag/v0.5.0).\r\n\r\nSome notable changes include:\r\n\r\n- Storage Policy Enforcement Framework that allows DevOps teams to deploy a customized storage\r\n- Extend OpenEBS API Server to expose volume snapshot API\r\n- Support for deploying OpenEBS via helm charts\r\n- Support for monitor and get insights into OpenEBS volumes via Prometheus and Grafana\r\n- Sample Deployment YAMLs and corresponding Policy enabled Storage Classes for several stateful applications\r\n- Sample Deployment YAMLs for launching Kubernetes Dashboard for a preview of the changes done by OpenEBS Team to Kubernetes Dashboard\r\n\r\n***My favorite capability is the Storage Policy Framework that will enable each DevOps team to have their own storage controller — with their own storage policies. And the possibilities it will open-up!***\r\n\r\nImagine as a Developer I want to test my service against MySQL database with different datasets. On my staging PV (mysqldata), I can create multiple snapshots containing different datasets — say snaps like *sandy* and *wendy*. Now I can extend OpenEBS to support a new policy *\"openebs.io/jiva-replica-snap\"*, that can launch a new volume using snapshot for seed data.\r\n\r\nThe policy can be defined for snap — *sandy* as follows:\r\n\r\n    # Define a SC referring to snapshot sandy \r\n    apiVersion: storage.k8s.io/v1\r\n    kind: StorageClass\r\n    metadata:\r\n      name: mysvc-mysqldata-kiran-ds-sandy\r\n    provisioner: openebs.io/provisioner-iscsi\r\n    parameters:\r\n      openebs.io/jiva-replica-count: \"1\"\r\n      openebs.io/jiva-source-pv: \"mysqldata\"      \r\n      openebs.io/jiva-replica-snap: \"mysqldata-ds-sandy\"\r\n\r\nand another one for *wendy*:\r\n\r\n    # Define a storage classes supported by OpenEBS\r\n    apiVersion: storage.k8s.io/v1\r\n    kind: StorageClass\r\n    metadata:\r\n      name: mysvc-mysqldata-kiran-ds-wendy\r\n    provisioner: openebs.io/provisioner-iscsi\r\n    parameters:\r\n      openebs.io/jiva-replica-count: \"1\"\r\n      openebs.io/jiva-source-pv: \"mysqldata\"\r\n      openebs.io/jiva-replica-snap: \"mysqldata-ds-wendy\"\r\n\r\nIn my PVC, I can now use the above StorageClasses (augmented with OpenEBS Storage Policies) to point to the different datasets and independently test my service.\r\n\r\nAll this from ***kubectl***.\r\n\r\nIn the background, OpenEBS will create a separate Containerized Storage Engine/Controller for my test database — by sourcing the data from the specified snapshot.\r\n\r\nAnd btw, we are on the [CNCF LandScape](https://github.com/cncf/landscape) under the Cloud Native Storage options, and decidedly leading the niche market for Containerized Storage Controller. You will hear more on this in the coming days at the KubeCon, Austin.\r\n\r\n![CNCF](https://cdn-images-1.medium.com/max/800/1*rdKFLGyf0hRDB_zcgGlywA.png)\r\n\r\nYou will hear more on OpenEBS 0.5 in the coming days at `KubeCon 2017`, Austin, Texas.\r\n\r\nI will be at the OpenEBS booths with my team and look forward to catching up with some of you in person.\r\n","slug":"openebs-05-enables-storage-policies-for-kubernetes-persistent-volumes"},{"id":76,"title":"Storage Policies — It’s different this time\r","author":"Amit Kumar Das\r","author_info":"Engineer the DAO\r","date":"29-11-2017\r","tags":["Container"," DevOps"," Kubernetes"," Storage Policy"," Updates"],"excerpt":"One of the most common disbelief at the operator’s end would be the reports of an application’s (that consumed this storage) sudden death after introducing a much awaited shiny new storage feature.\r","content":"\r\n\r\n### Need for Storage Policy\r\n\r\nOne of the most common disbelief at the operator’s end would be the reports of an application’s (*that consumed this storage*) sudden death after introducing a much awaited shiny new storage feature. To make things worse the same surprise would be reciprocated from the storage provider as well. Neither the operator nor the storage fellow have any clues to this sudden strangeness.\r\n\r\nHaving gone through many such cycles of frustrations building storage features that satisfy the needs of every operator as well does not break stuff that are outside its control; I knew there was clearly a gap in storage design that needs to be talked about openly and bridged. In this article, I present storage policy as the solution to this pressing problem.\r\n\r\nThe moment I think about conceptualizing storage policy, my mind tries to battle against many odds. *Is this not what everyone (*read storage vendors*) has accomplished?*\r\n\r\n**Think again!!!** The chances are, it works for specific storage **“A”** and needs a radically different approach for the other storage **“B”**; assuming both of these provide the infrastructure for the operator’s storage needs. So the operator goes ahead and does some plumbings if lucky enough to get these infrastructures as white-box components. *At the end of the day, the operator is ready with a new bespoke program and feels so lucky*. Whatsoever, this does not last long due to the very behaviour of infra components. *This operator needs to be ready all the time for the next upgrade to above crafted program, **since little can be expected from the monolith storage fellas*. *Poor operator is left to fend for self, building all possible defence mechanisms*.\r\n\r\nGetting back to the need for a storage policy; *what is the edge in this incarnation of storage policy then*? Well, it is all about capitalising the essential features that being native to cloud and being operated from within a container provides *(I can only hope and pray for those storage controllers who cannot operate from the cloud(s) or can not be run from within the container(s))*.\r\n\r\nHaving said that, there is no innate need to design storage policy that is drastically different just to prove its greatness. Instead, there is a need to design, build, and apply policies that are agnostic to a storage implementation and is conducive to storage operations that are never ever meant to be interrupted.\r\n\r\n1. A Storage Policy should be simple to setup on Day 0\r\n2. It should be simple to expect the obvious on Day 1\r\n3. It should be simple enough to build an update whenever desired.\r\n\r\n### Is it that simple?\r\n\r\nAll this time, I have been describing the storage policy and its operations as simple. *Well, they can be described as simple, but not easy*. What was your feeling when you created one last time? *Have you ever felt creating a storage snapshot policy is easy?* How about a policy that does periodic restore\r\nof some randomly picked snapshots and marks them as *PASSED* or *FAILED* after verifying its data integrity. How did that failure alert you? Was it a slack notification? To make it further interesting, can you think of a snapshot policy that hooks into its consuming application’s life cycle events before trying out the snapshot (*Yes!!! I am suggesting those ‘freeze’ and ‘thaw’ exploits before and after a snapshot*).\r\n\r\n**Policies can be described as simple, but not easy.**\r\n\r\nRemember, these are not the only policies that can be thought of with respect to storage (*we have not even scratched the storage surface*). While all of these are achievable in a cloud and container native way, they may not be termed as easy.\r\n\r\nApplying storage policies is like a dangerous yet interesting sport. Like rock climbing, building a suitable policy can be learnt and then adapted based on the needs, workloads, environment, and so on. However, these policies if applied incorrectly can create a ripple-effect that can lead to increased costs and SLA misses which in turn leads to more support personnel on duty, and so on. As we read further, this new design of storage policies helps in eliminating the aforementioned impacts.\r\n\r\n### Bring your own YAML\r\n\r\nDid I just say YAML? Yes, I did and I shall explain it in a moment. Let us first explore the possible design angles of a storage policy. *Will it not be great to design a policy that fits well within an enterprise’s existing processes, its employees, its culture, its tools?* Is this too much to ask for?\r\n\r\nNo!!! *These are no more a set of good to have features but a must have checklist.* I believe expressing storage policy intents as YAMLs can pass all possible checks in an enterprise’s checklist. These current generation declarative intents are now fluent enough to be understood by APIs. In addition, one of YAML’s greatest strengths is its ability to abstract the entire logic that most of us understand as programmable code. This code now becomes truly yours since you have full control of these YAMLs. In other words, it is the operators who have the controlling rights.\r\n\r\nTo reiterate, there are few but really solid facts that makes this approach towards policy design a much better one than that of all its predecessors.\r\n\r\n***Here are my bets that makes this design different:***\r\n\r\n***Fact #1*** — To put things into perspective, the unassuming reader needs to look at the storage policies along with the current trends in cloud infrastructure as well as the trends in container engine. The cloud has of late become seamless. Thanks to Kubernetes which has been continuously bridging the impedance mismatch between different cloud providers. In addition, the communities involved in Container Storage Initiative, Container Runtime Interface, etc. are making intents as first class citizens. These declarative code pieces are thought of in a bottoms-up approach in each of these implementations which are then placed together coherently by the likes of Kubernetes. Now this is what is definitely more effective than just a tool that parses YAML and runs in isolation.\r\n\r\n***Fact #2*** — These intents are precise and parsed with appropriate validation checks to state with decisive control on the exact outcome. In other words they control the actual execution logic in addition to accepting input values via its declarative specifications. This grounds-up approach coupled with the nativity towards cloud as well as container engine is more suited to design storage policies that align with modern day DevOps’ practices.\r\n\r\n***Fact #3*** — Let us not forget the containers and the critical role they play in this age of cloud and orchestrators. Perhaps containers have become so ubiquitous and hence are easy to miss. I truly feel there are umpteen number of cool things that are yet to be discovered when we run a storage controller inside a container.\r\n\r\n**Fact #4** — All these also mean the intents that were once the sole prerogative of humans can now be built and operated by machines as well. This too with the same ease that the humans used to enjoy. After all, the ingredients *(#1, #2 and #3)* to make this possibility are all in place. This has come of age and is really an advancement in my opinion.\r\n\r\n***Bringing your own YAML really means setting your own policies and having complete control over their execution as well.***\r\n\r\n### Use the tool(s) you always loved\r\n\r\nA policy alone cannot justify its existence unless it is complimented with simple tools and automated processes. The careful reader might have already guessed it. Yes, I am talking of aligning storage policies with DevOps to realize its full potential.\r\n\r\n*Making storage policies more visible, more obvious, and enabling them to the enterprise’s established processes will make them simple to be believed and instil the faith to operate*. *Once again, there is a learning involved but the curve is not steep*.\r\n\r\nThese policies should offer the finest levels of control to the operators’ tools, their bots, and of course operators themselves when such a need arises. *For example finer granularity is craved for during rollbacks, automated downgrades, or blue-green deployments which are not uncommon in the world of storage infrastructures.*\r\n\r\nTo complete the DevOps cycle, these policies which can be handcrafted or system-generated can be submitted to the approver(s) (*which again can be a combination of humans as well as their loved tools*) as Pull Requests before being installed and applied against the storage.\r\n\r\n### Storage was the proverbial “Missing Cog”\r\n\r\nWe are seeing users finally achieving what many have dreamt of for so long  —  ***storage****(and the rest of the infrastructure)* truly being driven by the needs of the application and in a way that remains understandable and for a variety of reasons *(take infra as code for example)* trusted by humans. And now increasingly we see the recognition that containerised storage itself is another important ingredient.\r\n\r\nThanks to [OpenEBS](http://openebs.io) and more broadly containerised storage. *For the first time, every team and workload can have its **own fully functional storage controller**, with capabilities that have always been required by enterprise storage systems and that are still useful in taking care of *stateful workloads*. Our users do not want to give up the tools they used for the care and feeding of MySQL for example just because it now runs in a container. *This is possible by enabling capabilities like snapshots, versioning, encryption, and more **as knobs** to be able to be turned on/off for each workload.*\r\n\r\nThis incarnation of storage policies make it easy for many procedures for these workloads to be recorded as YAML; *the run book is truly code and so can easily be shared, versioned, and executed without humans having to play a role in the ugly details of managing storage system **A** or **B** or even **C**. Storage fades into the background. Time is ripe for the operators to rule.*\r\n","slug":"storage-policies-its-different-this-time"},{"id":77,"title":"How to deploy a Cassandra Cluster/Ring on Kubernetes + OpenEBS\r","author":"Murat Karslioglu\r","author_info":"VP @OpenEBS & @MayaData_Inc. Lives to innovate! Opinions my own!\r","date":"25-11-2017\r","tags":["Cassandra"," Kubernetes"," NoSQL"," Solutions"],"excerpt":"Apache Cassandra is a distributed key-value store intended to run in a data center and also across multiple data centers. Initially it was designed as Facebook as an infrastructure for their messaging platform.\r","content":"\r\n\r\nApache  Cassandra is a **distributed key-value store** intended to run in a data center and also across multiple data centers. Initially, it was designed as Facebook as an infrastructure for their messaging platform. Later it is open sourced, and today it’s one of the most active Apache projects.\r\nIf you are using eBay, Twitter, Spotify, or Netflix you are consuming data provided by Cassandra. For example, Netflix uses Cassandra to keep track of your current place in a streaming video, as well as movie ratings, bookmarks, and user history of 90+ million users.\r\nAmazing to see how much of this technology we consume in our day-to-day life. The feature that allowed me and my wife to start watching Stranger Things on our long trip on a tablet and continued on TV was depending on Cassandra. To give you an idea of its size, according to a [recent presentation](https://www.youtube.com/watch?v=2l0_onmQsPI), Cassandra serving Netflix has 250+ Clusters, 10,000+ Nodes, and 3+ PB of data.\r\nIn summary, Cassandra solves the problem of mapping the key-value pair to a server/node, in our case to a container. This mapping is called the **partitioner**. There are two common placement strategies used by Cassandra: **SimpleStrategy** or **NetworkTopologyStrategy**. SimpleStrategy uses partitioner Murmur3Partitioner by default. Both **Murmur3Partitioner** and **RandomPartitioner** partitioners uniformly distribute data to nodes across the cluster. Read and write requests to the cluster are evenly distributed while using these partitioners. Load balancing is simplified as each part of the hash range receives an equal number of rows on average. **Byte-Order Partitioner **is not recommended other than key range queries.\r\n\r\nFor development work, the SimpleStrategy class is acceptable. For production work, the NetworkTopologyStrategy class must be set. In production, you will end up with multiple rings using mostly NetworkTopology placement which is by itself extremely complex to plan.\r\nIf you want to learn the architecture of Cassandra, the University of Illinois has a great course on [Cloud Computing Concepts](https://www.coursera.org/learn/cloud-computing/home/welcome) and [Key-Value Stores](https://www.coursera.org/learn/cloud-computing/home/week/4) which covers internals of Cassandra. You can also find more about custom SeedProvider and Snitches [here](https://github.com/kubernetes/kubernetes/issues/24286).\r\nCassandra doesn’t like shared storage, therefore use of NFS or GlusterFS not recommended for Cassandra rings. It’s also recommended to use SSD or NVMe, since it’s essential to have low latency random reads and good sequential writes at the same time. These kinds of requirements can be only satisfied with OpenEBS like local and persistent storage solutions.\r\nTo achieve the best fault tolerance with Cassandra, you need to have an excellent understanding of the [**snitch**](http://cassandra.apache.org/doc/latest/operating/snitch.html)and placement strategies. There is a big debate on whether if Cassandra or the storage should handle the placement of data. My suggestion would be to have a balanced approach and have both. OpenEBS can help you to place your persistent volumes across the datacenter, multiple cloud vendors, and fault domains against Cassandra replica failures. First, you can **avoid rebalancing** your cluster in case of a datacenter failure. Second, in case of node failures in a rack, you can bring up the same node from a snapshot and **minimize the time needed to rebalance**.\r\n\r\nI will use Cassandra custom Kubernetes SeedProvider that allows discovery within Kubernetes clusters as they join the cluster and deploy using `gcr.io/google-samples/cassandra:v11` image from Google’s container registry.\r\n\r\nLet’s deploy our first three replica Cassandra cluster on our existing AWS K8s cluster with OpenEBS. If you are using on local minikube or datacenter, you can keep the default **SimpleStrategy** and **Murmur3Partitioner** in `cassandra.yaml` file.\r\n\r\n#### **Prerequisites**\r\n\r\n**Software**\r\n\r\n- [Docker ](https://docs.docker.com/engine/installation/)installed\r\n- Kubernetes 1.8.3+ RBAC enabled cluster\r\n- [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/) installed\r\n- [OpenEBS](https://github.com/openebs/openebs) installed\r\n- Cassandra 3.x\r\n\r\n**Cloud Provider**\r\n\r\n- [Amazon Web Services (AWS)](https://aws.amazon.com/) account\r\n\r\n#### **Deploy Cassandra Stateful with Persistent Storage in one Region**\r\n\r\nOnce you have OpenEBS storage classes created on your K8s cluster, you can use the following steps to launch a Cassandra service with any number of nodes you like.\r\n\r\nBy using environment variables, you can change values that are inserted into `cassandra.yaml`. Default **endpoint_snitch** is set to SimpleSnitch. I will change the Snitch to Ec2Snitch and also increase the replicas from 3 to 4 later.\r\n\r\nBefore getting started, check the status of the cluster using the following command.\r\n\r\n    kubectl get nodes\r\n\r\nOn my setup, I have one master and four worker nodes on AWS in the same US West (Oregon) region and availability zone (us-west-2a).\r\n\r\n    ubuntu@ip-172–23–1–236:~$ kubectl get nodes\r\n     NAME STATUS ROLES AGE VERSION\r\n     ip-172–23–1–225.us-west-2.compute.internal Ready <none> 21h v1.8.3\r\n     ip-172–23–1–236.us-west-2.compute.internal Ready master 21h v1.8.3\r\n     ip-172–23–1–32.us-west-2.compute.internal Ready <none> 21h v1.8.3\r\n     ip-172–23–1–35.us-west-2.compute.internal Ready <none> 21h v1.8.3\r\n     ip-172–23–1–46.us-west-2.compute.internal Ready <none> 21h v1.8.3\r\n\r\nDownload OpenEBS GitHub repo to your host, where sample YAML files are stored.\r\n\r\n    git clone [https://github.com/openebs/openebs.git](https://github.com/openebs/openebs.git)\r\n\r\nFirst list predefined OpenEBS storage classes available to you.\r\n\r\n    ubuntu@ip-172–23–1–236:~/openebs/k8s/demo/cassandra$ kubectl get storageclasses\r\n    NAME PROVISIONER\r\n    default kubernetes.io/aws-ebs\r\n    etcd-backup-gce-pd kubernetes.io/gce-pd\r\n    gp2 (default) kubernetes.io/aws-ebs\r\n    openebs-cassandra openebs.io/provisioner-iscsi\r\n    openebs-es-data-sc openebs.io/provisioner-iscsi\r\n    openebs-jupyter openebs.io/provisioner-iscsi\r\n    openebs-kafka openebs.io/provisioner-iscsi\r\n    openebs-mongodb openebs.io/provisioner-iscsi\r\n    openebs-percona openebs.io/provisioner-iscsi\r\n    openebs-redis openebs.io/provisioner-iscsi\r\n    openebs-standalone openebs.io/provisioner-iscsi\r\n    openebs-standard openebs.io/provisioner-iscsi\r\n    openebs-zk openebs.io/provisioner-iscsi\r\n\r\nGo to `openebs/k8s/demo/cassandra/` folder and edit `cassandra-statefulset.yaml` file.\r\n\r\n    vi cassandra-statefulset.yaml\r\n\r\nThis file should look like below. You can edit and specify number of replicas preferred and your own OpenEBS storage class before applying.\r\n\r\n    apiVersion: apps/v1beta1\r\n     kind: StatefulSet\r\n     metadata:\r\n     name: cassandra\r\n     labels:\r\n     app: cassandra\r\n     spec:\r\n     serviceName: cassandra\r\n     replicas: 3\r\n     selector:\r\n     matchLabels:\r\n     app: cassandra\r\n     template:\r\n     metadata:\r\n     labels:\r\n     app: cassandra\r\n     spec:\r\n     containers:\r\n     — name: cassandra\r\n     image: gcr.io/google-samples/cassandra:v11\r\n     imagePullPolicy: Always\r\n     ports:\r\n     — containerPort: 7000\r\n     name: intra-node\r\n     — containerPort: 7001\r\n     name: tls-intra-node\r\n     — containerPort: 7199\r\n     name: jmx\r\n     — containerPort: 9042\r\n     name: cql\r\n     resources:\r\n     limits:\r\n     cpu: “500m”\r\n     memory: 1Gi\r\n     requests:\r\n     cpu: “500m”\r\n     memory: 1Gi\r\n     securityContext:\r\n     capabilities:\r\n     add:\r\n     — IPC_LOCK\r\n     lifecycle:\r\n     preStop:\r\n     exec:\r\n     command: [“/bin/sh”, “-c”, “PID=$(pidof java) && kill $PID && while ps -p $PID > /dev/null; do sleep 1; done”]\r\n     env:\r\n     — name: MAX_HEAP_SIZE\r\n     value: 512M\r\n     — name: HEAP_NEWSIZE\r\n     value: 100M\r\n     — name: CASSANDRA_SEEDS\r\n     value: “cassandra-0.cassandra.default.svc.cluster.local”\r\n     — name: CASSANDRA_CLUSTER_NAME\r\n     value: “K8Demo”\r\n     — name: CASSANDRA_DC\r\n     value: “DC1-K8Demo”\r\n     — name: CASSANDRA_RACK\r\n     value: “Rack1-K8Demo”\r\n     — name: CASSANDRA_AUTO_BOOTSTRAP\r\n     value: “false”\r\n     — name: POD_IP\r\n     valueFrom:\r\n     fieldRef:\r\n     fieldPath: status.podIP\r\n     readinessProbe:\r\n     exec:\r\n     command:\r\n     — /bin/bash\r\n     — -c\r\n     — /ready-probe.sh\r\n     initialDelaySeconds: 15\r\n     timeoutSeconds: 5\r\n     # These volume mounts are persistent. They are like inline claims,\r\n     # but not exactly because the names need to match exactly one of\r\n     # the stateful pod volumes.\r\n     volumeMounts:\r\n     — name: cassandra-data\r\n     mountPath: /cassandra_data\r\n     volumeClaimTemplates:\r\n     — metadata:\r\n     name: cassandra-data\r\n     annotations:\r\n     volume.beta.kubernetes.io/storage-class: openebs-cassandra\r\n     spec:\r\n     accessModes: [ “ReadWriteOnce” ]\r\n     resources:\r\n     requests:\r\n     storage: 5G\r\n\r\nNote: There are few parameters you may want to modify.\r\n\r\n`apiVersion: apps/v1beta2` API group and version is introduced 1.8 release.\r\n\r\n`replicas: 3`, I’m starting with 3 replicas and will increase later.\r\n\r\n`image: gcr.io/google-samples/cassandra:v12` is the latest image available at the time I've tested.\r\n\r\n`volume.beta.kubernetes.io/storage-class: openebs-cassandra` I’m using a predefined OpenEBS storage class. You can modify it separately.\r\n\r\n#### Create a Cassandra Headless Service\r\n\r\nTo be able to have a simple discovery of the Cassandra seed node we need to create a “headless” service. If you view the `cassandra-service.yaml`file, you will notice that `clusterIP` is set to None. This will allow us to use KubeDNS for the Pods to discover the IP address of the Cassandra seed.\r\n\r\n    ubuntu@ip-172–23–1–236:~/openebs/k8s/demo/cassandra$ cat cassandra-service.yaml\r\n     apiVersion: v1\r\n     kind: Service\r\n     metadata:\r\n     labels:\r\n     app: cassandra\r\n     name: cassandra\r\n     spec:\r\n     clusterIP: None\r\n     ports:\r\n     — port: 9042\r\n     selector:\r\n     app: cassandra\r\n\r\nNow apply `cassandra-service.yaml` file to create headless service.\r\n\r\n    ubuntu@ip-172–23–1–236:~/openebs/k8s/demo/cassandra$ kubectl apply -f cassandra-service.yaml\r\n     service “cassandra” created\r\n\r\n#### Create a Cassandra StatefulSet\r\n\r\nMost applications deployed on Kubernetes should be **cloud-native** and rely on external resources for their data and state. However, stateful application and databases like Cassandra require stateful sets and persistent volumes to ensure resiliency. In this case, OpenEBS will provide us our persistent volume.\r\n\r\nThe StatefulSet is responsible for creating the Pods. Run the following command to start our Cassandra replicas.\r\n\r\n    ubuntu@ip-172–23–1–236:~/openebs/k8s/demo/cassandra$ kubectl apply -f cassandra-statefulset.yaml\r\n     statefulset “cassandra” created\r\n\r\n#### Validate the StatefulSet\r\n\r\nCheck if your StatefulSet has deployed using the command below. Time may take around 4–5 minutes to complete.\r\n\r\n    ubuntu@ip-172–23–1–236:~/openebs/k8s/demo/cassandra$ kubectl get statefulsets\r\n     NAME DESIRED CURRENT AGE\r\n     cassandra 3 3 5m\r\n\r\nIf you don’t see all 3 replicas ready, you can check status of pods to watch progress. For example, I ran `kubectl get pods` after 2 minutes below. First node was ready and second was still creating. All three pods were ready after around 5 minutes.\r\n\r\n    ubuntu@ip-172–23–1–236:~/openebs/k8s/demo/cassandra$ kubectl get pods\r\n     NAME READY STATUS RESTARTS AGE\r\n     cassandra-0 1/1 Running 0 2m\r\n     cassandra-1 0/1 ContainerCreating 0 12s\r\n     maya-apiserver-5994b58bbb-ss7mr 1/1 Running 0 13m\r\n     openebs-provisioner-6f45dcf459-hqldl 1/1 Running 0 13m\r\n     pvc-13a2ebce-d226–11e7–955b-062af127ae24-ctrl-9c7dcdcfc-bgmrp 1/1 Running 0 12s\r\n     pvc-13a2ebce-d226–11e7–955b-062af127ae24-rep-78bf89ff99–572j8 0/1 ContainerCreating 0 12s\r\n     pvc-13a2ebce-d226–11e7–955b-062af127ae24-rep-78bf89ff99–66qtf 1/1 Running 0 12s\r\n     pvc-d13bf437-d225–11e7–955b-062af127ae24-ctrl-584956b667-n88mv 1/1 Running 0 2m\r\n     pvc-d13bf437-d225–11e7–955b-062af127ae24-rep-74d4cf4b84–5m8nz 1/1 Running 0 2m\r\n     pvc-d13bf437-d225–11e7–955b-062af127ae24-rep-74d4cf4b84-c4t9c 1/1 Running 0\r\n\r\nVerify that all the OpenEBS persistent volumes are created, the Cassandra headless service and replicas are running.\r\n\r\n    ubuntu@ip-172–23–1–236:~/openebs/k8s/demo/cassandra$ kubectl get pods -o wide\r\n     NAME READY STATUS RESTARTS AGE IP NODE\r\n     cassandra-0 1/1 Running 0 6m 10.2.2.4 ip-172–23–1–32.us-west-2.compute.internal\r\n     cassandra-1 1/1 Running 0 4m 10.2.4.6 ip-172–23–1–46.us-west-2.compute.internal\r\n     cassandra-2 1/1 Running 0 2m 10.2.1.6 ip-172–23–1–35.us-west-2.compute.internal\r\n     maya-apiserver-5994b58bbb-ss7mr 1/1 Running 0 17m 10.2.4.3 ip-172–23–1–46.us-west-2.compute.internal\r\n     openebs-provisioner-6f45dcf459-hqldl 1/1 Running 0 17m 10.2.3.2 ip-172–23–1–225.us-west-2.compute.internal\r\n     pvc-13a2ebce-d226–11e7–955b-062af127ae24-ctrl-9c7dcdcfc-bgmrp 1/1 Running 0 4m 10.2.3.4 ip-172–23–1–225.us-west-2.compute.internal\r\n     pvc-13a2ebce-d226–11e7–955b-062af127ae24-rep-78bf89ff99–572j8 1/1 Running 0 4m 10.2.4.5 ip-172–23–1–46.us-west-2.compute.internal\r\n     pvc-13a2ebce-d226–11e7–955b-062af127ae24-rep-78bf89ff99–66qtf 1/1 Running 0 4m 10.2.3.5 ip-172–23–1–225.us-west-2.compute.internal\r\n     pvc-5383da78-d226–11e7–955b-062af127ae24-ctrl-9c4bfcd6–4ss2r 1/1 Running 0 2m 10.2.1.4 ip-172–23–1–35.us-west-2.compute.internal\r\n     pvc-5383da78-d226–11e7–955b-062af127ae24-rep-5bbbd9ff45–7tss8 1/1 Running 0 2m 10.2.3.6 ip-172–23–1–225.us-west-2.compute.internal\r\n     pvc-5383da78-d226–11e7–955b-062af127ae24-rep-5bbbd9ff45-vfkrn 1/1 Running 0 2m 10.2.1.5 ip-172–23–1–35.us-west-2.compute.internal\r\n     pvc-d13bf437-d225–11e7–955b-062af127ae24-ctrl-584956b667-n88mv 1/1 Running 0 6m 10.2.1.3 ip-172–23–1–35.us-west-2.compute.internal\r\n     pvc-d13bf437-d225–11e7–955b-062af127ae24-rep-74d4cf4b84–5m8nz 1/1 Running 0 6m 10.2.3.3 ip-172–23–1–225.us-west-2.compute.internal\r\n     pvc-d13bf437-d225–11e7–955b-062af127ae24-rep-74d4cf4b84-c4t9c 1/1 Running 0 6m 10.2.4.4 ip-172–23–1–46.us-west-2.compute.internal\r\n\r\nOn the list of the Pods above, you see 3 Pods running. Your Pod names should be cassandra-0, cassandra-1, cassandra-2 and the next pods would follow the ordinal number (cassandra-3, cassandra-4,...). Use this command to view the Pods created by the StatefulSet:\r\n\r\n    ubuntu@ip-172–23–1–236:~/openebs/k8s/demo/cassandra$ kubectl get svc\r\n     NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE\r\n     cassandra ClusterIP None <none> 9042/TCP 7m\r\n     kubernetes ClusterIP 10.3.0.1 <none> 443/TCP 22h\r\n     maya-apiserver-service ClusterIP 10.3.0.204 <none> 5656/TCP 18m\r\n     pvc-13a2ebce-d226–11e7–955b-062af127ae24-ctrl-svc ClusterIP 10.3.0.188 <none> 3260/TCP,9501/TCP 5m\r\n     pvc-5383da78-d226–11e7–955b-062af127ae24-ctrl-svc ClusterIP 10.3.0.23 <none> 3260/TCP,9501/TCP 3m\r\n     pvc-d13bf437-d225–11e7–955b-062af127ae24-ctrl-svc ClusterIP 10.3.0.187 <none> 3260/TCP,9501/TCP 7m\r\n\r\n#### Verifying Successful Cassandra Deployment\r\n\r\nCheck if the Cassandra nodes are up, perform a **`nodetool status`** on cassandra-0 node :\r\n\r\n    ubuntu@ip-172–23–1–236:~/openebs/k8s/demo/cassandra$ kubectl exec -ti cassandra-0 — nodetool status\r\n     Datacenter: DC1-K8Demo\r\n     ======================\r\n     Status=Up/Down\r\n     |/ State=Normal/Leaving/Joining/Moving\r\n     — Address Load Tokens Owns (effective) Host ID Rack\r\n     UN 10.2.4.6 83.17 KiB 32 75.6% 3c93c7b7–61a7–4cf1-a407-cb47b1de0763 Rack1-K8Demo\r\n     UN 10.2.1.6 65.65 KiB 32 59.5% 552569fe-c6df-4edb-a553–9efdcf682fb3 Rack1-K8Demo\r\n     UN 10.2.2.4 83.12 KiB 32 64.9% 92060271-d8cd-48be-a489-c830a8553462 Rack1-K8Demo\r\n\r\nUN means node is **up** and in **normal** state. You will also notice that each node has 32 tokens. This is the default value, in production workloads, a good default value for this is 256. See more information [here](http://docs.datastax.com/en/archived/cassandra/2.0/cassandra/architecture/architectureDataDistributeVnodesUsing_c.html).\r\n\r\nThe **Owns** column suggests the data distribution percentage for the content placed into the Cassandra keyspaces.\r\n\r\n#### Create a Test Keyspace with Tables\r\n\r\nIdentify the IP Address of any of the Cassandra replicas, for example, Cassandra-0. This is available from the output of the `nodetool status` command executed above (10.2.4.6, 10.2.1.6, 10.2.2.4).\r\n\r\n**Cqlsh** is a Python-based utility that enables you to execute Cassandra Query Language (CQL). **CQL** is a declarative language that allows users to query Cassandra using semantics similar to SQL.\r\n\r\nInstall the python-minimal and python-pip apt packages and perform a pip install of Csqlsh using the following commands.\r\n\r\n    sudo apt-get install -y python-minimal python-pip\r\n     pip install cqlsh\r\n\r\nLogin to the CQL shell using the Cqlsh utility using the following command.\r\n\r\n    ubuntu@ip-172–23–1–236:~/openebs/k8s/demo/cassandra$ cqlsh 10.2.4.6 9042 — cqlversion=”3.4.2\"\r\n     Connected to K8Demo at 10.2.4.6:9042.\r\n     [cqlsh 5.0.1 | Cassandra 3.9 | CQL spec 3.4.2 | Native protocol v4]\r\n     Use HELP for help.\r\n     cqlsh>\r\n\r\nAs I mentioned earlier, you have two placement options while creating a keyspace. You can either use SimpleStrategy or NetworkTopologyStrategy.\r\n\r\nYou can create a keyspace using SimpleStrategy with replication factor 2 by running the following commands.\r\n\r\n    cqlsh> create keyspace ssks with replication = { ‘class’ : ‘SimpleStrategy’ , ‘replication_factor’ : 2 };\r\n\r\nI will create a keyspace using NetworkTopologyStrategy by running the following commands.\r\n\r\n    cqlsh> create keyspace ntsks with replication = { ‘class’ : NetworkTopologyStrategy’, ‘DC1-K8Demo’ : 1 };\r\n\r\n    cqlsh> describe keyspaces;\r\n\r\n    ntsks system_schema system_auth system system_distributed system_traces\r\n\r\nTo use NetworkTopologyStrategy with data centers in a production environment, you need to change the default snitch, **SimpleSnitch** to a network-aware **Ec2Snitch**. You need to define one or more data center names in the snitch properties file, and use those data center names to define the keyspace; otherwise, Cassandra will fail to find a node. You can find the instructions to change the default Snitch [here](https://docs.datastax.com/en/cassandra/2.1/cassandra/operations/ops_switch_snitch.html).\r\n\r\nCreate a table with test content and view the data using the following commands.\r\n\r\n    cqlsh> use ntsks;\r\n\r\n    cqlsh:ntsks> create table inventory (id uuid,Username text,Email text,Age int,PRIMARY KEY ((id), Username));\r\n\r\n    cqlsh:ntsks> insert into inventory (id, Username, Email, Age) values (1234b130-ae79–11e4-ab27–0700500c9a24, ‘Murat’, ‘murat@cloudbyte.com’, 40);\r\n\r\n    cqlsh:ntsks> select * from inventory;\r\n\r\n    id | username | age | email\r\n     — — — — — — — — — — — — — — — — — — — + — — — — — + — — -+ — — — — — — — — — — -\r\n     1234b130-ae79–11e4-ab27–0700500c9a24 | Murat | 37 | murat@cloudbyte.com\r\n\r\n    (1 rows)\r\n\r\nFlush the data to ensure it is written to a disk from the memtable (memory) using the following command.\r\n\r\n    kubectl exec cassandra-0 — nodetool flush ntsks\r\n\r\n#### Delete the Test Keyspace\r\n\r\nVerify the masterless nature of Cassandra StatefulSet by deleting the keyspace from another replica, in this example, Cassandra-1.\r\n\r\n    ubuntu@ip-172–23–1–236:~/openebs/k8s/demo/cassandra$ cqlsh 10.2.1.6 9042 — cqlversion=”3.4.2\"\r\n     Connected to K8Demo at 10.2.1.6:9042.\r\n     [cqlsh 5.0.1 | Cassandra 3.9 | CQL spec 3.4.2 | Native protocol v4]\r\n     Use HELP for help.\r\n     cqlsh> use ntsks;\r\n\r\n    cqlsh:ssks> select * from Inventory;\r\n\r\n    id | username | age | email\r\n     — — — — — — — — — — — — — — — — — — — + — — — — — + — — -+ — — — — — — — — — — -\r\n     1234b130-ae79–11e4-ab27–0700500c9a24 | Murat | 37 | murat@cloudbyte.com\r\n\r\n    (1 rows)\r\n\r\n    cqlsh> drop keyspace ntsks;\r\n\r\nVerify that the keyspace is deleted successfully using the following command.\r\n\r\n    cqlsh> describe keyspaces\r\n\r\n    system_traces system_schema system_auth system system_distributed\r\n\r\n#### Scale the StatefulSet\r\n\r\nTo increase or decrease the size of your StatefulSet you can use the scale command:\r\n\r\n    ubuntu@ip-172–23–1–236:~/openebs/k8s/demo/cassandra$ kubectl scale — replicas=4 statefulset/cassandra\r\n     statefulset “cassandra” scaled\r\n\r\nWait a minute or two and check if it worked:\r\n\r\n    $ kubectl get statefulsets\r\n     NAME DESIRED CURRENT AGE\r\n     cassandra 4 4 1h\r\n\r\nIf you watch the Cassandra pods deploy, they should be created sequentially.\r\n\r\nYou can view the list of the Pods again to confirm that your Pods are up and running.\r\n\r\n    ubuntu@ip-172–23–1–236:~/openebs/k8s/demo/cassandra$ kubectl get statefulsets\r\n     NAME DESIRED CURRENT AGE\r\n     cassandra 4 4 1h\r\n     ubuntu@ip-172–23–1–236:~/openebs/k8s/demo/cassandra$ kubectl get pods -o wide\r\n     NAME READY STATUS RESTARTS AGE IP NODE\r\n     cassandra-0 1/1 Running 0 1h 10.2.2.4 ip-172–23–1–32.us-west-2.compute.internal\r\n     cassandra-1 1/1 Running 0 1h 10.2.4.6 ip-172–23–1–46.us-west-2.compute.internal\r\n     cassandra-2 1/1 Running 0 1h 10.2.1.6 ip-172–23–1–35.us-west-2.compute.internal\r\n     cassandra-3 0/1 Running 0 1m 10.2.3.9 ip-172–23–1–225.us-west-2.compute.internal\r\n     maya-apiserver-5994b58bbb-ss7mr 1/1 Running 0 1h 10.2.4.3 ip-172–23–1–46.us-west-2.compute.internal\r\n     openebs-provisioner-6f45dcf459-hqldl 1/1 Running 0 1h 10.2.3.2 ip-172–23–1–225.us-west-2.compute.internal\r\n     pvc-13a2ebce-d226–11e7–955b-062af127ae24-ctrl-9c7dcdcfc-bgmrp 1/1 Running 0 1h 10.2.3.4 ip-172–23–1–225.us-west-2.compute.internal\r\n     pvc-13a2ebce-d226–11e7–955b-062af127ae24-rep-78bf89ff99–572j8 1/1 Running 0 1h 10.2.4.5 ip-172–23–1–46.us-west-2.compute.internal\r\n     pvc-13a2ebce-d226–11e7–955b-062af127ae24-rep-78bf89ff99–66qtf 1/1 Running 0 1h 10.2.3.5 ip-172–23–1–225.us-west-2.compute.internal\r\n     pvc-5383da78-d226–11e7–955b-062af127ae24-ctrl-9c4bfcd6–4ss2r 1/1 Running 0 1h 10.2.1.4 ip-172–23–1–35.us-west-2.compute.internal\r\n     pvc-5383da78-d226–11e7–955b-062af127ae24-rep-5bbbd9ff45–7tss8 1/1 Running 0 1h 10.2.3.6 ip-172–23–1–225.us-west-2.compute.internal\r\n     pvc-5383da78-d226–11e7–955b-062af127ae24-rep-5bbbd9ff45-vfkrn 1/1 Running 0 1h 10.2.1.5 ip-172–23–1–35.us-west-2.compute.internal\r\n     pvc-5c9e5136-d22f-11e7–955b-062af127ae24-ctrl-5b6d99869–7gxv5 1/1 Running 0 1m 10.2.3.7 ip-172–23–1–225.us-west-2.compute.internal\r\n     pvc-5c9e5136-d22f-11e7–955b-062af127ae24-rep-5fc8b95cd-6vfbt 1/1 Running 0 1m 10.2.2.5 ip-172–23–1–32.us-west-2.compute.internal\r\n     pvc-5c9e5136-d22f-11e7–955b-062af127ae24-rep-5fc8b95cd-h22qz 1/1 Running 0 1m 10.2.3.8 ip-172–23–1–225.us-west-2.compute.internal\r\n     pvc-d13bf437-d225–11e7–955b-062af127ae24-ctrl-584956b667-n88mv 1/1 Running 0 1h 10.2.1.3 ip-172–23–1–35.us-west-2.compute.internal\r\n     pvc-d13bf437-d225–11e7–955b-062af127ae24-rep-74d4cf4b84–5m8nz 1/1 Running 0 1h 10.2.3.3 ip-172–23–1–225.us-west-2.compute.internal\r\n     pvc-d13bf437-d225–11e7–955b-062af127ae24-rep-74d4cf4b84-c4t9c 1/1 Running 0 1h 10.2.4.4 ip-172–23–1–46.us-west-2.compute.internal\r\n\r\nYou can perform a `nodetool status` to check if the other Cassandra nodes have joined and formed a Cassandra cluster.\r\n\r\n    $ kubectl exec -ti cassandra-0 — nodetool status\r\n     Datacenter: DC1-K8Demo\r\n     ======================\r\n     Status=Up/Down\r\n     |/ State=Normal/Leaving/Joining/Moving\r\n     — Address Load Tokens Owns (effective) Host ID Rack\r\n     UN 10.2.4.6 174.97 KiB 32 59.7% 3c93c7b7–61a7–4cf1-a407-cb47b1de0763 Rack1-K8Demo\r\n     UN 10.2.1.6 182.32 KiB 32 43.8% 552569fe-c6df-4edb-a553–9efdcf682fb3 Rack1-K8Demo\r\n     UN 10.2.2.4 169.7 KiB 32 42.5% 92060271-d8cd-48be-a489-c830a8553462 Rack1-K8Demo\r\n     UN 10.2.3.9 90.81 KiB 32 54.1% 47e8c9e2-a6d9–4276–88ae-6fe2256ca2af Rack1-K8Demo\r\n\r\nYou will need to wait for the status of the nodes to be Up and Normal (UN) to execute the commands in the next steps.\r\n\r\n#### Troubleshooting\r\n\r\nIf your Cassandra instance is not running properly, you may check the logs using the command below. Replace <your-pod-name> with your pod name. For example, `cassandra-0`:\r\n\r\n    kubectl logs <your-pod-name>\r\n\r\nIf your Cassandra nodes are not joining, delete your controller/statefulset then delete your Cassandra service:\r\n\r\n    kubectl delete statefulset cassandra\r\n\r\nIf you created the Cassandra StatefulSet:\r\n\r\n    kubectl delete svc cassandra\r\n\r\nTo delete everything:\r\n\r\n    kubectl delete statefulset,pvc,pv,svc -l app=cassandra\r\n\r\n---\r\n\r\n*Originally published at [Containerized Me](http://containerized.me/how-to-deploy-a-cassandra-cluster-ring-on-kubernetes-openebs/)*.\r\n","slug":"how-to-deploy-a-cassandra-clusterring-on-kubernetes-openebs"},{"id":78,"title":"How to install OpenEBS on IBM Cloud Private\r","author":"Murat Karslioglu\r","author_info":"VP @OpenEBS & @MayaData_Inc. Lives to innovate! Opinions my own!\r","date":"19-11-2017\r","tags":["Helm Charts"," OpenEBS"," Solutions"," ICP"],"excerpt":"What is IBM Cloud Private? IBM Cloud Private (ICP) is a new application platform that is based on Kubernetes and provides services for developing and managing on-premises containerized applications. \r","content":"\r\n## What is IBM Cloud Private?\r\n\r\n**IBM Cloud Private (ICP)** is a new application platform that is based on **Kubernetes** and provides services for developing and managing **on-premises** containerized applications. ICP Community Edition *(ICP-CE)* is distributed free of charge for non-production use and is available on Docker Hub. For commercial use, you would need the Enterprise package.\r\n\r\nIn my previous blog post, [Introduction to IBM Cloud Private](http://containerized.me/introduction-to-ibm-cloud-private/), I have covered step-by-step installation of ICP 2.1. This time I will focus on configuring **OpenEBS** as a **persistent storage** option and deploying a stateful workload (MongoDB) using OpenEBS storage classes.\r\n\r\n## Prerequisites\r\n\r\n### Hardware\r\n\r\n- Minimum three x64 servers\r\n\r\n### Software\r\n\r\n- [Ubuntu Server 16.04 LTS](https://www.ubuntu.com/download/server)\r\n- IBM Cloud Private 2.1\r\n- [OpenEBS](https://github.com/openebs/openebs)\r\n\r\n### Install IBM Cloud Private\r\n\r\nFollow instructions from [Introduction to IBM Cloud Private](http://containerized.me/introduction-to-ibm-cloud-private/) to deploy a multi-node ICP cluster.\r\n\r\n### Install OpenEBS on ICP\r\n\r\n1. Log in to the ICP console and go to the **Admin/Repositories** menu.\r\n\r\n![OpenEBS on ICP](https://cdn-images-1.medium.com/max/800/0*PPZPNSr9_mW_9AZq.png)\r\n\r\n1. Click **Add repository**.\r\n\r\n![Add repository](https://cdn-images-1.medium.com/max/800/0*ZNaLIkk1gxFLWUJK.png)\r\n\r\n1. Add a chart repository with the following parameters:\r\n — **Name:** openebs-charts\r\n — **URL:** [https://openebs.github.io/charts/](https://openebs.github.io/charts/)\r\n\r\n![Confirm charts](https://cdn-images-1.medium.com/max/800/0*2m2J6V9YhnYk5_Cx.png)\r\n\r\n1. After you click **Add**, confirm that **openebs-charts** is listed under Repositories.\r\n\r\n![Catalog menu](https://cdn-images-1.medium.com/max/800/0*wkPxIB_Q2DevkgWh.png)\r\n\r\n1. Go to the **Catalog** menu, select **openebs** from the list.\r\n\r\n![Configure](https://cdn-images-1.medium.com/max/800/0*7Lt6IE4f_da0jZEB.png)\r\n\r\n1. On OpenEBS chart instructions page, click **Configure**.\r\n2. Configure OpenEBS deployment with the following parameters:\r\n — **Release name:** openebs-<your-release-name> (you need to pick a unique name)\r\n — **Target Namespace:** default (namespace should be the same as your workload)\r\n — **rbacEnable:** true\r\n — **image pullPolicy:** IfNotPresent\r\n — **apiserver image:** openebs/m-apiserver\r\n — **apiserver tag:** 0.4.0\r\n — **provisione image:** openebs/openebs-k8s-provisioner\r\n — **provisioner tag:** 0.4.0\r\n — **jiva image:** openebs/jiva:0.4.0\r\n — **replicas:** 2 (Number of Jiva Volume replicas)\r\n\r\n![Installation](https://cdn-images-1.medium.com/max/800/0*qfLs4pg_3TE1PbCB.png)\r\n\r\n1. Click **Install**. When finished click **View Helm Release.**\r\n\r\n![Storage classes](https://cdn-images-1.medium.com/max/800/0*raLyHiJeZ0hC_BAk.png)\r\n\r\n1. On the Helm Release page, you can see the status of OpenEBS, deployment, and available **Storage Classes**.\r\n\r\n![Deploy stateful application](https://cdn-images-1.medium.com/max/800/0*-gCAd374s2jXY3AP.jpg)\r\n\r\n1. Now, let’s try to deploy a stateful app on OpenEBS.\r\n\r\n### Install MongoDB on OpenEBS\r\n\r\n1. Under **Catalog**, select **ibm-mongodb-dev** and click **Configure**.\r\n2. Configure MongoDB deployment with the following parameters:\r\n — **Release name:** mongodb-<your-release-name> (you need to pick a unique name here)\r\n — **Target Namespace:** default (same as OpenEBS)\r\n — **persistence enabled:** true\r\n — **persistence useDynamicProvisioning:** true\r\n — **dataVolume storageClassName:** openebs-mongodb\r\n — **dataVolume size:** 2G (default is 20Gi, remove “i” — in current version it is not supported)\r\n — **database password:** mongo\r\n Accept the license agreements, keep all the other values as default and click **Install**.\r\n\r\n![Workloads release](https://cdn-images-1.medium.com/max/800/0*UTiLWk3zOy5bw_Wh.png)\r\n\r\n1. Go to **Workloads/Helm Releases** and select your MongoDB release. Under the **PersistentVolumeClaim** table you are going to see the volume claim and OpenEBS storage class.\r\n\r\n![Workloads deployment](https://cdn-images-1.medium.com/max/800/0*PNNp0nDxsZXzYwIH.png)\r\n\r\n1. If you go to the **Workloads/Deployments** page, you can find the storage controller and two volume replicas (as configured) running.\r\n\r\n![Repository](https://cdn-images-1.medium.com/max/800/0*uaEIPO8n2vY0yUet.png)\r\n\r\n1. Confirm that replicas are running on separate nodes. Click on the PVC name ending with **rep** (Example:pvc-23025190-c516–11e7-b45e-e8fd90000064-rep). Scroll down, and you will see that pods are running on separate hosts.\r\n\r\n![Deployment successful](https://cdn-images-1.medium.com/max/800/0*pD7rHAX_D8_cxcfl.png)\r\n\r\nYou have successfully deployed a stateful application on a persistent block storage presented by OpenEBS.\r\n\r\n### How does storage HA work for stateful workloads?\r\n\r\nHigh Availability storage (HA storage) is a storage system that is continuously operational. Redundancy is the key feature of HA storage as it allows data to be kept in more than one place while ensuring data protection and consistency.\r\n\r\nAn **OpenEBS Jiva Volume** is a controller deployed during the OpenEBS installation. Volume replicas are defined by the parameter we set above. The controller is an **iSCSI target** while the replicas play the role of a disk. The controller exposes the iSCSI target while the actual data is written. The controller and each replica run inside a dedicated container.\r\n\r\nAn OpenEBS Jiva Volume controller exists as a single instance, but there can be multiple instances of OpenEBS Jiva volume replicas. Persistent data is synchronized between replicas.\r\n\r\nOpenEBS Jiva Volume HA is based on various scenarios as explained in the following sections.\r\n\r\nNOTE: Each replica is scheduled in a unique K8s node, and a K8s node never has two replicas of one OpenEBS volume.\r\n\r\n### What happens when an OpenEBS volume controller pod crashes?\r\n\r\nKubernetes automatically re-schedules the controller as a new Kubernetes pod.\r\n Policies are in place that ensures faster rescheduling.\r\n\r\n### What happens when a K8s node that hosts OpenEBS volume controller goes offline?\r\n\r\nThe controller is automatically re-scheduled as a new Kubernetes pod.\r\n Policies are in place that ensures faster rescheduling.\r\n If Kubernetes node is unavailable, the controller gets scheduled on one of the available nodes.\r\n\r\n### What happens when an OpenEBS volume replica pod crashes for reasons other than node not-ready and node unreachable?\r\n\r\nThe replica is autoamtically re-scheduled as a new Kubernetes pod.\r\n The replica may or may not be re-scheduled on the same K8s node.\r\n There is data loss with this newly scheduled replica if it gets re-scheduled on a different K8s node.\r\n\r\n### What happens when a K8s node that hosts OpenEBS volume replica goes offline?\r\n\r\nThere is no storage downtime as the other available replica displays inputs/outputs.\r\n Policies are in place that does not allow re-scheduling of crashed replica (as the replica is tied to a node’s resources) to any other node.\r\n\r\n---\r\n\r\n*Originally published at *[*Containerized Me*](http://containerized.me/how-to-install-openebs-on-ibm-cloud-private/)*.*\r\n","slug":"how-to-install-openebs-on-ibm-cloud-private"},{"id":79,"title":"How to deploy Jenkins on Kubernetes + OpenEBS\r","author":"Murat Karslioglu\r","author_info":"VP @OpenEBS & @MayaData_Inc. Lives to innovate! Opinions my own!\r","date":"16-11-2017\r","tags":["Jenkins"," Kubernetes"," Open Source"," Solutions"," OpenEBS"],"excerpt":"Modern development requires Continuous Integration / Continuous Delivery (CI/CD) and it means building and validating your software on every commit to make sure your development & test environments are always up-to-date. \r","content":"\r\nModern development requires [Continuous Integration](https://aws.amazon.com/devops/continuous-integration/) / [Continuous Delivery](https://aws.amazon.com/devops/continuous-delivery/) (**CI/CD**) and it means building and validating your software on every commit to make sure your development & test environments are always up-to-date. This level of automation is a combination of cultural philosophies (aka **DevOps**) and practices. CI/CD increases an organization’s ability to deliver applications and services at high velocity. Jenkins serves as the **workflow engine** to manage this **CI/CD pipeline** from source to delivery.\r\n\r\nDeploying Jenkins on Kubernetes provides the following benefits:\r\n\r\n- Isolates different jobs from one another\r\n- Quickly clean a job’s workspace\r\n- Dynamically deploy or schedule jobs with Kubernetes pods\r\n- Allows increased resource utilization and efficiency\r\n- Dynamically scale up Jenkins slaves on demand\r\n\r\nEspecially, running dynamic slaves in a Kubernetes/Docker environment and automating the scaling of Jenkins slaves running in Kubernetes on top of OpenEBS can **minimize the deployment time and cost**. With OpenEBS, you can build extremely scalable test cycles. You will be able to create instant snapshots (thanks to the [**CoW**](https://en.wikipedia.org/wiki/Copy-on-write)) from the master and **deploy new slaves faster and dynamically on-demand**. This process will eliminate the need to perform container-to-container copies.\r\n\r\nIn Jenkins, slaves are optional. OpenEBS can also help when you have a smaller environment and running a **monolithic master**. In that model, state on the master would be lost when you shut down the Jenkins master service. When using monolithic master on OpenEBS, your volume is persistent and replicated over to n nodes *(defined in your OpenEBS storage class)*. In that case, the master can exit, even if your node fails it can start on other nodes, migrate from private to public cloud, vice-versa when needed and your data will follow you.\r\n\r\nLet’s deploy Jenkins on our existing K8s cluster with OpenEBS. You will notice that it’s not much different than deploying on local storage, except your data will be protected with OpenEBS.\r\n\r\n## Prerequisites\r\n\r\n### Software\r\n\r\n- [Docker](https://docs.docker.com/engine/installation/) installed\r\n- Kubernetes 1.7.3+ RBAC enabled cluster\r\n- [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/) installed\r\n- [OpenEBS](https://github.com/openebs/openebs) installed\r\n\r\n### Cloud Provider\r\n\r\n- [Amazon Web Services (AWS)](https://aws.amazon.com/) account\r\n\r\n## Deploy Jenkins Pod with Persistent Storage\r\n\r\nOnce you have OpenEBS storage classes created on your K8s cluster, you can use the following simple steps to launch Jenkins service with a monolithic master.\r\n\r\nBefore getting started, check the status of the cluster using the following command.\r\n\r\n    kubectl get nodes\r\n\r\nIn my environment, I have one master and two worker nodes.\r\n\r\n    ubuntu@ip-172–23–1–115:~$ kubectl get nodes\r\n    NAME STATUS ROLES AGE VERSION\r\n    ip-172–23–1–115.us-west-2.compute.internal Ready master 2h v1.8.3\r\n    ip-172–23–1–144.us-west-2.compute.internal Ready <none> 2h v1.8.3\r\n    ip-172–23–1–244.us-west-2.compute.internal Ready <none> 2h v1.8.3\r\n\r\nDownload the `Jenkins.yml` file to your host, which has access to kubectl.\r\n\r\n    wget https://raw.githubusercontent.com/openebs/openebs/master/k8s/demo/jenkins/jenkins.yml\r\n\r\nThis file looks like below. You can edit and specify a different OpenEBS storage class before you apply.\r\n\r\n    kind: PersistentVolumeClaim\r\n     apiVersion: v1\r\n     metadata:\r\n     name: jenkins-claim\r\n     annotations:\r\n     volume.beta.kubernetes.io/storage-class: openebs-standard\r\n     spec:\r\n     accessModes:\r\n     — ReadWriteOnce\r\n     resources:\r\n     requests:\r\n     storage: 5G\r\n     — -\r\n     apiVersion: extensions/v1beta1\r\n     kind: Deployment\r\n     metadata:\r\n     name: jenkins\r\n     spec:\r\n     replicas: 1\r\n     template:\r\n     metadata:\r\n     labels:\r\n     app: jenkins-app\r\n     spec:\r\n     securityContext:\r\n     fsGroup: 1000\r\n     containers:\r\n     — name: jenkins\r\n     imagePullPolicy: IfNotPresent\r\n     image: jenkins/jenkins:lts\r\n     ports:\r\n     — containerPort: 8080\r\n     volumeMounts:\r\n     — mountPath: /var/jenkins_home\r\n     name: jenkins-home\r\n     volumes:\r\n     — name: jenkins-home\r\n     persistentVolumeClaim:\r\n     claimName: jenkins-claim\r\n     — -\r\n     apiVersion: v1\r\n     kind: Service\r\n     metadata:\r\n     name: jenkins-svc\r\n     spec:\r\n     ports:\r\n     — port: 80\r\n     targetPort: 8080\r\n     selector:\r\n     app: jenkins-app\r\n     type: NodePort\r\n\r\nNow apply `jenkins.yml` file.\r\n\r\n    kubectl apply -f jenkins.yml\r\n\r\n![results](/images/blog/results.png)\r\n\r\nGet the status of running pods using the following command.\r\n\r\n    kubectl get pods\r\n\r\nResult should like similar to below, and the Jenkins pod running.\r\n\r\n    ubuntu@ip-172–23–1–115:~$ kubectl get pods\r\n     NAME READY STATUS RESTARTS AGE\r\n     jenkins-797b888448-pfx8x 1/1 Running 0 11m\r\n     maya-apiserver-5994b58bbb-ck2tv 1/1 Running 0 2h\r\n     openebs-provisioner-6f45dcf459-qjdlx 1/1 Running 0 2h\r\n     pvc-94586807-cb09–11e7-b125–064dff6dc2a2-ctrl-864fcb6f74–2phfw 1/1 Running 0 11m\r\n     pvc-94586807-cb09–11e7-b125–064dff6dc2a2-rep-575d85d96c-dk4dq 1/1 Running 0 11m\r\n     pvc-94586807-cb09–11e7-b125–064dff6dc2a2-rep-575d85d96c-pzrgn 1/1 Running 0 11m\r\n\r\nAs you noticed, your OpenEBS controller `pvc-…-ctrl-…` and two copies of persistent volumes `pvc-…-rep-…` are also deployed and running.\r\n\r\nGet the status of underlying persistent volumes used by Jenkins deployment using the following command.\r\n\r\n    kubectl get pvc\r\n\r\nExample output below:\r\n\r\n    ubuntu@ip-172–23–1–115:~$ kubectl get pvc\r\n     NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE\r\n     jenkins-claim Bound pvc-94586807-cb09–11e7-b125–064dff6dc2a2 5G RWO openebs-standard 22m\r\n\r\nGet the status of Jenkins service using the following command:\r\n\r\n    kubectl get svc\r\n\r\nExample output below:\r\n\r\n    ubuntu@ip-172–23–1–115:~$ kubectl get svc\r\n    NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE\r\n    jenkins-svc NodePort 10.3.0.17 <none> 80:31705/TCP 25m\r\n    kubernetes ClusterIP 10.3.0.1 <none> 443/TCP 3h\r\n    maya-apiserver-service ClusterIP 10.3.0.34 <none> 5656/TCP 3h\r\n    pvc-94586807-cb09–11e7-b125–064dff6dc2a2-ctrl-svc ClusterIP 10.3.0.100 <none> 3260/TCP,9501/TCP 25m\r\n\r\n### Launching Jenkins\r\n\r\nThe Jenkins deployment YAML file `jenkins.yaml` we have used above creates a NodePort service type to make Jenkins available outside the cluster.\r\n\r\nGet the node IP Address that is running the Jenkins pod using the following command.\r\n\r\nNote: Replace your pod name with your the pod name returned when you ran `kubectl get pods` command.\r\n\r\n    kubectl describe pod jenkins-797b888448-pfx8x | grep Node:\r\n\r\nExample output below:\r\n\r\n    kubectl describe pod jenkins-797b888448-pfx8x | grep Node:\r\n     Node: ip-172–23–1–144.us-west-2.compute.internal/172.23.1.144\r\n\r\nGet the port number from the Jenkins service using the following command:\r\n\r\n    kubectl describe svc jenkins-svc | grep NodePort:\r\n\r\nExample output below:\r\n\r\n    ubuntu@ip-172–23–1–115:~$ kubectl describe svc jenkins-svc | grep NodePort:\r\n     NodePort: <unset> 31705/TCP\r\n\r\nIP above is your private IP on AWS, which can be used if you are accessing through another instance on AWS. To access it remotely, you also need to open that port on E2C instance’s security group.\r\n\r\nGo to the Network & Security -> Security Group settings in the left hand navigation\r\nFind the **Security Group** that your instance is a part of. Click on **Inbound Rules**. Click on **Edit** and **Add Rule** button. Then add HTTP (port 31705). Click **Save**.\r\n\r\nNow, combine your public IP and port number and open that in your browser. In my case, it is [https://34.223.235.50:31705.](https://34.223.235.50:31705.)\r\n\r\nOnce you access the URL the Getting Started page is displayed. Follow the procedure below to setup Jenkins.\r\n\r\nProvide the [cci]initialAdminPassword[/cci] in the Unlock Jenkins screen and copy the password in the [cci]Administrator password[/cci] field. Click **Continue**.\r\n\r\n![unclock jenkins](/images/blog/unlock-jenkins.png)\r\n\r\nGet the password using the following command:\r\n\r\n    kubectl exec -it jenkins-797b888448-pfx8x cat /var/jenkins_home/secrets/initialAdminPassword\r\n\r\nExample output below:\r\n\r\n    ubuntu@ip-172–23–1–115:~$ kubectl exec -it jenkins-797b888448-pfx8x cat /var/jenkins_home/secrets/initialAdminPassword\r\n     5aa044d226d1466eb84621e75e369c64\r\n\r\nOn the **Customize Jenkins** screen click on **Install suggested plugins**.\r\n\r\n![customize jenkins](/images/blog/customize-jenkins.png)\r\n\r\nConfigure the Administrator user in the **Create First Admin User** screen. Fill in the following fields.\r\n\r\n**Username:** — Key in the administrator username.\r\n**Password:** — Key in the password for the administrator.\r\n**Confirm password:** — Key in the password again and confirm.\r\n**Full name:** — Key in the administrator’s full name.\r\n\r\nClick **Continue as admin** if you want to perform further administrator tasks or click **Save and Finish**.\r\n You can now start using Jenkins!\r\n\r\n![jenkins-is-ready](/images/blog/jenkins-is-ready.png)\r\n\r\n\r\n_Originally published at [*Containerized Me*](http://containerized.me/how-to-deploy-jenkins-on-kubernetes-openebs/)_.\r\n","slug":"how-to-deploy-jenkins-on-kubernetes-openebs"},{"id":80,"title":"How to deploy a PostgreSQL Cluster on Kubernetes + OpenEBS\r","author":"Murat Karslioglu\r","author_info":"VP @OpenEBS & @MayaData_Inc. Lives to innovate! Opinions my own!\r","date":"02-11-2017\r","tags":["Crunchy"," Kubectl"," Solutions"," Kubernetes"," OpenEBS"],"excerpt":"Why Postgres on Kubernetes? Well, the answer is in the question. If you are already running Kubernetes on some form of cloud, you understand the ease-of-use, scalability, and monitoring benefits of Kubernetes that you can apply to your database at scale.\r","content":"\r\n## Why Postgres on Kubernetes?\r\n\r\nWell, the answer is in the question. If you are already running Kubernetes on some form of cloud, you understand the **ease-of-use**, **scalability**, and **monitoring** benefits of Kubernetes that you can apply to your database at scale.\r\n\r\nPostgreSQL is the **preferred** relational database for most developers around, although setting up a highly available Postgres cluster from scratch is always a challenge, being **cloud-native** adds a bit to the difficulty.\r\n\r\nThere are many ways to run **high availability** with PostgreSQL; for a list, see the [PostgreSQL Documentation](https://wiki.postgresql.org/wiki/Replication,_Clustering,_and_Connection_Pooling). To be honest, manually setting it up is quite painful, while there are better ways available. My favorite **cloud-native** Postgres cluster deployment projects are [Crunchy Data](https://www.crunchydata.com/)’s, [Sorint.lab](https://www.sorint.it/)’s [Stolon](https://github.com/sorintlab/stolon) and [Zalando](https://jobs.zalando.com/tech/)’s [Patroni](https://github.com/zalando/patroni)/[Spilo](https://github.com/zalando/spilo).\r\n\r\nSince availability requires multi-node Kubernetes deployment instead of local minikube setup, I’ll deploy crunchy-postgres on my existing K8s cluster on AWS with two worker nodes. If you don’t have a Kubernetes cluster yet, see the [instructions to deploy one using StackPointCloud](http://containerized.me/how-to-install-openebs-on-aws-using-stackpointcloud/). Instructions after that are the same in any cloud or on-premises deployment.\r\n\r\n## Prerequisites\r\n\r\n### Software\r\n\r\n- [crunchy-postgres](https://hub.docker.com/r/crunchydata/crunchy-postgres/) (for cluster deployment)\r\n- [Docker](https://docs.docker.com/engine/installation/)installed\r\n- Kubernetes 1.5+ cluster installed\r\n- [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/) installed\r\n- [OpenEBS](https://github.com/openebs/openebs) installed\r\n\r\n### Cloud Provider\r\n\r\n- [Amazon Web Services (AWS)](https://aws.amazon.com/) account\r\n\r\n### Deploy Crunchy PostgreSQL cluster using kubectl\r\n\r\nOnce you have OpenEBS storage classes created on your K8s cluster, you can use the following simple steps to launch a highly available PostgreSQL service with one master and one replica.\r\n\r\nDownload the files to your host, which has access to kubectl\r\n\r\n     cd $HOME\r\n     git clone https://github.com/openebs/openebs.git\r\n     cd openebs/k8s/demo/crunchy-postgres \r\n\r\n### Create the Stateful Set\r\n\r\nThe deployment will use the default images and credentials defined in the set.json file. To set custom users and passwords:\r\n\r\n    vi ~/openebs/k8s/demo/crunchy-postgres/set.json\r\n\r\nJSON file should look like below, feel free to edit the number of replicas, credentials and storage capacity. Default uses the **openebs-standard** storage class, and it is 400M.\r\n\r\n    {\r\n      \"apiVersion\": \"apps/v1beta1\",\r\n      \"kind\": \"StatefulSet\",\r\n      \"metadata\": {\r\n        \"name\": \"pgset\"\r\n      },\r\n      \"spec\": {\r\n        \"serviceName\": \"pgset\",\r\n        \"replicas\": 2,\r\n        \"template\": {\r\n          \"metadata\": {\r\n            \"labels\": {\r\n              \"app\": \"pgset\"\r\n            }\r\n          },\r\n          \"spec\": {\r\n            \"containers\": [\r\n              {\r\n                \"name\": \"pgset\",\r\n                \"image\": \"crunchydata/crunchy-postgres:centos7–9.6–1.4.0\",\r\n                \"ports\": [\r\n                  {\r\n                    \"containerPort\": 5432,\r\n                    \"name\": \"postgres\"\r\n                  }\r\n                ],\r\n                \"env\": [\r\n                  {\r\n                    \"name\": \"PG_MASTER_USER\",\r\n                    \"value\": \"master\"\r\n                  },\r\n                  {\r\n                    \"name\": \"PGHOST\",\r\n                    \"value\": \"/tmp\"\r\n                  },\r\n                  {\r\n                    \"name\": \"PG_MODE\",\r\n                    \"value\": \"master\"\r\n                  },\r\n                  {\r\n                    \"name\": \"PG_MASTER_PASSWORD\",\r\n                    \"value\": \"password\"\r\n                  },\r\n                  {\r\n                    \"name\": \"PG_USER\",\r\n                    \"value\": \"testuser\"\r\n                  },\r\n                  {\r\n                    \"name\": \"PG_PASSWORD\",\r\n                    \"value\": \"password\"\r\n                  },\r\n                  {\r\n                    \"name\": \"PG_DATABASE\",\r\n                    \"value\": \"userdb\"\r\n                  },\r\n                  {\r\n                    \"name\": \"PG_ROOT_PASSWORD\",\r\n                    \"value\": \"password\"\r\n                  }\r\n                ],\r\n                \"volumeMounts\": [\r\n                  {\r\n                    \"name\": \"pgdata\",\r\n                    \"mountPath\": \"/pgdata\",\r\n                    \"readOnly\": false\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        \"volumeClaimTemplates\": [\r\n          {\r\n            \"metadata\": {\r\n              \"name\": \"pgdata\"\r\n            },\r\n            \"spec\": {\r\n              \"accessModes\": [\r\n                \"ReadWriteOnce\"\r\n              ],\r\n              \"storageClassName\": \"openebs-standard\",\r\n              \"resources\": {\r\n                \"requests\": {\r\n                  \"storage\": \"400M\"\r\n                }\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n\r\nSave the file and run the statefulset:\r\n\r\n    ./run.sh\r\n\r\nThe above step will automatically create the OpenEBS volumes required for master and replica postgresql containers and few other Kubernetes objects:\r\n\r\n- Persistent Volumes (pvc-{UID1}, pvc-{UID2})\r\n- Persistent Volume Claim (pgdata-pgset-0, pgdata-pgset-1)\r\n- Replica Sets (pvc-{UID1}-ctrl-{random1},pvc-{UID1}-rep-{random2},pvc-{UID2}-ctrl-{random3},pvc-{UID4}-ctrl-{random4})\r\n- Service Account (pgset-sa)\r\n- Services (pgset, pgset-master, pgset-replica)\r\n- StatefulSet (pgset)\r\n- Pods (pgset-0, pgset-1)\r\n\r\n![GIF displaying OpenEBS volumes required for master and replica postgresql containers and few other Kubernetes objects](https://cdn-images-1.medium.com/max/800/0*_WTDmIAcGNUGL0zn.gif)\r\n\r\nThe volume details can be inspected using the standard kubectl commands. To check **persistent volume claims**:\r\n\r\n    kubectl get pvc\r\n\r\n![Screenshot showing persistent volume claims](https://cdn-images-1.medium.com/max/800/0*Jj59F2CWdQqKOkjW.png)\r\n\r\nCheck **persistent volumes**:\r\n\r\n    kubectl get pv\r\n\r\n![Screenshot showing persistent volumes](https://cdn-images-1.medium.com/max/800/0*cm0u7Ea_12FvQRC4.png)\r\n\r\nList the **services**, and you will see pgset, master and replica created:\r\n\r\n    kubectl get service\r\n\r\n![Listing services](https://cdn-images-1.medium.com/max/800/0*d5PjsFswTOOSBAcq.png)\r\n\r\nList the **statefulsets**, and you will see pgset listed with two desired and current sets:\r\n\r\n![Listing statefulsets](https://cdn-images-1.medium.com/max/800/0*F3eKWl181xp3yKLJ.png)\r\n\r\nIf you use the **Kubernetes Dashboard**, you can see the same under **Workloads > Stateful Sets** and quickly scale up as well.\r\n\r\n![Kubernetes Dashboard](https://cdn-images-1.medium.com/max/800/0*fQO6h-cj00rbePIi.png)\r\n\r\n### Test your Database\r\n\r\nIf it is not installed previously, install psql client:\r\n\r\n    sudo apt-get install postgresql-client\r\n\r\nTest the master as follows (default password is “password”, unless you changed it):\r\n\r\n    psql -h pgset-master -U testuser password -c ‘table pg_stat_replication’\r\n\r\nAbove command should return output indicating that a single replica is connecting to the master.\r\n\r\nNow, test the replica as follows:\r\n\r\n    psql -h pgset-replica -U testuser password -c ‘create table foo (id int)’\r\n\r\nThis command should fail as the replica is read-only within a PostgreSQL cluster.\r\n\r\n---\r\n\r\n*Originally published at [Containerized Me](http://containerized.me/how-to-deploy-a-postgresql-cluster-on-kubernetes-openebs/)*.\r\n","slug":"how-to-deploy-a-postgresql-cluster-on-kubernetes-openebs"},{"id":81,"title":"How to Install OpenEBS on AWS using StackPointCloud?\r","author":"Murat Karslioglu\r","author_info":"VP @OpenEBS & @MayaData_Inc. Lives to innovate! Opinions my own!\r","date":"23-10-2017\r","tags":["Kubernetes"," Solutions"," StackPointCloud"," Ubuntu"," OpenEBS"],"excerpt":"What is StackPointCloud? StackPointCloud is a managed Kubernetes control plane to build cloud-native stacks on AWS, Google Cloud (GKE & GCE), Azure & DigitalOcean. \r","content":"\r\n## What is StackPointCloud?\r\n\r\nStackPointCloud is a managed Kubernetes control plane to build cloud-native stacks on AWS, Google Cloud (GKE & GCE), Azure & DigitalOcean. StackPointCloud simplifies installation and aggregation of multiple Kubernetes clusters pretty much on any platform. Even if you are an expert, provisioning your own Kubernetes stack their easy to use interface and capabilities to centralize all your deployments in one place is compelling. StackPointCloud is free for the first 30 days and $49.95 a month after for any number of Kubernetes clusters.\r\n\r\n## Prerequisites\r\n\r\nMinimum requirements for deploying your Kubernetes clusters on StackPointCloud:\r\n\r\n### Hardware\r\n\r\n- None\r\n\r\n### Software\r\n\r\n- [OpenEBS](https://github.com/openebs/openebs)\r\n\r\n### Cloud Provider\r\n\r\n- [Amazon Web Services (AWS)](https://aws.amazon.com/) account (Other major providers supported by StackPoint, but not covered in this article)\r\n\r\n## Start your StackPoint Trial\r\n\r\nFirst, go to [stackpoint.io](https://stackpoint.io/) and click on the **Launch a Cluster** button to start your free trial.\r\n\r\n![Launch a Cluster button in stackpoint.io](https://cdn-images-1.medium.com/max/800/0*3Iro4mlPVlQolQfh.png)\r\n\r\nThen choose your cloud provider. In this example, I will use **AWS**.\r\n\r\n![Configure Access to AWS](https://cdn-images-1.medium.com/max/800/0*s0vkUYR7sJXoR6IU.png)\r\n\r\n#### Configure Access to AWS\r\n\r\nOn the next screen, we need to configure our provider. You need to provide AWS Access Key ID and Secret Access Key and optionally your SSH Key.\r\n\r\n![Cloud providers](https://cdn-images-1.medium.com/max/800/0*_2SUsICymTDtGlwK.png)\r\n\r\nIf you don’t know where to find them, follow the instructions [here](https://stackpointcloud.com/community/tutorial/how-to-create-auth-credentials-on-amazon-web-services-aws) to create your user.\r\n\r\nClick on **Add Credentials** button.\r\n\r\n![Add Credentials](https://cdn-images-1.medium.com/max/800/0*5LX2XDbBqhnm1au8.png)\r\n\r\nAfter you add your credentials, click on **Submit**.\r\n\r\n## Configure K8s Cluster\r\n\r\nOn the “Configure your cluster” page click the edit button on **Distribution** and choose **Ubuntu 16.04 LTS**.\r\n\r\n![Configure K8s Cluster](https://cdn-images-1.medium.com/max/800/0*ty0IA_1uuDxaCQoX.png)\r\n\r\nChange the **Cluster Name** something meaningful like **OpenEBS Demo**.\r\n\r\n![Change the Cluster Name](https://cdn-images-1.medium.com/max/800/0*50cyzQI-2DZIX-AG.png)\r\n\r\nI could separate my etcd into 3 nodes dedicated cluster, but for a functional demo hosting it on the same cluster works perfectly fine. You can leave all other options as default. Now click on **Submit** to create your cluster. This should take around 5–8 minutes to bring up one Master and two Workers Kubernetes Cluster.\r\n\r\n## Import OpenEBS Helm Charts\r\n\r\nClick on the **Solutions** tab on the top of the screen and select **Import Charts** from the upper left.\r\n\r\n![Import OpenEBS Helm Charts](https://cdn-images-1.medium.com/max/800/0*vZr9hqN35SCCsx-a.png)\r\n\r\nAdd the chart repo with the following details:  \r\n — **name :** openebs-charts  \r\n — **type :** packaged-charts  \r\n — **repo url : **[https://openebs.github.io/charts/](https://openebs.github.io/charts/)\r\n\r\nClick on **Review Repository**.\r\n\r\n![Update chart repo](https://cdn-images-1.medium.com/max/800/0*lkT38CLmsESK2i1T.png)\r\n\r\nMake sure **Access Verified** shows ok and click on the **Save Repository** button to finish adding chart repo.\r\n\r\n![Save Repository](https://cdn-images-1.medium.com/max/800/0*tS9uArAROjoOLc05.png)\r\n\r\n## Adding OpenEBS to Your Kubernetes Cluster\r\n\r\nFirst, make sure your cluster and all nodes are up.\r\n\r\nOn the **Control Plane** tab click on your cluster name **OpenEBS Demo**.\r\n\r\n![Control Plane tab](https://cdn-images-1.medium.com/max/800/0*0wxTlbbO_yPMJZ8F.png)\r\n\r\nOnce the Kubernetes cluster is up on AWS with functional Helm, click on the **Solutions** tab and **Add Solution** button.\r\n\r\n![Solutions tab](https://cdn-images-1.medium.com/max/800/0*QofakUAHAb_DRYWp.png)\r\n\r\nAdd the solution with the following details:\r\n\r\n– **namespace :** default  \r\n– **values -> rbacEnabled :** false  \r\n\r\n![Install OpenEBS into your cluster](https://cdn-images-1.medium.com/max/800/0*JiSAsRHf5SND0Cbp.png)\r\n\r\nClick on **Install** to finally add OpenEBS into your cluster.\r\n\r\nState field should be green after OpenEBS is successfully added.\r\n\r\n![OpenEBS post install screenshot](https://cdn-images-1.medium.com/max/800/0*1nY357dtw3PNOfAi.png)\r\n\r\nNow your cluster is ready; you can run your workloads on openebs-standard storage class.\r\n\r\nTo confirm, click on **K8s Dashboard**. This will bring up your Kubernetes Dashboard UI in a new window. You should be able to find the **openebs-standard** option under **Storage Classes**.\r\n\r\n![ K8s Dashboard](https://cdn-images-1.medium.com/max/800/0*E5eYS81HcguHaG1r.png)\r\n\r\nI’ll cover some workload examples such as MongoDB, Percona, Cassandra, and [Postgres](http://containerized.me/how-to-deploy-a-postgresql-cluster-on-kubernetes-openebs/) running OpenEBS on my next blogs (stay tuned).\r\n\r\n---\r\n\r\n*Originally published at [Containerized Me](http://containerized.me/how-to-install-openebs-on-aws-using-stackpointcloud/)*.\r\n","slug":"how-to-install-openebs-on-aws-using-stackpointcloud"},{"id":82,"title":"How to Install OpenEBS with Kubernetes using MiniKube\r","author":"Murat Karslioglu\r","author_info":"VP @OpenEBS & @MayaData_Inc. Lives to innovate! Opinions my own!\r","date":"22-10-2017\r","tags":["Container"," Docker"," minikube"," Kubernetes"," Solutions"," OpenEBS"],"excerpt":"Whether you are a newbie to Kubernetes looking for a small setup to start or a developer who uses Kubernetes on a daily basis, minikube is the tool that helps you quickly set up and run a Kubernetes environment locally. \r","content":"\r\n## What is MiniKube?\r\n\r\nWhether you are a newbie to Kubernetes looking for a small setup to start or a developer who uses Kubernetes on a daily basis, minikube is the tool that helps you quickly set up and run a Kubernetes environment locally. minikube runs a single-node Kubernetes cluster inside a VM on your laptop for users looking to try out Kubernetes or develop with it day-to-day.\r\n\r\nThere are several options available for developers to install minikube based on an operating system. You can read the detailed instructions for the three most popular operating systems in [minikube Setup](https://github.com/kubernetes/minikube).\r\n\r\nHowever, if you are already an experienced minikube user, skip the minikube setup instructions and jump directly to the **Setup OpenEBS** section.\r\n\r\nIn this post, I will explain how to set up Kubernetes using minikube directly on Ubuntu 16.04 (without using any VM drivers) and how to configure OpenEBS in hyper-converged mode or, more accurately, create your Container-Converged Infrastructure using OpenEBS Container Attached Storage (CAS).\r\n\r\n## Prerequisites\r\n\r\nMinimum requirements for minikube:\r\n\r\n### Hardware\r\n\r\n- Machine Type — minimum 4 vCPUs.\r\n- RAM — minimum 4 GB.\r\n- VT-x/AMD-v virtualization must be enabled in your system BIOS\r\n\r\n### Software\r\n\r\n- [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/)\r\n- If using macOS:\r\n- xhyve driver, [VirtualBox](https://www.virtualbox.org/wiki/Downloads), or VMware Fusion.\r\n- If using Linux:\r\n- [VirtualBox](https://www.virtualbox.org/wiki/Downloads) or KVM.\r\n\r\n**NOTE:** minikube supports the `-vm-driver=none` option that runs Kubernetes components on the host and not in a VM. Docker is required to use this driver, but no the hypervisor.\r\n\r\n- If using Windows:\r\n- [VirtualBox](https://www.virtualbox.org/wiki/Downloads) or Hyper-V. VMware Workstation is not supported.\r\n\r\nSince VirtualBox is available on all three platforms, I will describe this option.\r\n\r\n## Install VirtualBox\r\n\r\nI will not cover the details of VirtualBox installation since it is very common and instructions are widely available online.\r\n\r\n1. Go to the [Virtualbox website](https://www.virtualbox.org/wiki/Downloads).\r\n2. Download and install the binaries required for your operating system.\r\n\r\nMake sure that you install [VirtualBox 5.2.0 Oracle VM VirtualBox Extension Pack](http://download.virtualbox.org/virtualbox/5.2.0/Oracle_VM_VirtualBox_Extension_Pack-5.2.0-118431.vbox-extpack) as well.\r\n\r\nWhen I was writing this blog post, the most current version was VirtualBox-5.2.0–118431.\r\n\r\nOnce VirtualBox is installed, you will see a screen similar to the following:\r\n\r\n![Post VirtualBox install screenshot](https://cdn-images-1.medium.com/max/800/0*HztM26xqSWKiYaIx.png)\r\n\r\n**NOTE:** You can also use KVM, Hyper-V, and VMware Fusion.\r\n\r\n## Install Ubuntu\r\n\r\nCreate a new VM with 4 vCPUs, 4Gb memory, and 10GB disk space.\r\n\r\n![Creating VM](https://cdn-images-1.medium.com/max/800/0*8wqBzAyAPf_LsbFk.png)\r\n\r\nDownload your preferred version of [Ubuntu](https://www.ubuntu.com/download). I will be using Ubuntu 16.04.3 LTS.\r\n\r\nUnder **VM Settings/Storage**, mount your ISO image and power on the VM.\r\n\r\nInstall Ubuntu with default options. I used *openebs/password* as username/password for simplicity. If you use something else make sure to replace it with yours when you follow the instructions.\r\n\r\nFinally login to your Ubuntu VM.\r\n\r\nOn your Ubuntu host, install the SSH server:\r\n\r\n    sudo apt-get install openssh-server\r\n\r\nNow you should be able to access your VM using SSH. Check the status by running:\r\n\r\n    sudo service ssh status\r\n\r\n![Accessing your VM using SSH](https://cdn-images-1.medium.com/max/800/0*1rUwIrG2T0EzoBJj.png)\r\n\r\nDisable firewall on your Ubuntu VM by running:\r\n\r\n    sudo ufw disable\r\n    \r\n\r\nInstall curl if it’s not already installed:\r\n\r\n    sudo apt install curl\r\n\r\nBy default, for each virtual machine, VirtualBox creates a private network (10.0.2.x) which is connected to your laptop’s network using NAT. However, you may not be able to your VMs from your localhost through SSH just yet. To access your VM, you need to configure port forwarding. In the network setting of the VM. Click on **Advanced/Port Forwarding** and create a rule with the **Host port 3022 **and **Guest Port 22**. Name it *SSH* and leave other fields blank.\r\n\r\n![Configuring port forwarding](https://cdn-images-1.medium.com/max/800/0*uDKLTcZapcEZfK3E.png)\r\n\r\nNow you can connect to your Ubuntu VM from your laptop using SSH with localhost as the address and port 3022 instead of 22. Connect to your Ubuntu VM using the following credentials: `openebs/password`\r\n\r\n## Install Docker\r\n\r\nTo get the latest version of Docker, install it from the official Docker repository.\r\n\r\nOn your Ubuntu VM, run the following commands:\r\n\r\n    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\r\n    sudo add-apt-repository “deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable”\r\n    sudo apt-get update\r\n\r\n![Install the latest version of Docker](https://cdn-images-1.medium.com/max/800/0*-4QRgWvjit9qyKaq.png)\r\n\r\nConfirm that you want to install the binaries from the Docker repository instead of the default Ubuntu repository by running:\r\n\r\n    sudo apt-get install -y docker-ce\r\n\r\n![Install the binaries from the Docker repository](https://cdn-images-1.medium.com/max/800/0*Hh8nFvl7xArgJnN-.png)\r\n\r\nInstall Docker and make sure it’s up and running after installation is complete:\r\n\r\n    sudo apt-get install -y docker-ce\r\n    sudo systemctl status docker\r\n\r\n![Install Docker](https://cdn-images-1.medium.com/max/800/0*NTvaIXL4LiPakwEy.png)\r\n\r\n## Add iSCSI Support\r\n\r\nOpenEBS uses iSCSI to connect to the block volumes. Therefore, you need to install the `open-iscsi` package on your Ubuntu machine.\r\n\r\nOn your Ubuntu host, run:\r\n\r\n    sudo apt-get update\r\n    sudo apt-get install open-iscsi\r\n    sudo service open-iscsi restart\r\n\r\n![Install the open-iscsi package on your Ubuntu machine](https://cdn-images-1.medium.com/max/800/0*OmIy-bxY3PrD_HYT.png)\r\n\r\nCheck that the iSCSI initiator name is configured:\r\n\r\n    sudo cat /etc/iscsi/initiatorname.iscsi\r\n\r\nVerify the iSCSI service is up and running:\r\n\r\n    sudo service open-iscsi status\r\n\r\n![Check that the iSCSI initiator name is configured](https://cdn-images-1.medium.com/max/800/0*30EupY6kOMa30SMj.png)\r\n\r\n## Set up minikube and kubectl\r\n\r\nOn your Ubuntu host, install minikube by running:\r\n\r\n    curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\r\n    chmod +x minikube\r\n    sudo mv minikube /usr/local/bin/\r\n\r\n![On Ubuntu host, install minikub](https://cdn-images-1.medium.com/max/800/0*62DCuwG4tX8iU_AX.png)\r\n\r\nInstall kubectl:\r\n\r\n    curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\r\n    chmod +x kubectl\r\n    sudo mv kubectl /usr/local/bin/\r\n\r\n![Install kubectl](https://cdn-images-1.medium.com/max/800/0*9jZx-rusvrdn9mEe.png)\r\n\r\nSet up directories for storing minkube and kubectl configurations:\r\n\r\n    mkdir $HOME/.kube || true touch $HOME/.kube/config\r\n\r\nSet up an environment for minikube by adding the following lines to the end of the `~/.profile` file:\r\n\r\n     export MINIKUBE_WANTUPDATENOTIFICATION=false\r\n     export MINIKUBE_WANTREPORTERRORPROMPT=false\r\n     export MINIKUBE_HOME=$HOME\r\n     export CHANGE_MINIKUBE_NONE_USER=true\r\n     export KUBECONFIG=$HOME/.kube/config\r\n\r\nConfirm that environment variables are saved in your profile file:\r\n\r\n    cat ~/.profile\r\n\r\n![Confirm that environment variables are saved in your profile file](https://cdn-images-1.medium.com/max/800/0*rxjoxM6qkYkppd5h.png)\r\n\r\nStart minikube:\r\n\r\n    sudo -E minikube start — vm-driver=none\r\n\r\n![Start minikube](https://cdn-images-1.medium.com/max/800/0*UaQ_6Y2m4hv6P4oc.png)\r\n\r\nIf you forgot to install Docker, you will get the following error:\r\n\r\n![Error screenshot when forgot to install Docker](https://cdn-images-1.medium.com/max/800/0*ysp8RnG5DWDu_Q0j.png)\r\n\r\nWhen using the none driver, the kubectl config and credentials generated will be root-owned and will appear in the root home directory. To fix this, set the correct permissions:\r\n\r\n    sudo chown -R $USER $HOME/.kube\r\n    sudo chgrp -R $USER $HOME/.kube\r\n    sudo chown -R $USER $HOME/.minikube\r\n    sudo chgrp -R $USER $HOME/.minikube\r\n\r\n## Verify minikube configuration\r\n\r\nVerify that minikube is configured correctly and it has started by running:\r\n\r\n    minikube status\r\n\r\n**Example:**\r\n\r\n![Verify minikube configuration](https://cdn-images-1.medium.com/max/800/0*yK3Wlyy81I15tNZp.png)\r\n\r\n**Note**\r\n\r\n- If the minikube status displays **Stopped**, add the `sudo minikube start` command.\r\n- If you forgot to set the permissions, minikube will display errors indicating permissions denied to configuration files, fix the permissions by running the following commands:\r\n\r\n    sudo chown -R $USER $HOME/.kube\r\n    sudo chgrp -R $USER $HOME/.kube\r\n    sudo chown -R $USER $HOME/.minikube\r\n    sudo chgrp -R $USER $HOME/.minikube\r\n\r\n## Verify Kubernetes configuration\r\n\r\nCheck that kubectl is configured and services are up and running by getting the list of Kubernetes nodes and pods:\r\n\r\n    kubectl get nodes\r\n    kubectl get pods — all-namespaces\r\n\r\n![Verify Kubernetes configuration](https://cdn-images-1.medium.com/max/800/0*noWgoiv0GLk43BRB.png)\r\n\r\n## Set up OpenEBS\r\n\r\nDownload the latest OpenEBS Operator files using the following commands:\r\n\r\n    git clone https://github.com/openebs/openebs.git\r\n    cd openebs/k8s\r\n\r\n![Download the latest OpenEBS Operator files](https://cdn-images-1.medium.com/max/800/0*UNKK2cZhYPJVbTDx.png)\r\n\r\nBy default, OpenEBS launches OpenEBS Volumes with two replicas. To set one replica, as is the case with a single-node Kubernetes cluster, in the openebs-operator.yaml file, specify the environment variable `DEFAULT_REPLICA_COUNT=1`. This is supported in OpenEBS version 0.4 onward.\r\n\r\n![Replica count screenshot](https://cdn-images-1.medium.com/max/800/0*SxXEzbDmpVA5ZhwS.png)\r\n\r\nApply the configuration changes:\r\n\r\n    kubectl apply -f openebs-operator.yaml\r\n\r\n![Applying configuration change](https://cdn-images-1.medium.com/max/800/0*WB16UScHye4LClft.png)\r\n\r\nAdd the OpenEBS storage classes that can then be used by developers and applications:\r\n\r\n    kubectl apply -f openebs-storageclasses.yaml\r\n\r\n![Adding the OpenEBS storage classes](https://cdn-images-1.medium.com/max/800/0*mojNYfZbll-g6bdk.png)\r\n\r\n#### Running stateful applications with OpenEBS storage\r\n\r\nTo use OpenEBS as persistent storage for your stateful workloads, set the storage class in the Persistent Volume Claim (PVC) of your application to one of the OpenEBS storage class.\r\n\r\nGet the list of storage classes using the following command. Choose the storage class that best suits your application.\r\n\r\n    kubectl get sc\r\n\r\n![Getting the list of storage classes](https://cdn-images-1.medium.com/max/800/0*artfNnT8fZSziaKH.png)\r\n\r\nYou can find samples of YAML files for stateful workloads using OpenEBS under the `openebs/k8s/demo` folder.\r\n\r\n![Finding samples of YAML files for stateful workloads](https://cdn-images-1.medium.com/max/800/0*KCn5Z4-av-7Hevj_.png)\r\n\r\nNow you have your Kubernetes cluster up and running. In my next blog posts, I will cover the installation of stateful workloads such as Cassandra and [PostgreSQL](http://containerized.me/how-to-deploy-a-postgresql-cluster-on-kubernetes-openebs/), as well as the benefits of running your stateful workloads on OpenEBS. Stay tuned!\r\n\r\n---\r\n\r\n*Originally published at [Containerized Me](http://containerized.me/how-to-install-openebs-with-kubernetes-using-minikube/)*.\r\n","slug":"how-to-install-openebs-with-kubernetes-using-minikube"},{"id":83,"title":"Why are users using OpenEBS *on* EBS?\r","author":"Uma Mukkara\r","author_info":"Contributor at openebs.io, Co-founder & COO@MayaData. Uma led product development in the early days of MayaData (CloudByte).\r","date":"19-10-2017\r","tags":["Container Native Storage"," Featured"," MySQL"," Kubernetes"," OpenEBS"],"excerpt":"We were a little surprised to see OpenEBS started to be used on top of EBS itself. So we dug in and asked why?\r","content":"\r\nWe were a little surprised to see OpenEBS started to be used on top of EBS itself. So we dug in and asked why?\r\n\r\nThe following lays out what we learned, focusing mostly on the most common use case.\r\n\r\nAs you likely know, broadly speaking, there are two types of stateful applications. We call them Mercy Apps and NoMercy apps (Not generic names, but we started using these names in the OpenEBS community discussions 🙂)\r\n\r\n1. **Mercy Apps** — The apps deal with data resiliency at the application level; for example, they synchronously replicate and disperse the data and will have less dependency on the high availability of storage underneath. Some examples of mercy apps are Cassandra and even (usually) MongoDB.\r\n2. **NoMercy Apps** — The apps that have a single copy of the data and have no idea of synchronous replication of data. These applications assume that the underlying storage is always (at least highly) available. The most famous example for NoMercy apps is the famous “MySQL server”.\r\n\r\nToday, most of the legacy apps are NoMercy Apps. Also, MySQL or Postgres tends to be the first choice for most of the developers and remains the most commonly used database for quick application development and deployment. The applications that use MySQL underneath are being containerized and probably being moved to the cloud container services such as Amazon ECS. It is important to note that even NoSql databases like MongoDB that protect the data across nodes are often deployed as a single copy (as a NoMercy App) and that we are seeing cases where users of NoSql use the storage for node pre-population for example instead of relying on node rebalancing at the application / NoSql level.\r\n\r\n![Shifting from legacy to microservices](https://cdn-images-1.medium.com/max/800/1*Bayd4nQST787TIbYo_5aWg.png)  \r\n(***Shifting from legacy to microservices***)\r\n\r\nOnce you lift and shift your legacy app onto containers and the cloud, you ideally want to allow for Kubernetes to orchestrate the dynamism of container movements among various hosts; while this dynamism is core to the value of containerization, it also creates a unique challenge for the availability of data/storage to the application.\r\n\r\n![EBS volume may not be immediately available](https://cdn-images-1.medium.com/max/800/1*ISz4kvGREGlXZkBwiwSRjQ.png)  \r\n(***EBS volume may not be immediately available***)  \r\n\r\nAs the above drawing suggests, we learned from some OpenEBS community users that when app containers move from one host to another, the time it takes to detach the EBS volume from one host and to attach the same EBS volume to the new host can *cause downtime for the stateful application*.\r\n\r\n### There are two solutions to this problem.\r\n\r\n***First solution:*** Re-architect your application and make it a mercy application. Use the new age databases like Cassandra or MongoDB and configure them to protect the data at the application layer, which of course needs special training and quite a bit of work. Even the flavor of SQL support may change, so you may find yourself rewriting your queries, always a source of fun and enjoyment 🙂\r\n\r\n![Sync replicate at the DB level](https://cdn-images-1.medium.com/max/800/1*rdabUhTkx6iF3Ncv3EKlrQ.png)  \r\n(***Sync replicate at the DB level***)\r\n\r\nBtw, if the thought of moving to a new Database is daunting, you would be interested in using plug-in code to the existing no-mercy apps to perform the synchronous replication. In the case of MySQL, one option is to migrate to MariaDB and then use the Galera sync replication plugin. You would be lucky if you already have a plugin that is resilient and doesn’t add performance overheads.\r\n\r\n***A second solution*** — that is probably the top reason users are running OpenEBS and similar containerized storage controllers ON EBS — is a more elegant one : *protect the data at the storage layer*. By putting OpenEBS into your pods as the provider of storage and letting it handle data placement on the local nodes (in this case one or more, yes, EBS volumes) while also replicating the data per the policies you prefer, you avoid rewiring your application.\r\n\r\n![Using OpenEBS for high availability of Mysql DB data on AWS EBS](https://cdn-images-1.medium.com/max/800/1*3npgXXxGEOFD4uh_KRvPng.png)  \r\n(***Using OpenEBS for high availability of Mysql DB data on AWS EBS***)\r\n\r\nOk, great, however — you are now doing storage differently. Isn’t that itself a challenge?\r\n\r\nWell, if you are already moving towards Kubernetes then you are already learning the skills needed to run OpenEBS. OpenEBS is integrated into the Kubernetes storage architecture to make the volume provisioning basically the same behind the scenes experience as attaching the EBS volume for a given pod. Instead of attaching the AWS EBS volume to the application pod using kubernetes.io/aws-ebs provisioner, the developer simply uses kubernetes.io/openebs provisioner. The underlying pieces such as integrating the AWS EBS volume into OpenEBS volume are handled by the OpenEBS provisioner.\r\n\r\nMileage may of course vary. We are building OpenEBS in the open in part to get feedback from users like those that prompted me to write this blog in the first place. Please share with the community experience of running OpenEBS on your Kubernetes based AWS ECS — whether your applications are Mercy or NoMercy. You can find the instructions and help [here](http://openebs.readthedocs.io/en/latest/install/cloud_solutions.html#amazon-cloud). And — yes — we welcome other bloggers 🙂 We’ve seen a huge ramp in issues and PRs and so forth in the last couple of months. The next step might be user blogging — please feel free and we’ll help if useful.\r\n","slug":"why-are-users-using-openebs-on-ebs"},{"id":84,"title":"How to build an e2e?\r","author":"Amit Kumar Das\r","author_info":"Engineer the DAO\r","date":"17-10-2017\r","tags":["Cloud Storage"," E2e Testing"," Featured"," Kubernetes"," Storage"],"excerpt":"e2e which expands into end to end speaks for itself. It can be treated as component testing, integration testing, or something that tries to test stuff outside the scope of unit tests.\r","content":"\r\n### What is e2e?\r\n\r\nWell *e2e* which expands into end to end speaks for itself. It can be treated as component testing, integration testing, or something that tries to test stuff outside the scope of unit tests. I got attracted to this side of development when I was surprised looking at one of the smallest possible directory names ever in a code-based project. As I speak, we get to see a number of Go based projects having an *e2e* folder. I believe, it has been popularized by the likes of etcd, Kubernetes, and perhaps a few other open source communities.\r\n\r\n### How to build one?\r\n\r\nBefore even getting into the How’s part, we must rather be comfortable with following questions:\r\n\r\n— *Do we need to?*  \r\n — *Does our project need one?*\r\n\r\nMore often than not, a code based project will love to have one. Perhaps not with this name but the need will definitely exist. Some of the guiding principles highlighted in this article will also help us in getting the answers to these questions. So keep reading.\r\n\r\n### Assuming our project needs one, how to build it then?\r\n\r\nAre there any guidelines/rules that we can follow? Here they are:\r\n\r\n— ***`Refer and re-use wherever possible than build from scratch`*** is the golden rule.\r\n\r\n— ***`Start Small`***. In this context, it refers to '*not to gulp the entire code base and be very selective even to the point of refusing 90% of the code that is available for free*'. This is the learning I have had all these years as a programmer. This is essential if one wants to reach the milestones in time which will otherwise become a mirage. I have burnt my fingers multiple times with regards to this principle. The latest one was when I tried to reuse the entire Kubernetes e2e for [Maya’s](https://github.com/openebs/maya/) e2e. Needless to say I failed miserably. Some of these reasons are explained in this article.\r\n\r\n### Is that all?\r\n\r\nDefinitely not. We will soon get into the How’s part which in turn is a repository of queries, doubts, and concerns.\r\n\r\nTo clarify it further, I had these queries when I started with the e2e journey for the [Maya](https://github.com/openebs/maya/) project.\r\n\r\n- Should e2e be shell wrappers over [CLI](https://en.wikipedia.org/wiki/Command-line_interface), for example, [kubectl](https://kubernetes.io/docs/user-guide/kubectl-overview/) & [mayactl](https://github.com/openebs/maya/tree/master/cmd/mayactl)?\r\n- Should it be tied to Go [*testing*](https://golang.org/pkg/testing/) library? Any benefits?\r\n- Should it use the [*Ginkgo*](https://onsi.github.io/ginkgo/) library? Anything to gain?\r\n- Should it be moulded with [*Ansible*](https://www.ansible.com/) and let the scene get enacted by its players (*read playbooks*)?\r\n\r\n### Simplicity — One Rule to Rule them All\r\n\r\nAll these queries should be answered with simplicity in mind. In other words, how to construct test code that is simple?\r\n\r\nWith simplicity in mind, let us pen down some dos and don’ts that will be an \r\nindicator of simplicity versus complexity.\r\n\r\n### Simplicity — Direct Thinking!!\r\n\r\nListed are some of the direct modes of thinking with regards to simplicity.\r\n\r\n- Code should just try to eliminate the repeating tasks of the developer, tester, or operator. It will be simpler if it builds logic on only those ingredients that play an inhibiting role in manual testing.\r\n- Find out one tool (*in other words a dependency*) that can make this test code easy to reason and comprehend. Build the code around this dependency. Though this dependency becomes a hard requirement, we are still good if it satisfies the simplicity rule.\r\n- It should be limited in its scope. For example, in the case of [Maya](https://github.com/openebs/maya/), its e2e is scoped to Kubernetes. Maya e2e avoids [*Ginkgo*](https://onsi.github.io/ginkgo/) etc libraries. It also avoids *Ansible* as the latter is not at all required.\r\n- It should be built using a high level language. Maya e2e uses Go as its only programming language. It does not use shell or any other scripts. This choice is also dependent on the scope the test code is targeting at. In the case of Maya, [Kubernetes](https://kubernetes.io/) (*and host of other container orchestrators*) use Go as their primary language. This helps Maya to abide by the golden rules mentioned earlier.\r\n\r\n### Simplicity — Inverted Thinking!!\r\n\r\nListed are some of the inverted modes of thinking with regards to simplicity.\r\n\r\n- It should not try to be another [DSL](https://en.wikipedia.org/wiki/Domain-specific_language) in the making. In addition, it should not deal with some smart syntax. It will instantly seem smart to the eyes which developed it, but will definitely repel others.\r\n- It should not get into the way of the developer or the tester in form of auto-generation of test code etc. This will lead to its brittleness.\r\n- It should not dedicate its logic to concurrency while running the test cases. It should not build its logic around CPU cores and parallelism for running the test cases either. It might seem concurrency is a required feature for a particular test case. However, do we take concurrency into factor while executing these cases manually? The test logic can have the concurrency built later in an iterative fashion. Remember “*shipping is better than perfect”* in these cases.\r\n- It should not play around with the abstraction of containers and their orchestrators. Remember this is not the reason for its existence in the first place. It goes against the prescription of simplicity. Hence, cut this noise if they are not a natural fit.\r\n- It should not mandate running the tests in containers. It is considered cool these days to run test cases in containers. However, it can backfire. For example, running your app and test cases as containers within a namespace or inside the same cluster. We do not want *100s* and *1000s* of containers getting spawned in the same setup that is meant to test your app which is again a set of containers.\r\n- It should not involve a learning curve. It should be an involving library that can take inputs from the team (*internal as well as external*) and evolve.\r\n- It `need not / must not` follow design patterns. The best it can do is to adhere to the core language’s best practices.\r\n\r\n### What else should the e2e try to achieve?\r\n\r\nAnswers to these questions will help you in getting the other aspects of your e2e.\r\n\r\n- Did we avoid fancy scripting ?\r\n- Is e2e (*especially the reusable code pieces*) better than the one it was created from?\r\n- Will *`anybody be able to contribute to anything`* in this e2e project?\r\n- Does it look similar to the practices followed by its programming language? Why? This leads to a 0 learning curve and hence is simpler to understand?\r\n- Do you still remember the `Golden Rules`? Add another one & that is **`End Small`**.\r\n\r\n*Thanks to Madhuri Hebbar and Uday Kiran.*\r\n","slug":"how-to-build-an-e2e"},{"id":85,"title":"Quick update on OpenEBS v0.4 — a developer friendly release!!\r","author":"Kiran Mova\r","author_info":"Contributor and Maintainer OpenEBS projects. Chief Architect MayaData. Kiran leads overall architecture & is responsible for architecting, solution design & customer adoption of OpenEBS.\r","date":"03-10-2017\r","tags":["Container Native Storage"," Container Orchestration"," minikube"," Open Source"," Updates"," OpenEBS"],"excerpt":"OpenEBS v0.4.0 is out and I take pride in sharing that it is powered by the same set of tools, used by communities that have adopted DevOps DNA for delivering products.\r","content":"\r\n[OpenEBS v0.4.0](https://github.com/openebs/openebs/releases/tag/v0.4.0) is out and I take pride in sharing that it is powered by the same set of tools, used by communities that have adopted DevOps DNA for delivering products.\r\n\r\nPersonally, for me, the most exciting part of this release is that it involves contributions from community members across the globe. We have crossed more than 100 Pull Requests from 25+ contributors.\r\n\r\nOur decision to remain OpenSource is paying off!! As new contributors come on board, the following DevOps tools are helping us to sustain the quality:\r\n\r\n- [Github ](https://github.com/openebs/openebs/issues)for collaboration — managing code reviews, releases, and now project management (issues and milestones).\r\n- [Travis ](https://travis-ci.org/openebs/) and [DockerHub ](https://hub.docker.com/r/openebs/)— validate the code commits and release new docker images\r\n- [Jenkins and Ansible](https://github.com/openebs/openebs/tree/master/e2e) — run the e2e tests on the new docker images.\r\n- Static Analysis is provided through a wide range of tools like gofmt, flake8, codecov, goreport, and the list needs to expand.\r\n- [ReadTheDocs ](http://openebs.readthedocs.io/en/latest/index.html) — updating the live documentation site\r\n\r\nOpenEBS, like other storage options (EBS, Rook, and others), is already deeply integrated with Kubernetes and is now part of the [kubernetes-incubator project](https://github.com/kubernetes-incubator/external-storage/tree/master/openebs). OpenEBS also provides similar intuitive mechanisms to provide block storage to your stateful application on Kubernetes using concepts like:\r\n\r\n- StorageClasses\r\n- PersistentVolumeClaims\r\n- PersistentVolumes\r\n- DynamicProvisioner\r\n\r\nIn addition, unlike others, OpenEBS delivers container-native storage by *using Kubernetes (as opposed to running on Kubernetes)* itself as the underlying framework for scheduling and storing configuration data. There are also efforts underway for the upcoming release to make use of Kubernetes *LocalStorageManager, Kube-Dashboard, and CNCF projects like Prometheus, FluentD, Grafana, Jaegar*, etc., for managing and monitoring the storage functionality.\r\n\r\nYou can easily get OpenEBS running on your Kubernetes Cluster with the following two commands and then point your application’s PVC to one of the OpenEBS Storage Classes.\r\n\r\n`kubectl apply -f openebs-operator.yaml`  \r\n`kubectl apply -f openebs-storageclasses.yaml`\r\n\r\nThe above YAML files can be downloaded from [here](https://github.com/openebs/openebs/tree/master/k8s). For detailed instructions refer to our [quick start guide](http://openebs.readthedocs.io/en/latest/getting_started/quick_install.html) or checkout our [sample stateful applications](http://openebs.readthedocs.io/en/latest/install/install_usecases.html) which include Percona, Jupyter, Postgresql, etc.,\r\n\r\nWhile you are at the documentation, you can also check out the additional deployment options that we have added with this release:\r\n\r\n- [Running Kubernetes and OpenEBS on AWS](http://openebs.readthedocs.io/en/latest/install/cloud_solutions.html)\r\n- [Running Kubernetes within minikube](http://openebs.readthedocs.io/en/latest/install/dev_solutions.html)\r\n\r\nThough we are still in the first leg of our journey, with OpenEBS v0.4, you get usable container-native storage, with enterprise storage capabilities like detailed *Volume IO statistics* and *Snapshots*.\r\n\r\n*Please refer to the [CHANGELOG](http://openebs.readthedocs.io/en/latest/release_notes/releasenotes.html), for a summary of updates in v0.4 and [ISSUELOG](https://github.com/issues?q=user%3Aopenebs+and+is%3Apr+and+merged%3A%3E2017-06-23+sort%3Acreated-asc)for the list of Pull Requests.*\r\n\r\nAnd we are always looking for help from OpenSource savvy community members. You can contribute in several ways — take your pick from our growing [task list](https://github.com/openebs/openebs/labels). Join us on [#Slack](http://slack.openebs.io/).\r\n","slug":"quick-update-on-openebs-v04-a-developer-friendly-release"},{"id":86,"title":"Not Yet Another Distributed Storage System\r","author":"Jeffry Molanus\r","author_info":"Jeffry is the CTO at MayaData. At MayaData, his primary focus is to make sure the product is flexible and scalable. When he is not working with code, he practices martial arts.\r","date":"10-09-2017\r","tags":["Kubernetes"," Docker"," Container"],"excerpt":"These days, it seems that a lot of storage vendors are taking a scale out approach to delivering high-performance storage to meet the increasing demand for IOPS and bandwidth.\r","content":"\r\nThese days, it seems that a lot of storage vendors are taking a scale-out approach to deliver high-performance storage to meet the increasing demand for IOPS and bandwidth. Reduced latency is also high on the storage requirement list, however, scale-out distributed systems typically result in the inverse, i.e., it increases latency.\r\n\r\nAlthough complex distributed systems are easier to build these days due to a variety of factors including maturing software implementations of the likes of Paxos, distributed hash tables, and RAFT it seems that creating a storage system that utilizes these concepts and is easy to manage and maintain in production — is not.\r\n\r\nOn the other hand, if you want to leverage the distributed nature of storage at the client level, more often than not, the end-users are required to run specialized clients/drivers to unleash the enormous bandwidth these systems can deliver — and so now your storage has infected your client which makes it even less attractive.\r\n\r\nArguably, if you need hundreds of gigabytes of throughput for a particular workload, the Linux kernel comes preloaded with [one](http://www.orangefs.org/). So you have to look no further from a tech support side of things — as what better experts to find that concern themselves with the Linux kernel and thus OrangeFS, right? No need to search any further, right?\r\n\r\nLet’s first try to understand why a lot of people I’ve spoken to in the past typically chose **“scale-out.”** It seems they all like the idea of “**add another box”** to add performance and capacity. The fact that you can’t scale performance decoupled from capacity is what they take for granted. However, due to economics forcing IT segments to do things cheaper and more predictably, this is not the case — anymore.\r\n\r\nSome storage vendors have found a solution for this, by not selling you expensive boxes but rather just the software. You simply scale in any cloud on any hardware or so they say. However, this **“any any”** approach does not fit in with the requirement to make things more predictable in fact quite the opposite.\r\n\r\nSo if we summarize the downsides:\r\n\r\n- Distributed storage difficult to develop and is hard and nasty to manage in production\r\n- Specialized drivers needed to unleash the real potential\r\n- Scaling the number of nodes does not decrease latency, in fact, usually the opposite (depending on implementation)\r\n- Best scales bandwidth and IOPS, however, this is not what a typical workload requires\r\n- Complex consistency models create surprises regarding what is on disk or not\r\n- Not especially good at leveraging flash or NVMe to deliver great performance and a small footprint\r\n- Big blast radius — the more data you can put in one system, the more you might lose or at least lose access to when you most need it\r\n- The complexity and need for quick metadata updates across nodes both argue against multi-cloud deployments (though there are some scale-out file systems being built that claim to address these issues)\r\n\r\nNow there will always be vendors out there that claim to have solved it all, unlimited scale-out, never ending IOPS, more bandwidth than the whole of the internet combined, and latency — sure we do that too…\r\n\r\nAt [OpenEBS](https://www.openebs.io/), however, we took a different approach by not trying to solve the distributed problems but to take a step back and try to determine what are the real problems people need to solve?\r\n\r\nSpeaking to our early tech-preview customers, we were shocked with awe to see that due to the complexity of storage these days, they simply revert to [Direct Attached Storage](https://en.wikipedia.org/wiki/Direct-attached_storage) (DAS). “It won’t go any quicker than that”, they say. And you have to make a very, very, strong case to argue against that. In fact, come to think of it, it is nearly impossible if you consider the speed of NMVe devices.\r\n\r\nHas the storage market become so consumed with itself that it keeps making storage products so complex, with each vendor, having its own **“if — and — or buts”** that they are fed up with it and revert back to DAS? Did it become so unpredictable? The time of consolidated storage churn?\r\n\r\nYes, the storage market is consumed with itself. But there is more, the storage **needs** have also changed. In the early SAN days, it was about consolidating islands of storage into a bigger one as it would be easier to manage and the performance of the SAN would be higher than some individual devices. Virtual machines made it possible to consolidate compute which also made a lot of sense as boxes were mostly idle.\r\n\r\nHowever, all of this work was done for one reason and one only — to accommodate the piece of software that matters the most: the app.\r\n\r\nThe app is central and is the only thing that matters; everything around it is inflicted upon us.\r\n\r\nNobody wakes up one day and says, “I need to get myself a SAN” — it was likely the best of the worst options at that time.\r\n\r\nAs DevOps happened alongside containerization, the application itself has become a distributed system. A distributed system in the sense that subcomponents of the app as a whole may run on the same box, different box, and are loosely coupled by APIs one way or the other and working together to solve a complex (business) problem.\r\n\r\nAs applications have become distributed systems themselves, they have become easier to scale and thus don’t always require high IOPS low latency storage devices to scale performance-wise. So storage and capacity are now loosely coupled and suffer from data gravity in a different way than they once did. Additionally, data availability does not solely depend anymore on expensive storage arrays as applications are designed to replicate their data straight out of the GIT. As these apps are distributed by nature, we think that a distributed storage system is not only complex and nasty but completely unneeded.\r\n\r\nSo — what’s a storage vendor to do? Well, we have it easier, as we don’t have much legacy — though we do have lots of experience building storage on containers as a part of our [ElastiStor](http://www.cloudbyte.com/products/elastistor-os/) product. And so we were able to start with the customer questions discussed above — in the age of microservices and cloud and containers, what job are they looking to do regarding serving, moving, and protecting their data? And we can answer those questions in a way that is entirely free from whether it is storage strategy A, B, or C. In future blogs we’ll talk about OpenEBS more (of course) — and maybe more importantly we would like to discuss with you how we think the job storage is being asked to do has changed and hence, how and why the old storage industry may be coming to an end.\r\n\r\nPlease, feel free to join us on [slack](http://slack.openebs.io/) to discuss in a more real-time fashion.\r\n","slug":"not-yet-another-distributed-storage-system"},{"id":87,"title":"ARA - Recording Ansible Playbook Runs\r","author":"Karthik Satchitanand\r","author_info":"Karthik has been into the Design and Development of tools for infrastructure as code, software testing performance & benchmarking & chaos engineering.\r","date":"31-08-2017\r","tags":["Ansible"," Automation"," DevOps"," Openebs"],"excerpt":"Ansible playbooks can generate quite a lot of console data. Add the -v (I do it by default!) and you have quite a lot to scroll through.\r","content":"\r\nAnsible playbooks can generate quite a lot of console data. Add the -v (I do it by default!) and you have quite a lot to scroll through. Oftentimes, one tends to feel the need for a better reporting mechanism — one which is easy to scour for specific task status, whilst having the luxury to extract additional debug info for the same if needed. Also, it would be great if this aid is available for playbook runs across time, i.e., for older playbook runs as well. This would be especially beneficial when running ansible-based CI suites, like @OpenEBS, where the application deployments, test setup & execution are driven by Ansible.\r\n\r\nSounds like a perfect requirement for a UI-based solution, doesn’t it?\r\n\r\nA lot of people using Ansible for medium-large scale deployments are known to use **Tower**, **Rundeck**, or the opensource alternative **semaphore** to achieve this (Tower has a lifelong self-support trial license without a few features for under 10 nodes). There is also **Foreman**, which is great in environments where a hybrid tool set — a puppet with ansible, or chef with ansible, etc., is used. Most of these are workflow management tools that do more than *just* what we desired above, i.e, playbook recording. These tools provide a centralized management capability wherein inventory, users, task/play scheduling, notifications can all be controlled from a dashboard. Now, it is also possible to integrate these with other popular CI tools like Jenkins (watch [this](https://www.youtube.com/watch?v=CqjeIiHvy30&amp;feature=youtu.be)).\r\n\r\nHowever, if there is already a system in place to perform some of the things these tools do (dynamic inventories, playbook triggers/scheduling) while not really needing others (access control, graphs), and you are only looking for the ability to store and analyze playbook runs via UI, then **ARA** (Ansible Run Analysis) is your tool.\r\n\r\n![ARA (Ansible Run Analysis)](/images/blog/ansible-run-analysis.png)\r\n\r\nHeavily used by the OpenStack community in their CI projects, ARA is built to just *\"record\"* playbook runs (Read ARA’s [manifesto](http://ara.readthedocs.io/en/latest/manifesto.html#manifesto), to understand more about its narrow focus). It does this via an ansible callback plugin to store run details into a database and a web interface to visualize the database.\r\n\r\n![Viewing playbook tasks summary in ARA](/images/blog/playbook-tasks-summary-in-ara.png)  \r\n(***Viewing playbook tasks summary in ARA!***)\r\n\r\n![Viewing task details in ARA](/images/blog/viewing-tasks-details-in-ara.png)  \r\n(***Viewing task details in ARA***)\r\n\r\nWhile it uses SQLite and an embedded webserver, respectively, for these purposes, you could even customize it to use MySQL & Apache. The UI includes nifty features like host fact lookup, playbook params page, search filter, property based sort, and link to code snippets!\r\n\r\n![ARA code snippet](/images/blog/see-specific-task-ran.png)  \r\n(***Click on action to see where the specific task ran***)\r\n\r\nA nice video explaining the web interface, with playbooks from the OpenStack-Ansible project is [here](https://www.youtube.com/watch?v=k3i8VPCanGo)\r\n\r\nIn addition to these, ARA also provides\r\n\r\n- Couple of Ansible modules for persisting & viewing some user data that one may want to view on the browser-based UI (like an ansible “fact”, but for visualization purposes :P).\r\n- A CLI to query the database (While I haven’t found much use for it till now, it is useful to custom create some reports)\r\n\r\nARA follows the same support cycle as the upstream Ansible community and is under active development (See [github](https://github.com/openstack/ara))\r\n\r\nHere is an [ansible role](https://github.com/openebs/openebs/tree/master/e2e/ansible/roles/ara) we have written that you could use to quickly setup ARA on your ubuntu box 🙂\r\n\r\nWe @OpenEBS, have found great benefit in using this tool and would happily recommend it for the use cases discussed. !!\r\n","slug":"ara-recording-ansible-playbook-runs"},{"id":88,"title":"Ansible @ OpenEBS — The whys and hows\r","author":"Karthik Satchitanand\r","author_info":"Karthik has been into the Design and Development of tools for infrastructure as code, software testing performance & benchmarking & chaos engineering.\r","date":"31-07-2017\r","tags":["Ansible"," Ci"," DevOps"," Jenkins"," Vagrant"],"excerpt":"We are using Ansible as one of the critical moving parts of our automated test suite in the CI pipeline @OpenEBS. The question was expected in some ways,\r","content":"\r\nDuring a telephone conversation with a former colleague and good friend I was confronted with an interesting question, “I know Ansible is a great configuration management tool, why bend it as a test automation framework?”\r\n\r\nWe are using Ansible as one of the critical moving parts of our automated test suite in the CI pipeline @OpenEBS. The question was expected in some ways, what with the friend having spent a few good years working with more “traditional”, proprietary, and hand-built-from-scratch test-automation frameworks based on Perl. The subsequent discussion (mostly answers and follow-up questions) helped me internalize why we chose Ansible at OpenEBS and how better to use it.\r\n\r\nFelt this warranted a blog post to make my thoughts public and hey, of course, gain more feedback!\r\n\r\nOK, that let the cat out of the bag\r\n\r\n## Infrastructure as Code (IaC)\r\n\r\nOne of the biggest IT trends over the last few years has been managing infrastructure through automation. One might argue that puppet started way back in 2005, thereby making this practice far older than most believe, but the way it has taken ops departments of most organizations by storm in the past 5–6 years is nothing less than a revolution. In fact, the paradigm of DevOps is built on managing infrastructure as code. And when we say code, the expectation of most ops personnel around the “language” would be that it doesn’t require deep programming knowledge and have a steep learning curve — which is what DSL (Domain Specific Language, sometimes also referred to as Domain Scripting Language) based frameworks like ansible achieve. It also helps that ansible adopts an imperative programming model (using YAML) that works well because of its alignment with the traditional command-based approach of ops teams.\r\n\r\n![Ansible GitHub trends ](https://cdn-images-1.medium.com/max/800/1*7Di79EF1SxNqF0F0KD1E-A.jpeg)\r\n(***Ansible GitHub trends (Courtesy: [https://www.ansible.com/blog/another-good-year-for-ansible-users](https://www.ansible.com/blog/another-good-year-for-ansible-users))*** )\r\n\r\nBut, how does the above address our question? \r\n\r\n**Answer**: A major portion of the test duration of infrastructure-based software, such as storage software involves “manipulation” of infrastructure. Setting up bare-metal boxes, virtual machines, or containers, installing packages, executing various commands that control & alter system state, monitoring for specific behavior are key aspects of this process. Consider the need to run the above as batch processes and perform parallel execution on multiple nodes — and the inevitability of a workflow orchestrator dawns upon you. Especially so when you are testing a solution like OpenEBS that is designed to provide storage for DevOps use cases (read more about this [here](https://blog.openebs.io/storage-infrastructure-as-code-using-openebs-6a76b37aebe6))\r\n\r\nIs not an approach (and the tool) soaked in “**devops-ness**” a pre-requisite to test the storage solution specifically designed for DevOps use cases 🙂 ?\r\n\r\n## Why Ansible, why not chef, puppet, salt, etc.?\r\n\r\n![Ansible](https://cdn-images-1.medium.com/max/800/0*NQOK_gId-YBZMe02.png)  \r\n\r\nErr.., this seems to have been done to death on the internet. Yet, new posts on this topic seem to spring up everytime I look. So, without discussing the why not, let me touch upon the aspects about ansible that appealed most to us.\r\n\r\n**Powerful, yet very simple**: Ansible’s power comes from its simplicity. Under the hood, it is just a DSL for a task runner over a secure shell (ssh) with intuitive modules for achieving most (if not all) system functions. The soft learning curve in ansible is one of its major advantages over its rivals (*Ok, I said I won’t do the why-not, but there is a feeling that puppet, chef, etc., are over-designed for the jobs they do.*) In an open-source project like OpenEBS, a need to build a template for the contributors to write their own test workflows without spending too much time was an important consideration.\r\n\r\n**Idempotency**: The ansible playbook (a set of tasks written using the modules mentioned previously) when run twice gives the same end result. This is a great help when it comes to reusing testbeds.\r\n\r\n**Speed of execution**: One of the benefits of having an agent-less architecture (apart from a complexity-free install and usage experience), ansible playbooks zip through configuration, and other “system” tasks (mostly, test logic) fairly fast. While there are supposedly issues at scale (1000s of nodes), it works just great for our needs. Want to setup a working Kubernetes cluster with OpenEBS storage on-premise in less than 20 min? — check out the playbooks on our [github repo](https://github.com/openebs/openebs/blob/master/e2e/ansible/openebs-on-premise-deployment-guide.md)\r\n\r\n**Rich module library**: Ansible has modules for most things under the sun 😐 Nuff said, go look : [Ansible modules](http://docs.ansible.com/ansible/latest/modules_by_category.html)\r\n\r\n(*As an aside, this was one of the other reasons why we started using ansible as a test engine, apart from the infrastructure angle*)\r\n\r\n**Plugins**: While ansible is great for configuration management, workflow orchestration, etc., it needs to be able to work well with other tools/frameworks that make up the CI-CD pipeline( Jenkins, Vagrant, etc.,) And all these have ansible plugins (How much we use them is a topic for another day, but the point is ansible does have integration if you choose to utilize it). More important than existing integrations is the ease with which you can extend ansible’s capabilities with custom plugins. Python was a dev + ops favourite, even before DevOps became a fad and ansible is built using it -so, there you go!\r\n\r\n**Community**: One of the ansible’s biggest strengths is its community. We discussed extending ansible’s capabilities via custom plugins. Chances are you never have to write one, because the community already has two versions of it (*okay, I may be exaggerating*), but the active community makes it a lot easier to adopt. There is a lot of documentation available as well. All of this means, for most purposes, you don’t have to opt for paid support for issues OR add-ons until you really scale or get complex.\r\n\r\n## How are we using Ansible?\r\n\r\nAt OpenEBS, we are using Ansible as :\r\n\r\na) A means to enable rapid deployments of applications in user environments. Today, you can use our Ansible playbooks to get a Percona MySQL server instance or a PostgreSQL statefulset up and running with OpenEBS storage on-premise from plain vanilla VMs in double quick time, with single command execution. Even as I write this, efforts are underway to create playbooks to perform such deployments on the cloud, right from provisioning VM instances to running test loads to verify setup stability.\r\n\r\nb) As a “***test orchestrator***”, i.e., for provisioning testbeds, executing test logic, and notifying users. That doesn’t mean we have stopped writing shell scripts or python scripts in QA (there are still functions which one might have to execute via shell or the ansible “shell” module or python, due to lack of actual ansible modules. Not to mention existing scripts which one wouldn’t bother converting into playbooks).\r\n\r\nOur current CI workflow involves a Jenkins master polling for updates to git repos, followed by bringing up VMs on-premise using vagrant, configuring those using ansible, followed by execution of test playbooks and user notification on slack. The CI is still evolving and efforts are on to make it more robust — you could join the OpenEBS-CI [slack channel ](http://slack.openebs.io/) & browse the [github pages](https://github.com/openebs/openebs/tree/master/e2e) if you are an enthusiast/would like to contribute!\r\n\r\nIn forthcoming blogs, I would like to discuss more on the “***How***” and share thoughts, challenges, solutions around using ansible both as a preferred application deployment mechanism as well as a “test orchestrator”.\r\n\r\nThanks for reading !!\r\n","slug":"ansible-openebs-the-whys-and-hows"},{"id":89,"title":"Are you afraid of Go?\r","author":"Amit Kumar Das\r","author_info":"Engineer the DAO\r","date":"27-07-2017\r","tags":["Docker"," Go"," Openebs"," Programming Languages"," Programming Tips"," Tutorials"],"excerpt":"Are you an experienced C programmer or perhaps an adept Java hacker finding Go somewhat awkward to deal with.\r","content":"\r\nAre you an experienced **C** programmer or perhaps an adept **Java** hacker finding [**Go**](https://github.com/golang/go/wiki/whygo) somewhat awkward to deal with? There may be different elements of surprise or familiarity based on the programmer’s background e.g a Java programmer may relate the GOPATH settings with the settings associated with JAVA_HOME. On a similar note, the very same programmer might be surprised with Makefiles that are used to script the compilation, build & other stuff. I am sure though that this experience will be different for a seasoned C programmer.\r\n\r\nIf the above and perhaps multiple other reasons inhibit you from familiarising yourself with Go then you are not the only one. The best thing is there is a similar number of solutions that will help you play along with the Go pitch.\r\n\r\nGoing back in time, this thorny feeling was exactly what we had faced when we started [***OpenEBS***](http://openebs.io) development a year back. However one of the core goals of *OpenEBS* is ease of use; whether it is for the admin or the operator or the developer, tester, and so on. In other words, different personas involved during the Software Life cycle, Deployment & Maintenance should not go through a learning curve and rather experience *OpenEBS* as the simplest form of storage software that cuts through all the storage noise. This meant we did not want Go or any other programming language, as a matter of fact, to limit our way towards this enlightened journey.\r\n\r\nDuring those days we implemented some of the strategies that helped nullify the above pain points and provide a smooth cruise to all current & future contributors of *OpenEBS*. This article will focus on our strategies meant for the newbies trying to get their hands dirty with Go.\r\n\r\n***I have itemized our strategies as these steps:***\r\n\r\n1. Start your baby steps at GO [**Playground**](https://play.golang.org/). This will remove the initial hassles of downloading Go and setting up GOPATH & stimulate you towards coding (read *familiarising with the newer syntax*) & start believing the language by viewing & analyzing the output expected from your logic i.e. *WYSIWYG*.\r\n2. Get familiar with [**Vagrant**](https://www.vagrantup.com/) (*I understand this is a different tool & is in no way related to Go programming*). Vagrant with its pitch for ‘*Development Environments Made Easy*’ will help you to set up VMs which has all the necessary Go based downloads and GOPATH settings. One can search for simple open-source projects that does below:\r\n\r\n**a**.Vagrantfile that makes use of some sample Go programs (probably scripting a *git clone to <some-github-url>*), &\r\n\r\n**b**. Makefiles that have the logic to compile & build.\r\n\r\nThere is one catch though! One has to install Vagrant & a preferred Hypervisor to enjoy the benefits of Step 2. So there is a bit of a learning curve involved.\r\n\r\n***However, this should not deter one to avoid Step 2, as it has huge benefits going forward. You will appreciate this step once you understand the difficulties in managing projects with their right versions and dependencies. A trivial mistake here will lead to bug injections. This step will rather help you enjoy the taste of CI right from your laptop.***\r\n\r\nAfter gathering enough confidence via these steps one can try out fancier stuff. Does ***running the builds in Travis*** or ***compiling the source code in a Docker container*** challenge you. You might as well explore some of this stuff & others in our [**tool-room**](https://github.com/openebs).\r\n\r\nThere may be various other options (*probably even simpler ones*) available in this '**DevOps**' world that are not mentioned here. E.g. [**GVM**](https://github.com/moovweb/gvm). However, I have tried to list down the game plans that have worked well for us. Do get back with your valuable insights on how you have succeeded to tame the initial apprehensions while trying out a new language.\r\n","slug":"are-you-afraid-of-go"},{"id":90,"title":"Tech Enthusiasts weighing in on Container Native Storage\r","author":"Kiran Mova\r","author_info":"Contributor and Maintainer OpenEBS projects. Chief Architect MayaData. Kiran leads overall architecture & is responsible for architecting, solution design & customer adoption of OpenEBS.\r","date":"27-07-2017\r","tags":["Docker"," Game of Thrones"," Openebs"," Reddit"," Statefulcontainers"],"excerpt":"These redditers are like the nights-watch-men (Operations Team) who are guarding the wall (production services) from army of dead (issues).\r","content":"\r\n*Full disclosure: I contribute to OpenEBS and I relish GoT (not IoT).*\r\n\r\n*This post is inspired by the *[*Reddit thread (r/Docker)*](https://www.reddit.com/r/docker/comments/6l0y3v/persistent_storage_with_docker_in_production/)* discussing implementation approaches for Stateful Containers.*\r\n\r\nThese redditers are like the nights-watch-men (Operations Team) who are guarding the wall (production services) from army of dead (issues). These redditers are akin to “the tech Enthusiasts” as depicted in the following diagram, who can foresee the challenges and are looking for innovative solutions.  \r\n\r\n![Container native storage adaption curve](https://cdn-images-1.medium.com/max/800/1*11EOWUuoRjWn8pZ1uMXidg.png)\r\n\r\nWith S-less (server and state) architectures on the rise and faster networks at every possible endpoint, we can envision building and deploying services that can scale to yet unseen/unknown/unimaginable magnitude, **but!** (*Ned Stark once told me, that anything said before but*, ..*a GoT in-joke*) **State will be the bottleneck.**\r\n\r\nWhatever you do with Compute (S-less) containers, you always need to start and end with Data. Data is State. *State — is the beginning and end! the Alpha and Omega!*\r\n\r\nS-less will have no (busine$$) value without State! (*Well, agreed that you can offload the maintenance of State to someone else. But at what cost! Whoever owns the data, owns the $$*)\r\n\r\nThe real question is where to put the State!\r\n\r\n*Probably over-simplifying, but we can save the State using one of the following:*\r\n\r\n- *Connected Storage — Further divided into File/Block*\r\n- *Container Native Storage*\r\n\r\n**Connected Storage**: save the State external to container hosts and use the Orchestrator Volume Plugins to attach/detach storage from SAN/NAS or Cloud Disks.\r\n\r\nThere is a huge community (of cash rich vendors, a.k.a Roses, and Lions!) and a majority of enterprises (consumers of storage) locked in with these vendors are working on making this option succeed.\r\n\r\nThese enterprises are stuck with Roses or Lions not because they love them, but these are the only options that are available to them. This reverberates in the comments of the Reddit thread, here is a gist of the views expressed:\r\n\r\n(a) Connecting to NFS or EFS (from AWS)\r\n\r\nApplied Use Cases:\r\n\r\n- Applications that store data in the file — images or text or backup\r\n- Applications that need shared access to the data from multiple containers, running on different hosts.\r\n\r\nConcerns:\r\n\r\n- Hard to keep up with the performance and capacity needs of the massively scalable applications\r\n- Seeing Performance Issues — when saving a huge number of small-sized files\r\n- Need to be careful about Data Integrity from shared access. Needs a lot of hand-holding for secured access\r\n- Not a good option for databases or high random write workloads\r\n\r\n(b) Connecting to SAN or Cloud Disks (attached locally)\r\n\r\nApplied Use Cases:\r\n\r\n- Applications that are resilient to underlying storage failures like ElasticSearch/Cassandra\r\n- Databases like Percona/PostgreSQL\r\n\r\nConcerns:\r\n\r\n- Longer re-build times and degraded windows, as the size of the data increases.\r\n- Connecting one LUN per Container increases the boot-up times up to 10 minutes in worst cases\r\n\r\n*Roses and Lions have been there for a very long time, fighting for the dominion of the realms, by any means necessary. But these are summer lands. They are not prepared for the Great Winter that has begun in the North.*\r\n\r\nThe “tech Enthusiasts” (or the nights watch) have seen the challenges that the massively scaled applications (Winter) can bring and are seeking alternate options.\r\n\r\nA handful of vendors like [portworx](https://t.co/Aawo9fr4Dz), [storage_os](https://storageos.com/), [rook](https://rook.io/), [openebs](https://www.openebs.io/) are working on alternate options, what is now being termed as [Cloud Native Storage](https://blog.openebs.io/cloud-native-storage-vs-marketers-doing-cloud-washing-c936089c2b58) or [Container Native Storage](https://storageos.com/storageos-vision-cloud-native-storage-todays-modern/).\r\n\r\n*While the blogs above (and many others) dwell into what makes a storage container-native, the one that stands out is — ***the flexibility***.*\r\n\r\n*The tech enthusiasts/operations personnel will have the choice of technology used to deliver their services like Kubernetes, DockerSwarm, Mesos — on Google, Amazon, Azure, or Private Cloud with storage that integrates seamlessly with these cloud environments.*\r\n\r\n**Container Native Storage:** storage controller functionality is containerized and can co-exist with the containers (even fly with them) across the clouds.\r\n\r\nPortworx is leading the pack, has been successful in getting some reference customers (*we are yet to hear from them in the open forums — hard to convince the council at kings landing with just a reference!*)\r\n\r\nSome of the apprehensions surrounding this option are:\r\n\r\n- writing a new storage layer is hard.\r\n- missing some standard benchmarking tools that can clearly demonstrate the performance boost obtained by this relatively new way of provisioning storage.\r\n- there are questions raised about Rook / CEPH performance for DBs\r\n- dependency on the kernel drivers (this is probably hinting at PortWorx, if I read, between the lines/comments).\r\n\r\n*Winter is Here My Lord — We need new alliances!* We need to hear from more Operations and DevOps Personnel grappling with the storage issues.\r\n\r\nWe need them to spend more time towards sharpening the solutions that are being built for containers using containers in Open Source!\r\n\r\nDo contribute and earn your Open Source Karma by weighing in your thoughts at this *[Reddit thread (r/Docker)](https://www.reddit.com/r/docker/comments/6l0y3v/persistent_storage_with_docker_in_production/) or at [OpenEBS Slack](http://slack.openebs.io/) or at the [GitHub/Container-Storage-Interface](https://github.com/container-storage-interface/spec)*\r\n","slug":"tech-enthusiasts-weighing-in-on-container-native-storage"},{"id":91,"title":"OpenEBS building Go Storage Kit Project — Maya\r","author":"Satyam Zode\r","author_info":"Go Developer @openebs | Open Source Contributor | Avid Learner\r","date":"25-07-2017\r","tags":["Golang"," OpenEBS"," DevOps"," Container Orchestration"],"excerpt":"I attended GopherCon India 2017, there was a talk on “Package Oriented Design In Go” by William Kennedy. In that talk, William explained some really important and thoughtful design principles which we can apply in our day-to-day life, while writing Go.\r","content":"\r\n## Motivation\r\n\r\nI attended [GopherCon India](http://www.gophercon.in/) 2017, there was a [talk](https://youtu.be/spKM5CyBwJA?list=PLFjrjdmBd0CoclkJ_JdBET5fzz4u0SELZ) on “Package Oriented Design In Go” by [William Kennedy](https://twitter.com/goinggodotnet). In that talk, William explained some really important and thoughtful design principles which we can apply in our day-to-day life, while writing [Go](https://golang.org/project/). I have attempted to absorb some of the design philosophies I learned at GopherCon into practice at [OpenEBS](https://github.com/openebs). At [OpenEBS](https://github.com/openebs), as an open-source and growing Go project, We value Go principles and We try hard to leverage Go’s offerings.\r\n\r\nBriefly, OpenEBS is a [container-native storage](https://blog.openebs.io/cloud-native-storage-vs-marketers-doing-cloud-washing-c936089c2b58) that is built from containers for enabling stateful containers to get into production. Being container-native, OpenEBS augments the Container Orchestration (CO) Layers like Kubernetes, DockerSwarm, Mesos, etc., with Storage Specific Orchestration capabilities using “Maya” — Magic! I contribute mainly towards the “Maya” — which is a set of containerized control plane applications for hooking into several modules like the configuration, monitoring, and alerting of CO.\r\n\r\n## What is the Go Kit Project?\r\n\r\nTo understand in plain terms, let us take an example where we end up writing the same Go packages, again and again, to do the same task at different levels in the different Go projects under the same organization. We are all familiar with the custom logger package in the different Go projects.\r\n\r\nWhat if, the custom logger package is the same across the organization and can be reused by simply importing it, then this custom logger package is the perfect fit for the Kit project. The advantages of this approach go beyond avoiding duplicate code, improved readability of the projects in an organization, to savings in terms of time and cost as well :-)\r\n\r\nIf you go through Bill’s talk, you will notice that the Kit project is characterized by Usability, Purpose, and Portability. In this blog, I will discuss how I have applied the refactored code to use the “Kit Project” pattern for maya.\r\n\r\n## How to convert existing projects to have “kit”\r\n\r\nOpenEBS being a container-native project is delivered via a set of containers. For instance, with OpenEBS 0.3 release we have the following active maya related projects:\r\n\r\n1. openebs/maya aka ****maya-cli**** : is the command-line interface like kubectl for interacting with maya services for performing storage operations.\r\n2. openebs/mayaserver : or ****m-apiserver**** abstracts a generic volume API that can be used to provision OpenEBS Disks using containers launched using the CO like K8s, nomad, etc.,\r\n3. openebs/****openebs-k8s-provisioner**** : is the K8s controller for dynamically creating OpenEBS PVs\r\n\r\nWith these projects, we are already seeing how code gets duplicated when each of these projects is independently developed. For example *maya-cli* and *openebs-k8s-provisioner* both need to interact with *maya-apiserver*, which resulted in maya-apiserver-client code being written in *maya-cli* and *openebs-k8s-provisioner*. Similarly, *openebs-k8s-provisioner* and *maya-apiserver* have duplicated code w.r.t to accessing the K8s services.\r\n\r\nTo avoid this duplicity of code using the kit project, we are transforming OpenEBS/maya into a Kit project for the Application projects like [maya-apiserver](https://github.com/openebs/mayaserver), openebs-k8s-provisioner, and many more coming up in the future. openebs/maya contains all the kubernetes & nomad APIs, common utilities, etc. needed for the development of maya-apiserver and maya-storage-bot. In the near future, we are trying to push our custom libraries to maya. So that, it will become a promising Go kit project for the OpenEBS community.\r\n\r\nLets now see, how maya (as a kit project) adheres to the package oriented design principles:\r\n\r\n- ****Usability****  \r\nWe moved common packages such as orchprovider, types, pkg to maya from maya-apiserver. These packages are very generic and can be used in most of the Go projects in the OpenEBS organization. Brief details about new packages in Maya.\r\n1. Orchprovider: orchprovider contains packages of different orchestrators such as Kubernetes and nomad.\r\n2. types: types provide all the generic types related to orchestrator.\r\n3. pkg: pkg contains packages like nethelper, util, etc.\r\n4. volumes: volumes contain packages related to volume provisioner and profiles.\r\n- ****Purpose****  \r\nWhile the Packages in the Kit project are categorized as per the functionality, the naming convention should ideally provide the reader with the information on what the package “provides”. So, the packages (in the kit project) must provide, not contain. In maya, we have packages like types, orchprovider, volumes, etc. name of these packages suggests the functionality provided by them.\r\n- ****Portability****  \r\nPortability is an important factor for packages in the kit project. Hence, we are making maya in such a way that it will be easy to import and use in any Go project. Packages in the Maya are not a single point of dependency and all the packages are independent of each other. For example, types directory contains versioned Kubernetes and Nomad packages. These packages are simply importable to any project to use Kubernetes and Nomad APIs.\r\n\r\n## Example usage of maya kit project\r\n\r\nMaya-apiserver uses maya as a Kit project. Maya-apiserver exposes OpenEBS operations in form of REST APIs. This allows multiple clients e.g. volume-related plugins to consume OpenEBS storage operations exposed by Maya API server. Maya-apiserver will use volume provisioner as well as orchestration provider modules from Maya. Maya-apiserver will always have HTTP endpoints to do OpenEBS operations.\r\n\r\nSimilarly, openebs-k8s-provisioner will use the maya-kit project Kubernetes API to query for details about the Storage Classes, etc.,\r\n\r\nAnother usage is of the maya-kit project, maya-apiserver client that is accessed by maya-cli as well as the openebs-k8s-provisioner to talk to maya-apiserver.\r\n\r\n## Conclusion\r\n\r\nGo Kit project should contain packages that are usable, purposeful, and portable. Go Kit projects will improve the efficiency of the organization at both human and code levels.\r\n","slug":"openebs-building-go-storage-kit-project-maya"},{"id":92,"title":"Cloud Native storage vs. marketers doing Cloud Washing\r","author":"Evan Powell\r","author_info":"Founding CEO of a few companies including StackStorm (BRCD) and Nexenta — and CEO & Chairman of OpenEBS/MayaData. ML and DevOps and Python, oh my!\r","date":"18-07-2017\r","tags":["Cloud Native"," DevOps"," Docker"," Kubernetes"," Openebs"],"excerpt":"Let’s try to protect the phrases Cloud-Native storage and Container Native storage; or maybe we should start using a yet more specific phrase such as Containerized Storage for Containers\r","content":"\r\nSome years ago, back when I was founding CEO of Nexenta during our high growth days, I tried to bring some rigor to the discussion around “software-defined storage” by setting out a definition. My basic point was that it wasn’t enough for storage to have APIs of some sort and hence to be able to be controlled by software -> in addition the storage ought itself to *be software*, and hence be able to be provisioned as software and so forth.*1*\r\n\r\nI wrote those blogs setting out a definition for software-defined storage because I was disgusted by the number of legacy storage vendors that went from denying that software-defined storage was a thing to, almost overnight, claiming that they *already did* software-defined storage. The risk was that the large sales and marketing budgets of legacy vendors would drown out the innovative companies that were actually building software that delivered on the benefits of software-defined storage thanks to, you know, *actually being software-defined*.\r\n\r\nFast forward 6 or 7 years and — **here we go again!**\r\n\r\nThis time we are seeing “Cloud Native storage” as a term being abused along with “Container Native storage.” Logically Cloud Native storage should be storage software that itself is, you know, *Cloud Native*. And that term is defined by people far smarter than me, however typically it includes some sense of microservices, and [12-factor approaches](https://12factor.net/), and the ability to consume cloud services. One great and lengthy definition of the term is explained by the inestimable Joe Beda [here](https://blog.heptio.com/cloud-native-part-1-definition-716ed30e9193).\r\n\r\nWe are even seeing Cloud Native storage applied to *any storage that serves Cloud Native applications*. Thanks to the work of Docker and Kubernetes and others, nearly any storage *can* serve storage for containers — albeit in a way that typically requires the user to change the way that they run the containers that are attached to the underlying storage to such an extent that many of the benefits of containerization are lost; I talk more about benefits of truly container-native storage below. Calling hardware based storage that ties into a Kubernetes environment via plug-ins “Cloud Native storage” is absurd and yet it is starting to happen. Such storage is no more Cloud Native than any legacy monolithic application is “Cloud Native” just because you’ve been able to cram it onto a container somehow.\r\n\r\nSpeaking of cramming monolithic apps into containers, if you have a famously difficult to manage monolithic storage solution that you cram onto a container or two — even if you integrate it nicely into Kubernetes or other Cloud Native environments — what you have maybe useful however it is NOT Cloud Native. Because, you know, it predates 12 factor and cloud-native approaches to building software by many years and, as such, is no more Cloud Native than ye old SAP or other traditional n tier app.\r\n\r\nAhh, that feels better.\r\n\r\nBut you might ask — *so what*? What’s the big deal about marketers abusing the English language for their own ends and distorting the definition of Cloud Native storage?\r\n\r\nWell, that comes down to whether we believe that the benefits of Cloud Native applications could apply to building storage software in a cloud-native manner. Is what’s good for the goose, good for the gander? Is Cloud Native storage even a term worth fighting over? Could a truly Cloud Native storage solution deliver benefits much as other Cloud Native software does?\r\n\r\n![Picture showing gooses](/images/blog/goose.png)\r\n\r\n**Let’s all be cloud native like the whale: goose, gander, OpenEBS mules, and friends**\r\n\r\nWell, why wouldn’t benefits such as:\r\n\r\n- better resiliency\r\n- better resource utilization\r\n- innate horizontal scalability\r\n- ease of troubleshooting\r\n\r\nand other benefits that apply to decomposed microservice based applications (aka “Cloud Native”) apply to software that is delivering storage?\r\n\r\nPerhaps just as importantly, wouldn’t the teams and communities that are building the software be able to be better organized — themselves loosely coupled and able to *DevOps on* — than those that are working on monolithic software? [Conway’s Law ](https://en.wikipedia.org/wiki/Conway%27s_law)does seem to be a major reason for the success of Cloud Native and microservices.\r\n\r\nThe benefit of that better team organization in my experience can be massively greater developer productivity. As many have pointed out, the productivity of developers in high performing DevOps / Microservices organizations is far, far superior; these developers deliver usable code 10–100x more quickly than developers stuck building to long release cycles with massive dependencies.\r\n\r\nSo, in short, here is my request of you. Just as we have been so careful in (not entirely successfully) protecting the term DevOps, let’s try to protect the phrases Cloud Native storage and Container Native storage; or maybe we should start using a yet more specific phrase such as ***Containerized Storage for Containers*** (warning, that’s a term we coined at OpenEBS). Otherwise, we risk polluting everyone’s efforts for a better way to build and run software in a Cloud Native way with marketing BS.\r\n\r\n1. (note — as I’ve tried to [explain elsewhere](https://blog.openebs.io/software-defined-storage-finally-37fdffc0e37c), much of what we hoped to achieve with software-defined storage is only now being enabled, largely thanks to Kubernetes and other open orchestrators and containers as well).\r\n","slug":"cloud-native-storage-vs-marketers-doing-cloud-washing"},{"id":93,"title":"Container Native Storage builds its High Availability in style\r","author":"Amit Kumar Das\r","author_info":"Engineer the DAO\r","date":"17-07-2017\r","tags":["Docker"," High Availability"," Kubernetes"," Openebs"," Storage"],"excerpt":"Infrastructure components are the toughest to build. It is meant to work always by default. \r","content":"\r\nInfrastructure components are the toughest to build. It is meant to work always by default. It must be telecom grade as scores of applications rely on the infra component’s zero downtime, no deterioration in QoS, etc. However, we all know software has got defects and it is no different for infrastructure software components as well. One of the things the software can do is implement high availability as its core feature and somehow buy time (by the virtue of HA) when one of these components experiences a breakdown due to defects or otherwise.\r\n\r\nImplementing the HA piece seems to be the elixir to all the unforeseen issues. Is that so simple then? Programmers who have built the HA in the past will swear to its complexity. It is another piece of software logic that is very difficult to get right the first time or even after a couple of major releases.\r\n\r\n> The non HA programmer can have the flexibility to err. Well, a programmer is supposed to be a human after all. However, this option is ruled out for the HA logic implementer.\r\n\r\nHaving said this, implementing high availability logic in a '*Container Native*' software solution has reasons to cheer. Most of the container orchestration platforms have abstracted the scheduling, placements, evacuations, prioritized jobs, and whatnot and thus have freed the average programmer from these overwhelming tasks.\r\n\r\nAll of a sudden, programming becomes fun again (*HA logic becomes more like placing the [lego](https://en.wikipedia.org/wiki/Lego) blocks in a fashion/pattern to get your favorite character into action*).\r\n\r\nProgrammers now need to build the required HA logic by tying together appropriate placement components that result in a customized HA solution. We at OpenEBS [***toolroom***](https://github.com/openebs/) have been trying to maximize the offerings provided by [*Kubernetes*](https://kubernetes.io/) towards achieving a true container-native solution for OpenEBS high availability. All the advancements in Kubernetes will make OpenEBS better and the scenarios handled by OpenEBS (*which will never be simple*) can become a point of reference in Kubernetes.\r\n\r\nLet’s get into some storage specific HA basics:\r\n\r\n1. A typical persistent storage solution would require its data to be replicated across hosts within a cluster. There are also cases, where the production scenarios demand this replication to be across geographies. In addition, hybrid cases require some replicas to reside within the cluster while other replicas to be placed across zones, regions, etc.\r\n2. Since storage solutions derive their power from their underlying hardware resources, it makes sense to earmark exclusive hardware for storage components. In other words, the host(s) would want to avoid software components that are not storage specific.\r\n3. Solutions around placements alone are not sufficient for storage software to be highly available. There can be cases where a storage controller does not support active-active mode. Now relying just on placements can not avoid application outages due to these storage hiccups (*i.e. storage protocol connection breaks resulting in breakdown of the applications consuming this storage*). The evacuation should be fast & its new placement cannot take any time longer. Appropriate policies should be in place to let these storage components be evacuated early before the application components. This becomes more essential during a node crash where every component will fight for survival.\r\n4. Storage HA cannot rely on half-baked evacuations that may lead to split-brain conditions. Storage should either be evacuated or be let to die along with the crash. There should be no cases of hangs, stalls, freezes, you name it. There can be only one option & that is:\r\n\r\n***100% successful evacuation as well as 100% successful re-scheduling.***\r\n\r\nIn some cases, 100% successful evacuation might imply the use of the logic called [**stonith**](https://en.wikipedia.org/wiki/STONITH) before boarding the re-schedule flight.\r\n\r\nWith the above HA basics (*you may like to call it hardships*) in our mind let us find if the most popular container orchestrator has any feature, policy, etc that can simplify HA in storage. While looking at Kubernetes (version 1.7) I could find a couple of policies that can help storage build its HA story with ease.\r\n\r\n> One: ‘Node affinity’ is a feature that constrains which nodes your pod is eligible to schedule on, based on labels on the node.\r\n\r\n> Two: ‘Inter-pod affinity and anti-affinity’ is a feature to constrain which nodes your pod is eligible to schedule on based on labels on pods that are already running on the node rather than based on labels on nodes.\r\n\r\n> Three: ‘Taints and tolerations’ work together to ensure that pods are not scheduled onto inappropriate nodes. One or more taints are applied to a node; this marks that the node should not accept any pods that do not tolerate the taints. Tolerations are applied to pods, and allow (but do not require) the pods to schedule onto nodes with matching taints.\r\n\r\nDoes the above sound familiar? It does not introduce any new jargon except for the term 'Pod' and perhaps 'Labels'. A pod is a logical concept for a container or bunch of containers while labels can be understood as tags. Now if our persistent storage is really a piece of software that runs from within a container all the properties that Kubernetes exposes can be applied against this storage software & let it construct (or extend or even plug) its 'High Availability' feature.\r\n","slug":"container-native-storage-builds-its-high-availability-in-style"},{"id":94,"title":"Test Driven Development — The DevOps Way\r","author":"Amit Kumar Das\r","author_info":"Engineer the DAO\r","date":"13-07-2017\r","tags":["Docker"," Kubernetes"," OpenEBS"," TDD"," Software Development"," DevOps"],"excerpt":"TDD is the abbreviated form for `Test Driven Development`. It might also be true in-case of newbies to have never heard of TDD in the current season where DevOps, NoOps, DataOps, ML, IOT rule the roost.\r","content":"\r\nWe might have all heard of TDD, don’t we? TDD is the abbreviated form for 'Test Driven Development'. It might also be true in case of newbies to have never heard of TDD in the current season where DevOps, NoOps, DataOps, ML, IOT rule the roost.\r\n\r\nTDD in simpler terms would be planning and implementing test logic before implementing its development logic. However, I find it very difficult to do this in practice. What I do instead is a little bit of planning & start building the development logic. In the next iteration, I would start writing corresponding test logic i.e. unit test programming (*remember those jUnit days*).\r\n\r\nReaders may still be wondering how “*DevOps is related to TDD*”. Well, here it is:\r\n\r\n> *How about using the best of DevOps tools towards TDD implementation?*\r\n\r\nThe logic behind this is no brainier.\r\n\r\n> I find the very best of the open-source community busy in building & tuning tools old & new that are meant to satisfy DevOps culture & practices.\r\n\r\nIt makes sense for us to use these tools that meet our TDD needs.\r\n\r\nThe question that might be lingering now would be about DevOps vis-a-vis TDD. ***Is TDD not part of DevOps culture***? The answer is an emphatic yes. However, I am trying to pick up one thread at-a-time from the DevOps culture/practice. That thread here is TDD & is the focus area for this article. I would like to emphasize that TDD does not necessarily mean unit testing. It can be thought of as applying test logic, scenarios, etc as the team continues with its development efforts, that in-turn brings in changes, discoveries, ideas in test as well as in development. ***To sum it up, it tries to remove the pain associated with latter stage design changes*** In addition, the team is ***no more afraid*** of new features, bug fixes, requirement changes, etc. due to the presence of test logic that gets triggered due to any of these changes.\r\n\r\nHope to talk again about some tangible implementations we are doing in [OpenEBS](https://blog.openebs.io/). I would end the story here with a tip.\r\n\r\n> *The popular currency of current age DevOps’ tooling is Docker & Kubernetes.*\r\n","slug":"test-driven-development-the-devops-way"},{"id":95,"title":"OpenEBS on the Growth Path! Releases 0.3\r","author":"Kiran Mova\r","author_info":"Contributor and Maintainer OpenEBS projects. Chief Architect MayaData. Kiran leads overall architecture & is responsible for architecting, solution design & customer adoption of OpenEBS. \r","date":"29-06-2017\r","tags":["Jupyter Notebook"," Kubernetes"," OpenEBS"," Postgresql"," Storage Containers"],"excerpt":"It gives me immense pleasure to watch this baby (OpenEBS) successfully cross another milestone with its 0.3 release. \r","content":"\r\nIt gives me immense pleasure to watch this baby (OpenEBS) successfully cross another milestone with its 0.3 release. OpenEBS 0.3 not only marks the delivery of additional functionality but also comes with an all-rounded growth.\r\n\r\nThanks to our growing community (as depicted in the diagram below), we have had great conversations with thought leaders in the container world, who are constantly looking for ways to simplify the usage of Containers and Container Orchestrators. We seem to have hit a sweet spot in terms of what we set out to deliver with OpenEBS, which is resonating loud and clear with anyone, who is venturing to run persistence workloads in containers.\r\n\r\n![OpenEBS community tracker](https://cdn-images-1.medium.com/max/800/1*wnMG__-zl8yO06f7AAJh5w.png)  \r\n\r\nWhile we have seen steady growth in the followers/subscribers on our community channels, we have also seen steady growth in the contributors to the project and we are happy to announce that we have been able to expand our team members at CloudByte(from across the world), to work full-time on OpenEBS.\r\n\r\nSignificant functionality changes include:\r\n\r\n- OpenEBS Storage Containers (VSMs) are completely orchestrated and managed via Kubernetes.\r\n- VSMs seamlessly work with your preferred pod networking\r\n- OpenEBS supports dynamic provisioners like EBS and GCP\r\n- *maya*, the Storage CLI can be used to fetch granular IO usage statistics similar to your Amazon Cloud Watch\r\n\r\nAdditional changes can be looked up at our [OpenEBS Project Tracker](https://github.com/openebs/openebs/wiki/Project-Tracker).\r\n\r\nWe are very attentive towards making the onboarding experience as smooth and simple as possible. OpenEBS 0.3, fully integrates into Kubernetes, allowing you to use OpenEBS storage on your existing Kubernetes using the following simple commands:\r\n\r\n---\r\n\r\n`kubectl apply -f openebs-operator.yaml` \r\n`kubectl apply -f openebs-storageclasses.yaml`\r\n\r\n---\r\n\r\nThe YAML files can be downloaded from [here](https://github.com/openebs/openebs/tree/master/k8s). If you don’t have an existing Kubernetes cluster, you can easily set it up using our [vagrant box](https://blog.openebs.io/multi-node-kubernetes-1-6-cluster-provisioning-made-easy-using-sandbox-vagrant-box-53dfc2ecc3cd). Detailed instructions for running OpenEBS on GKE can be found [here](https://github.com/openebs/openebs/blob/master/k8s/hyperconverged/tutorial-configure-openebs-gke.md). You could also use our [Ansible Playbooks](https://github.com/openebs/openebs/blob/master/e2e/ansible/openebs-on-premise-deployment-guide.md) to setup Kubernetes cluster with OpenEBS storage on-premise on physical servers OR virtual machines.\r\n\r\nWe also have (with the help of the community) focused efforts in providing [examples](https://github.com/openebs/openebs/tree/master/k8s/demo) of persistence work-loads. In the current release, we are happy to provide the following:\r\n\r\n- Clustered PostgreSQL Setup (inspired from [CrunchyData](https://www.crunchydata.com/))\r\n- Containerized Jupyter Notebooks (inspired from [kensu.io](http://www.kensu.io/))\r\n\r\nThe growth, in terms of the distributed teams, comes with the challenges of collaboration and maintaining the quality of the commits. One of our focuses with OpenEBS release 0.3 has been to augment our repositories with the tools that keep a watch on the code and product quality — we are now fully integrated with Travis, Codecov, GoReport and have built Ansible Playbooks for running CI via Jenkins.\r\n\r\n---\r\n\r\nAs we accelerate towards our enterprise version of the product towards the end of this year, we are all excited about the immediate milestones w.r.t:\r\n\r\n- Flush-out the details of Storage Infrastructure as Code (single source of truth)\r\n- Integrating into Container Monitoring Frameworks\r\n- Providing a UI\r\n- Optimize for high performance storage and networking infra.\r\n- Provide additional examples of Persistence Workloads that make use of the Application aware intelligence provided by OpenEBS\r\n\r\nWe always love to hear from you and what you think are the biggest storage operations pain points that you want to see eliminated. Do drop into our *[Slack Channel](http://slack.openebs.io) or stay connected with us via our other channels [Twitter](https://twitter.com/openebs), [GitHub](https://github.com/openebs/openebs/)*.\r\n","slug":"openebs-on-the-growth-path-releases-03"},{"id":96,"title":"Storage infrastructure as code using OpenEBS\r","author":"Uma Mukkara\r","author_info":"Contributor at openebs.io, Co-founder & COO@MayaData. Uma led product development in the early days of MayaData (CloudByte).\r","date":"29-06-2017\r","tags":["Containerised Storage"," DevOps"," Kubernetes"," Openebs"," Stateful Applications"],"excerpt":"With a vision to become de-facto block storage choice for stateful container applications, OpenEBS brings out many unique features to the open source storage space. \r","content":"\r\nWith a vision to become de-facto block storage choice for stateful container applications, OpenEBS brings out many unique features to the open-source storage space. One of the unique features that I talk about in more depth in this blog is “how storage platform builders and storage platform users can manifest their requirements as code using OpenEBS”.\r\n\r\nWith all the agility in Container and DevOps space, we are moving towards the thinking — “using infrastructure components such as network and storage for the application development should not be external to application development”. What I mean by this is, just like you write the code for your applications, you should be able to write some code or configuration for obtaining the storage and network infrastructure and you should get it.\r\n\r\n#### The YAML: Infrastructure coding language\r\n\r\nIn the paradigm of infrastructure as code, YAML is becoming the default coding language. Thanks to the increasing usage of YAML config files by the DevOps eco-system, they are becoming the default developer language to write the infrastructure code for the application development.\r\n\r\nSo, let us see what are the areas in which storage as infrastructure has to be thought in terms of code? This can be answered using the angle of who interacts with storage or the user persona. The simple answer would be the application developer and storage platform engineer. Next, what are the challenges today for a developer of a stateful application and the developer or engineer of an underlying persistent storage platform? In short, the developer needs\r\n\r\n- Some amount of persistent storage\r\n- With guaranteed availability\r\n- With guaranteed latency\r\n\r\nThe developer needs to quantify the amount of storage and the latency levels, which is a challenge always. The developer always starts with a guesstimate and refines later. The guaranteed availability is a characteristic of the underlying storage platform, but the developer may still need to decide some aspects related to the availability such as “how many copies of the data is needed, how often backups are to be taken, etc”. All these decisions to be taken by the developer, bring in the need for storage expertise or knowledge to the application developer, which usually is an additional burden to the developer. Traditionally, these decisions are taken by storage administrators who are adjacent to the application developers, creating a gap between what is needed and what is available. As the application scales, this gap widens, the application fails. **Yes, because something went wrong with storage!!**\r\n\r\nThe solution to this well known and well understood problem is to move towards a system where the application developer auto-magically gets help from the underlying storage system and he/she can continue to express/code the storage needs through the YAML language. The “so-called” storage administrator in the enterprise is going to be helped with an intelligent-storage-robot working continuously to align the storage to the application needs. With OpenEBS, the “intelligent-storage-robot” comes as an inherent component of the storage platform. The storage administrator can scale the platform and manage it at ease and do the job very well.\r\n\r\nThe intelligent-storage-robot or what we call OpenEBS as “Storage bot” handles the tough job of automating the storage actions such as\r\n\r\n- Updating the storage catalogues for application developers\r\n- Work with the storage platform to identify the capacity change needs, migration needs, backup needs and coordinate with the application\r\n- Work with the application for scheduling application aware snapshots, capacity management, data migration changes, automated data recovery etc\r\n- Work with a centralized ML engine (if there is one) to upload the application behaviour or to learn about the application behaviour so that it becomes more intelligent\r\n\r\n![Storage bot helping app developer of stateful container application and storage admin of the platform](https://cdn-images-1.medium.com/max/800/1*3wWTPR7i1gAVagzBYlOBmg.png)\r\n(***Storage bot helping app developer of stateful container application and storage admin of the platform***)\r\n\r\nAs depicted above, the storage solution designer is replaced by a storage-Bot (code) which is more effective as it predicts and updates the parameters of the storage platform as well as the application in real-time.\r\n\r\n#### OpenEBS helps to manage storage needs with YAML language/code\r\n\r\nOpenEBS divides the storage configuration into two parts. One, that the storage platform engineer has to design/manage and the other that the application developer has to design/manage.\r\n\r\n**The platform YAML file**\r\n\r\nThe platform configuration is specific to OpenEBS and the initial version is available at -\r\n\r\n[https://github.com/openebs/openebs/blob/master/k8s/openebs-config.yaml](https://github.com/openebs/openebs/blob/master/k8s/openebs-config.yaml)\r\n\r\nThe storage platform engineer develops this YAML file to scale the storage platform from few nodes to thousands of nodes across multiple locations. The YAML files can be version-controlled in a git repository and deployed into production to roll out the storage build-up process.\r\n\r\n![Storage platform deployment through YAML file automation](https://cdn-images-1.medium.com/max/800/1*WiZS5A4iLPeMtwxUmdxunQ.png)\r\n(***Storage platform deployment through YAML file automation***)\r\n\r\nA real example of this automation would be something like —\r\n\r\n---\r\n\r\n*the storage bot senses that there is a flood of large block size reads about to hit on a postgres-volume-246 which has its copies on node2 and node4 and to satisfy the latency needs of this volume, the read-cache on node4 is insufficient and one of the spare SSD on node4 can be re-purposed as read-cache temporarily. Storage bot learns this situation, makes the decision to do so and modifies the openebs-config.yaml on node4 as a new git version and rolls out the config file. Once the workloads are processed successfully after a few hours/days, the read-cache SSD is re-purposed back by the storage-bot either by updating the config again or by rolling back the config change.*\r\n\r\n---\r\n\r\nThe above is a very simple example and more complex things like “automated data migration to a correct node or correct tier, adding compute and memory resources to the storage controller nodes on the fly, automated software upgrades, etc” can all be achieved by the storage-bot using the git-versioned openebs-config.yaml files\r\n\r\n**The application YAML file**\r\n\r\nNow to the application developers paradise 🙂\r\n\r\nOpenEBS readily provides the storage configuration templates/storage catalogs for various stateful applications and application variants. The storage classes will be an ever-growing list with more participation from the community, but the initial version is at — [OpenEBS Storage Classes](https://github.com/openebs/openebs/blob/master/k8s/openebs-storageclasses.yaml)\r\n\r\nThe storage class will help the application developer with various storage config parameters. Some of the possibilities are:\r\n\r\n— Initial capacity, capacity growth rate per week/month, latency expectations, active data size (hot/cold data ratio), backup schedules, application data patterns, number of copies to be saved, typical instructions during upgrades, data migration boundary conditions, etc\r\n\r\nAs you can see, the above actions form a major part of the job of storage administrator who plans, designs, and executes the storage parameters. In the case of OpenEBS, the application developer can code these requirements into the application YAML file and the OpenEBS storage bot will enforce and help continuously optimize this file as well. This, I believe is a huge step forward in the journey of simplifying the storage infrastructure interface to the application developers.\r\n\r\nOpenEBS is in the early days. With the release of OpenEBS 0.3, the DevOps users have an option to get the container-native block storage for their stateful workloads orchestrated by Kubernetes. OpenEBS 0.3 release is the first step in making the storage infrastructure as code possible.\r\n\r\nLooking forward to receiving feedback/comments/criticism on this topic. We are lurking on slack at [https://openebs-community.slack.com/](https://openebs-community.slack.com/)\r\n","slug":"storage-infrastructure-as-code-using-openebs"},{"id":97,"title":"Storage is Dead! Long live OpenEBS\r","author":"Evan Powell\r","author_info":"Founding CEO of a few companies including StackStorm (BRCD) and Nexenta — and CEO & Chairman of OpenEBS/MayaData. ML and DevOps and Python, oh my!\r","date":"28-06-2017\r","tags":["DevOps"," Kubernetes"],"excerpt":"In this blog I share something I’ve been saying for a while now that people suggested might just be audacious enough to spark a conversation.\r","content":"\r\nIn this blog, I share something I’ve been saying for a while now that people suggested might just be audacious enough to spark a conversation.\r\n\r\nPlus — I explain why I’ve decided to help found another storage project — [OpenEBS](http://www.openebs.io/) — and to become CEO of the underlying company, [CloudByte](http://www.cloudbyte.com/), at a time in which venture capital funding to space has declined (at least if you accept Rubrik and [Cloudian](https://cloudian.com/) and similar) funding as outliers :)).\r\n\r\nTL;DR: the old storage industry is ****dying**** like many stagnant and declining IT sectors before it, killed through outdated business practices and architectures and the emergence of a new set of personas that have radically different requirements, expectations, and even tastes. The new architectures and business models already exist — though they are unevenly distributed.\r\n\r\nI lay the story out in three points. I keep it brief and link to underlying technical resources w/ code and demos via those links for those that are interested. Please discuss below and/or at: [@epowell101](http://twitter.com/epowell101). Better yet, click here to be invited to our Slack channel: [https://openebsslacksignup.herokuapp.com](https://openebsslacksignup.herokuapp.com/)\r\n\r\n****Storage is dead? How so?****\r\n\r\n*On the one hand, massive data growth continues.* It is easy to look at a graph like the one above showing ongoing exponential growth in data created and conclude that the funding winter that has hit storage is just another irrationality of the venture market. Perhaps it is like 2006–2008 when too many of the top enterprise technology VCs had a couple of walking dead storage companies in their portfolio and wouldn’t or couldn’t take on new investments.\r\n\r\nAnd many thanks to Mary Meeker and Kleiner Perkins for her [annual report](http://www.kpcb.com/internet-trends) on trends for the graph.\r\n\r\n****Cloud****\r\n\r\n*On the other hand, cloud.* The major cloud vendors are a) truly major and b) see storage as a way to control customers.\r\n\r\nTo the ‘truly major’ point — the three largest cloud providers are some of the largest companies the world has ever seen. Those of us that remember the power of WinTel in the 90s and early 2000s need to remember that this time is different in part because the companies are massively more wealthy thanks in large part to having business models that transcend technology.\r\n\r\nTo the ‘control customers’ point — data gravity exists. And it is further leveraged by cloud providers making it free to transfer data to them and rather expensive to get it back.\r\n\r\nWhich brings us to DevOps and cross-cloud services…\r\n\r\n****DevOps and cross-cloud services****\r\n\r\nAs I learned from my experience as a co-founder and CEO of [StackStorm](https://github.com/StackStorm/st2), DevOps is a radically better way of building and running software — as well as being a cultural movement.\r\n\r\nAnd while there are many, many characteristics of what constitutes a “DevOps environment” — one important aspect as I see it is that the intent of the developer can be fully manifested by the underlying infrastructure and related services.\r\n\r\nAnd a second aspect is that many capabilities are consumed by the applications and the application developers as services. This fits with the use of microservices as well, of course.\r\n\r\nLast but not least, DevOps is a culture and a set of practices that, as demonstrated by the story of the crucial book the Phoenix Project, is motivated in part by a realization of how broken, slow, dysfunctional, unfair, and brittle, proprietary IT systems and IT operations traditionally have been. From this perspective, applying infrastructure as code in part to ensure cross team transparency and blameless postmortems and so forth are not just examples of useful techniques — they are manifestations of the values of a better culture.\r\n\r\nOne strength of clouds like AWS is that they enable you to consume storage in a DevOps friendly way — your orchestration or other automation can deal with the provisioning and management (or can rely on the solutions provided by the cloud provider) so that intent can flow from the application through the infrastructure; in addition, the infrastructure is there to be consumed dynamically, via APIs. Unfortunately, the cloud providers themselves have become the new proprietary, which makes some in the DevOps world a bit uncomfortable as in the past lock-in was used by proprietary vendors to maximize their own prices at the expense of their customers. Kubernetes especially offers a chance to keep the wiring free from the cloud providers, hence providing some hope of avoiding lock-in.\r\n\r\n****Uhh, huh — and OpenEBS?****\r\n\r\n![Uhh, huh — and OpenEBS?](/images/blog/uhh-huh-openebs.png)\r\n(***Uhh huh — data, cloud, DevOps, lock-in and, err, OpenEBS?***)\r\n\r\n\r\nIn short, the highest level vision for OpenEBS is one in which the DevOps friendly aspects of running storage in the cloud is now available on-premise and across your clouds, thus freeing you from vendor lock-in much in the way that Kubernetes helps you avoid the risk of locking yourself in through the use of cloud service specific wiring and workflow.\r\n\r\nWhat if your developers and DevOps teams could orchestrate your storage controllers just like other containers? How much more productive could they be?\r\n\r\nAnd what if that set of storage services allowed you to treat your stateful workloads on containers much like the ephemeral containers that have proliferated?\r\n\r\nAnd what if your storage and CIO teams were able to establish policies that governed your data without impeding the agility that was your purpose in moving towards containers and DevOps in the first place?\r\n\r\nLast but not least, what if, having tooled your environment to work with Amazon it just worked when you added the on-premise and cross-cloud OpenEBS? Wouldn’t this limit your lock-in with any one cloud vendor?\r\n\r\nOpenEBS remains early. Today we are at `release 0.3` and are just starting to be used by enterprises like Cap Gemini and others to deliver storage for stateful workloads on containers.\r\n\r\nI’m back into the storage industry because I’m sure that OpenEBS has a good chance to allow storage to slip into the background and “just work” to support the incredible boosts in agility delivered by DevOps.\r\n\r\nA bunch of us imagined a better storage industry — one more software-like, one that eliminated vendor lock-in — back in the 2008 / 2009 time frame. Instead, we got some kick-ass flash and quite cool hyper-converged solutions PLUS, mostly, AWS just working (well enough) with a far better business model and ability to scale.\r\n\r\nSo vendor lock-in remained a problem. And storage far too often remains the bottleneck that slows down the good stuff, including the shift of real workloads onto containers.\r\n\r\n[OpenEBS](http://www.openebs.io/) is going to fix all of that and make storage and related storage services something you use to free yourself from lock-in while boosting your operational agility. Game on!\r\n\r\nYou can learn more about today’s release of OpenEBS 0.3 from our COO and co-founder’s blog [here](https://blog.openebs.io/@uma_mukkara). I think you’ll agree, what’s possible now reinvents storage fundamentally — with your help we’ll turn this project into a company and a complete solution that we can all rely on.\r\n\r\nOther resources include demos of OpenEBS working seamlessly with Kubernetes and interesting stateful workloads including PostgreSQL and the Spark notebook Jupyter in our demo repo [here](https://github.com/openebs/openebs/tree/master/k8s/demo/crunchy-postgres).\r\n","slug":"storage-is-dead-long-live-openebs"},{"id":98,"title":"Data Scientists adopting tools and solutions that allow them to focus more on Data Science and less…\r","author":"Kiran Mova\r","author_info":"Contributor and Maintainer OpenEBS projects. Chief Architect MayaData. Kiran leads overall architecture & is responsible for architecting, solution design & customer adoption of OpenEBS.\r","date":"24-05-2017\r","tags":["Adalog"," Data Science"," Kubernetes"," OpenEBS"," Jupyter Notebook"," Solutions"],"excerpt":"Data Science as we all know is becoming crucial to many if not most businesses around the world. Data Science and ML are decidedly, the most trendy skills that a lot of people are aspiring to acquire or be associated with.\r","content":"\r\nData Science as we all know is becoming crucial to many if not most businesses around the world. Data Science and ML are decidedly, the most trendy skills that a lot of people are aspiring to acquire or be associated with. In my recent interactions (in the context of hiring for OpenEBS) with college graduates and software engineers, the one question that pops up is, if they join OpenEBS, will they get a chance to work on ML / Data Science (and the answer is a definite “maybe” :)).\r\n\r\nThe lure towards “Data Science” has gone beyond the $$ paid to the Data Scientists. It is about the process of creating wonders. “Data Science” puts forth a unique mix of interesting challenges, that requires grappling with the enormous amounts of data and the mind numbing application of machine learning and computational algorithms, visualization, and soft skills. These aspects associated with “Data Science” are evolving, as depicted in this [data science Venn diagram](https://www.infoq.com/articles/christine-doig-data-science-team-discipline).\r\n\r\n![Data Science Venn Diagrams](https://cdn-images-1.medium.com/max/800/0*FEPtZ-3YF48YMkRs.)\r\n\r\nYou can see this trend expressed in this graph of searches on Google as well. An interesting point is that “Machine Learning” has been neck and neck with “Data Science” until recently when “Machine Learning” started to be searched approximately 30% more frequently. And the gap between searches about Data Science and about Data Scientists has widened in the last couple of years; it seems people are about 3x more likely to be interested in Data Science than in the Data Scientists that actually do the work 🙂\r\n\r\n![Graph of Machine Learning, Data Science, Data Scientist, and Deep Learning searches on Google](https://cdn-images-1.medium.com/max/800/0*Usx-pyQi3bHCTyJe.)\r\n\r\nInterestingly, we have seen early OpenEBS users and contributors asking about OpenEBS delivering storage to containers running distributing nodes for Kafka or Spark or other pieces of a Data Science pipeline. We wanted to learn more about the needs of these users.\r\n\r\nThankfully, we are a little bit of a sister company to [Kensu.io](http://www.kensu.io/) as our Chairman [Evan Powell](https://twitter.com/epowell101) has been advising [Kensu](https://twitter.com/kensuio) as well. So we got in touch with the Kensu.io founders [Andy](https://twitter.com/noootsab) and [Xavier](https://twitter.com/xtordoir), who are co-creators of the [spark-notebook](http://spark-notebook.io/), which is the leading Scala notebook for data scientists working in the Spark community. [Andy](https://twitter.com/noootsab) and [Xavier](https://twitter.com/xtordoir) and their team have built and have helped to run some of the largest Data Science pipelines in finance and related fields in Europe; plus they are O’Reilly authors. They have been really generous with their time.\r\n\r\nThe TL;DR is — *data scientists still spend way too much time hacking together Data Science pipelines and if they only could orchestrate the end to end pipeline with Kubernetes/Mesos (which seems to be common in these environments) so that storage itself worked simply, this could be more productive, could recreate their results more easily, and might even work together better.*\r\n\r\nIn the rest of the blog I set out a little more specifically what we have learned and we share the beginnings of a recipe for Data Science on containers with OpenEBS as the storage. Please provide feedback to this blog or join the now hundreds of people on the [OpenEBS slack channel](http://slack.openebs.io/) and post your comments and feedback there.\r\n\r\n**Data Science workflow hindered by infrastructure management tasks**\r\n\r\nThe workflow of a data science project typically comprises four stages as outlined below, with data scientists going back and forth between these stages, before arriving at product/insights in the form of a report, dashboard, or data service.\r\n\r\n![Data Science workflow](https://cdn-images-1.medium.com/max/800/0*UCJHD8p2bNOemyC9.)\r\n\r\nEach of these stages involves tasks that can be further classified into three distinct types depending on the nature of the task as follows:\r\n\r\nType 1: Data Science\r\n\r\nType 2: Best Practices or Governance\r\n\r\nType 3: Administer Infrastructure/Tools\r\n\r\nData Scientists are primarily interested in *Type 1: Data Science tasks*, some sample tasks under this category (at different stages of the workflow) are:\r\n\r\n![Data Science tasks at different stages of the workflow](https://cdn-images-1.medium.com/max/800/0*t41w0qHFapFBWtX_.)\r\n\r\n*One of the crucial requirements for the data scientist is to produce accurate and reproducible analysis by collaborating with larger teams. *[Martin Hack](https://twitter.com/mhackster)*, commented that he has come across situations where the accuracy of the models change from the time the models were generated to the time that they are presented to a wider audience. This is usually attributed to the change in the data using which the model was generated.*\r\n\r\nThe efficiency and confidence with which these tasks are performed or improved (in an iterative way) are dependent, in the current scenario, on some *best practices*. The best practices range from following certain naming conventions for the data files used to tuning infrastructure/tools — like databases, distributed systems that are used to run the analytical or modeling tasks.\r\n\r\nSome sample Type 2: Tasks at different phases of the Data Science workflow are as follows:\r\n\r\n![Tasks at different phases of the Data Science workflow](https://cdn-images-1.medium.com/max/800/0*IKPVzSqbyirvwZW5.)\r\n\r\nThe tasks mentioned above just provide a glimpse into the challenges associated with a typical data science workflow. In workflows that require creating models by using data from multiple live sources, tracking the accuracy of the data without having something like application error logs, becomes a harder problem to solve, if not impossible. This also leads to anxious data scientists who tend to keep their work private, unless a higher level of confidence is achieved on the models generated.\r\n\r\nTalking of confidence, today we take pride in writing code that goes into production on day one, using automated continuous integration systems. Kensu is doing something similar, which can be considered as *Continuous Integration mixed with Live Monitoring of Data Sources.*\r\n\r\nAndy and Xavier and the team are rolling out ***Adalog***, their software and SaaS solution, first for their existing professional service customers and then more broadly. While you can learn much more about Adalog on their website — [http://www.kensu.io](http://www.kensu.io) — as I understand its Adalog picks up all the relevant metadata of the data science pipeline and uses it, as well as the underlying systems themselves, to deliver compliance reporting and controls.\r\n\r\nData Science Notebooks (like [*Jupyter*](http://jupyter.org/), [Spark-Notebook](https://github.com/spark-notebook/spark-notebook), etc.,) and integrated products like Adalog have enabled improved and reproducible data since workflows, and deploying these notebooks towards containers have helped in boosting the productivity.\r\n\r\nYet, there are a few infrastructure related tasks that are not fully integrated into this workflow, which creates a manual dependency on the expertise of infrastructure administrators. At the same time, it also burdens the administrators/operations team to manage a new kind of workload in their environment.\r\n\r\nSome of the tasks that fall under this *Type 3: Infrastructure / Operations* tasks from (from a storage operations perspective) are:\r\n\r\n![Infrastructure / Operations tasks from (from a storage operations perspective)](https://cdn-images-1.medium.com/max/800/0*gcVdcir6RcbetPXe.)\r\n\r\n*Andy and Xavier stated that they have the integration pieces with the data science tools, he finds that storage infrastructure related challenges remain and many of these would seem to be best solved with tighter integration by-products like OpenEBS that are fully containerized and hyper coverged, with products like Adalog.*\r\n\r\n*Without a solution like OpenEBS that natively integrates into the orchestration and that containerizes the storage itself*\r\n\r\n- *Capacity management is very tricky, where some of the tasks involve non-deterministic data bloating. Hitting disk space errors may result in the loss of many hours of processing.*\r\n- *Managing the capacity for the local copies that need to be maintained for external data sources and keeping them in sync and distributing to team members can be very time consuming*\r\n- *The dynamic nature of jobs that require bursts of IOPS/Throughput means that to be safe the systems are massively over provisioned which then means you need a large budget request even to just mess around in trying out new models for example*\r\n- *Maintaining the provenance of the data along with the models for reproducing the results with the same accuracy they had during model generation is extremely difficult and without that the human workflow of many data science users is broken; imagine, for example, trying to compare the performance of multiple teams who are being evaluated based on the quality of their models if you cannot be sure that the training sets have remained trusted.*\r\n\r\n*Andy says, these infrastructure and hand-holding of the workflow operations are what makes Data Science more of engineering than science.*\r\n\r\n**Data Science workflow — storage management tasks automated by OpenEBS**\r\n\r\nDocker and Kubernetes have eased the operations around maintaining large scale computational clusters, and with containerized and hyper-converged storage like OpenEBS, the operations can now provide storage for millions of containers without having to maintain separate storage silos.\r\n\r\nKubernetes and OpenEBS will help in further simplifying the infrastructure management tasks for the data science workflows by supporting automated storage capacity management based on the data source changes, auto-tuning of the QoS depending on the priority of the analytical task, and provide data provenance without laying an extra burden on the data scientists by deeper integration with the notebooks.\r\n\r\n*For instance, the following is a glimpse of what can be achieved through deeper integration of Adalog with Kubernetes and OpenEBS:*\r\n\r\n1. *Data scientists starts a new notebook ( or project ). This project is instantiated on the container cluster (say Kubernetes).*\r\n2. *When a data source is specified for download, it would trigger provisioning of a new OpenEBS storage volume from this cluster for the data source. The capacity for this new volume is auto-managed by OpenEBS. Adalog would maintain the information of the volumes associated with a notebook.*\r\n3. *When the notebook finishes downloading the data, it will trigger to create a snapshot of the downloaded data. Notebook can allow for regular syncing with the source to check for updates and download the incremental data etc., Adalog would track the snapshots of the volume used by the notebook.*\r\n4. *As data scientists start exploring the data, there are provided with read-only access to the snapshot of the data-source that is already downloaded. And new storage volumes are created for storing the temporary files. Adalog can associate the volume created with the user who initiated the data generation.*\r\n5. *When a certain exploration is aborted or cleared from the notebook, the associated volume ( and all the temporary files) are also cleared from the storage. Adalog would keep track of the functions and models generated via the exploration phase along with metadata information about the results generated, even though the volumes (data) is deleted.*\r\n6. *OpenEBS volumes come with fine-grained allocation of resources and auto-tuning which can help with running high-priority modeling jobs faster than the others.*\r\n7. *From Adalog, the user can trigger OpenEBS volumes (data) to be backed up or restored from S3 bucket.*\r\n\r\nAs a next step, we are planning to provide a sandboxed version of adalog running on Kubernetes and storage managed by OpenEBS. Much like the vagrant box we built to enable OpenEBS to be tried out on Kubernetes, and then became a favorite tool of some largely for trying out Kubernetes — we are hopeful that this sandbox will be useful as well as being a way to see OpenEBS in action.\r\n\r\n*If you want to earn massive open-source karma (and stickers of course) — let us know on our *[*OpenEBS Slack channel*](http://slack.openebs.io/)* that you’d like to help with this solution building exercise.*\r\n","slug":"data-scientists-adopting-tools-and-solutions-that-allow-them-to-focus-more-on-data-science-and-less"},{"id":99,"title":"Multi-Node Kubernetes 1.6 Cluster provisioning made easy using SandBox (Vagrant box)\r","author":"Kiran Mova\r","author_info":"Contributor and Maintainer OpenEBS projects. Chief Architect MayaData. Kiran leads overall architecture & is responsible for architecting, solution design & customer adoption of OpenEBS.\r","date":"23-05-2017\r","tags":["Kubeadm"," Kubernetes"," OpenEBS"," Vagrant"," Virtualbox"],"excerpt":"Working on OpenEBS, a containerized storage for containers which is orchestrated by Kubernetes, most of our tasks, be it development, testing and demo require us to setup and modify the nodes in Kubernetes cluster.\r","content":"\r\n### Background\r\n\r\nWorking on OpenEBS, a containerized storage for containers which is orchestrated by Kubernetes, most of our tasks, be it development, testing and demo require us to setup and modify the nodes in Kubernetes cluster. In addition, a multi-node cluster is a must as we go beyond the initial development and testing, to explore the high availability, scale, performance, and upgrade aspects.\r\n\r\nWhile *minikube* and *minishift* provide an easy way to setup Kubernetes single node cluster — for multi-node cluster the fastest ways to get going are usually cloud or hosted solutions. ***kubeadm*** is the closest we can get to easily setup a cluster, but since it is still in alpha, we keep running into some issues like — [kubadm init v1.6.1 fails](https://github.com/kubernetes/kubeadm/issues/226)\r\n\r\n*An ideal solution for a developer would be a Kubernetes Sandbox. A sandbox that can be easily setup on a laptop and can work on the move (without net connectivity.) This Sandbox should be shielded from the different API or CLI changes that happen with the frequent releases of kubeadm and Kubernetes.*\r\n\r\nWe have used Vagrant, VirtualBox, and Atlas to do just that.\r\n\r\n![Vagrant, VirtualBox and Atlas](https://cdn-images-1.medium.com/max/800/1*7kkviZOwgh8ePDYRjFX0mQ.png)\r\n\r\n## Try It! It is Easy and Quick!\r\n\r\nOnce you have Vagrant (1.9.1 or higher) and VirtualBox (5.1.14 or higher) installed on your laptop/machine, just do the following:\r\n\r\nStep 1: Download the Vagrantfile from [OpenEBS Github](https://raw.githubusercontent.com/openebs/openebs/master/k8s/lib/vagrant/test/k8s/1.6/Vagrantfile)\r\nStep 2: Run **vagrant up**\r\n\r\nDetailed instructions can be found [here](https://github.com/openebs/openebs/tree/master/k8s/lib/vagrant/test/k8s/1.6).\r\n\r\nThe above two steps will provision the following:\r\n\r\n- Ubuntu VM with Kubernetes Master (kubemaster-01)\r\n- Ubuntu VM with Kubernetes Minion (kubeminion-01) associated with (kubemaster-01)\r\n- Setup *weave* as pod network\r\n- Setup the kubectl credentials ( admin.conf) on kubemaster-01\r\n- Sample Kubernetes pod YAML files are located on (kubemaster-01) under the directory (*~/demo/k8s/spec/*)\r\n\r\nIn addition to the above, the following OpenEBS provisioning tasks are also performed.\r\n\r\n- Install OpenEBS iSCSI FlexVolume Driver on the kubeminion-01\r\n- Ubuntu VMs installed with OpenEBS Maya Master and OpenEBS Storage Hosts. (If you don’t want to use the storage, you can skip the installation of these VMs. Check the customization steps below).\r\n\r\n## Customizing the Kubernetes Sandbox\r\n\r\nThe above instructions include setting up Kubernetes and OpenEBS as well, but you can easily customize the Vagrantfile to skip installation of OpenEBS by prefixing ENV variables before the vagrant command as follows:\r\n\r\n    MM_NODES=0 MH_NODES=0 vagrant up\r\n\r\nSome of the configuration options available are:\r\n\r\n- KM_CPU — Number of CPUs for minion (*default 2*)\r\n- KM_MEM — Size of the RAM (in bytes) for minion (*default 2048*)\r\n- KH_NODES — Number of Kubernetes Minion VMs (*default 1*)\r\n- KH_CPU — Number of CPUs for minion (*default 2*)\r\n- KH_MEM— Size of the RAM (in bytes) for minion (*default 1024*)\r\n- MM_NODES — Number of OpenEBS Maya Master VMs (*default 1*)\r\n- MH_NODES — Number of OpenEBS Storage Host VMs (*default 2*)\r\n\r\nIf you are looking for an older release of Kubernetes, checkout — [kubernetes vagrant boxes with 1.5.5](https://blog.openebs.io/setting-up-kubernetes-1-5-5-cluster-with-vagrant-dda11e33b5bc)\r\n\r\n## Contributing to creating Kubernetes Sandboxes\r\n\r\nBtw, the process of creating these Kubernetes Sandboxes is Open Sourced.\r\n\r\nThe majority of the issues that are encountered during the Kubernetes cluster setup using kubeadm are related to the software api/cli options changed across different versions of kubeadm or the interfaces between kubeadm and Kubernetes. Another nagging issue is the need to have connectivity to the network.\r\n\r\nThese issues are resolved by having Sandbox (vagrant boxes) that pre-package the required software with versions that are compatible. The task of downloading the required software is automated via the scripts.\r\n\r\nOnce a VM is initialized with network/IP address details, certain initialization tasks will have to be executed. These are placed in the configuration scripts (which are also pre-packaged with the sandboxes) and are invoked from the Vagrantfile itself.\r\n\r\nCurrently, the Sandboxes use *weave* as a pod network, you can easily extend this to use a different scheme for pod network.\r\n\r\nIf you like to contribute or learn more about these box generation scripts, check out our [GitHub](https://github.com/openebs/openebs/tree/master/k8s/lib/vagrant) or join our [*Slack Channel*](http://slack.openebs.io).\r\n","slug":"multinode-kubernetes-16-cluster-provisioning-made-easy-using-sandbox-vagrant-box"},{"id":100,"title":"Rancher’s Longhorn announcement solidifies the OpenEBS story\r","author":"Uma Mukkara\r","author_info":"Contributor at openebs.io, Co-founder & COO@MayaData. Uma led product development in the early days of MayaData (CloudByte).\r","date":"18-04-2017\r","tags":["Docker"," OpenEBS"," Rancher"," Stateful Applications"," Longhorn"],"excerpt":"Today, Sheng Liang unveiled project Longhorn as a new way to build distributed block storage for cloud and container-based platform.\r","content":"\r\nToday, Sheng Liang [unveiled project Longhorn](http://rancher.com/microservices-block-storage/) as a new way to build distributed block storage for cloud and container-based platform. We, the OpenEBS team, are thrilled with this news as it solidifies our decision of using Longhorn as the underlying block storage system for OpenEBS.\r\n\r\nWhen I reviewed the OpenEBS vision with Sheng late last year, he introduced me to Longhorn project and asked me to study it and use it if it makes sense for OpenEBS. Clearly, Longhorn was sharing the OpenEBS block storage vision and we soon launched OpenEBS with Longhorn underneath.\r\n\r\nWhat I liked most about Longhorn was the nice separation of block protocol stack (Longhorn controller) and the actual block storage (Longhorn replica). This helped us containerize the storage software completely and efficiently. An OpenEBS VSM, or a storage pod, will have containerized longhorn controller and replica(s).\r\n\r\nAnother cool thing about Longhorn implementation is that it’s controller sits closer to the application docker containers thus enabling hyper-converged mode of deployment and it’s replica sits closer to the underlying storage with a simple sparse file based system for block data management.\r\n\r\nIt is so nice of Sheng to mention OpenEBS’s usage of LongHorn. We will continue to contribute to the performance tuning of LongHorn, improvements to S3 integration, rebuilding logic of replicas, etc\r\n\r\n### OpenEBS is an extension to the idea of Longhorn\r\n\r\nSheng Liang, in his blog, talks about Longhorn and other storage systems.\r\n\r\n“*We wrote Longhorn as an experiment to build distributed block storage using containers and microservices. Longhorn is not designed to compete with or replace existing storage software and storage systems…”*\r\n\r\nAs believers in the idea for which Longhorn is written, we are building OpenEBS as credible enterprise storage with Longhorn at it’s core. As part of the journey with CloudByte ElastiStor, where we have containerized the storage volumes a few years ago, we picked up tremendous amount of real world experience in delivering enterprise storage to the customers. All this experience is being put into work at OpenEBS. OpenEBS will have most of the enterprise features that Sheng mentions, if not more. Some of them will be “scalable and reliable distributed file systems, a unified storage experience, enterprise data management, crash consistency, near disk performance, etc”.\r\n\r\nAgain, a ton of thanks to the awesome folks who contributed to the development of Longhorn. With this announcement from Rancher, we are hoping to see more usage of Longhorn and OpenEBS. We are all ears to the community for any suggestions on OpenEBS and its usage of Longhorn ([slack.openebs.io](http://slack.openebs.io)).\r\n\r\nLong live Longhorn!!\r\n","slug":"ranchers-longhorn-announcement-solidifies-the-openebs-story"},{"id":101,"title":"OpenEBS sprinting ahead, 0.2 released\r","author":"Kiran Mova\r","author_info":"Contributor and Maintainer OpenEBS projects. Chief Architect MayaData. Kiran leads overall architecture & is responsible for architecting, solution design & customer adoption of OpenEBS.\r","date":"10-04-2017\r","tags":["Containerized Storage"," Docker"," Kubernetes"," Microservices"," OpenEBS"],"excerpt":"I am delighted that we have been able to push the OpenEBS 0.2 release for community consumption, a version that demonstrates that storage controllers can be containerized.\r","content":"\r\nI am delighted that we have been able to push the [OpenEBS 0.2 release](https://github.com/openebs/openebs/releases/tag/v0.2) for community consumption, a version that demonstrates that storage controllers can be containerized. This release comes with k8s flex volume driver called “openebs-iscsi”\r\n\r\nThe past week has been very exciting for the OpenEBS Team — engaging with container technology evangelists, enthusiasts, and users at the [Bangalore Container Conference — BCC 2017](http://www.containerconf.in/), followed by a very interactive meetup on the [Containerized Storage for Containers](http://www.containerconf.in/) with [Evan Powell](https://twitter.com/epowell101), [Ian Lewis](https://twitter.com/IanMLewis), and my fellow Bangalore Entrepreneurs and OpenSource fans.\r\n\r\nBy containerizing the storage functionality, the OpenEBS delivers the core storage capabilities like block-layout and its management, data protection, consistency, and availability as a “microservice”, thus bringing the advantages of containers to the storage volumes. Containerization also helps in dynamic provisioning at scale, scale-up/down the storage cluster, monitoring, ease of upgrades, etc.\r\n\r\nWe understand that generic orchestration engines will not solve all the problems of storage orchestration. We are augmenting container orchestration engines with the storage intelligence by the OpenEBS orchestration layer — maya. In line with this vision, the 0.2 release has implemented m-apiserver that acts as an interface to the Volume Plugin drivers to provision the storage, while it takes care of interacting with the Container Orchestration Engine to find the right placement for the Storage Containers (VSM).\r\n\r\nOpenEBS 0.2 can be used to setup an Amazon EBS-like Block Storage Service for your containers, and consume block storage for your Stateful applications.\r\n\r\n![OpenEBS 0.2 setup](https://cdn-images-1.medium.com/max/800/1*itiDxdwyTmdd9VsIYwFYiA.png)\r\n\r\nThe Ops team can easily setup an OpenEBS cluster using Bare Metal Machines or VMs, just like setting up Kubernetes Cluster. The Kubernetes minion nodes should be configured with the FlexVolume OpenEBS Driver (openebs-iscsi) to use OpenEBS Storage.\r\n\r\nThe DevOps or the Developers can configure Storage to their Stateful Apps from OpenEBS cluster by having their Application intent files point to OpenEBS Maya API Server.\r\n\r\nOpenEBS is a completely OpenSource Project that is being driven by the feedback received from the community. In our next milestone 0.3, we are working towards making OpenEBS hyper converged with Kubernetes. Enhance the capabilities around Core Storage for using an additional type of disks for storing block data, providing the controls to the user to perform backup/restore to Amazon S3, etc., Do take a moment to check out our [Project Tracker](https://github.com/openebs/openebs/wiki/Project-Tracker).\r\n\r\nIf you are as cautious and skeptical about technology as me, then seeing is believing. To help you quickly get started, we have created Kubernetes and OpenEBS 0.2 Vagrant Boxes.\r\n\r\n[Try OpenEBS 0.2 today](https://github.com/openebs/openebs/blob/master/k8s/dedicated/tutorial-ubuntu1604-vagrant.md) and let us know what you think!\r\n\r\nHangout with us and help us with your valuable feedback at [slack.openebs.io](http://slack.openebs.io)\r\n","slug":"openebs-sprinting-ahead-02-released"},{"id":102,"title":"Software Defined Storage — finally\r","author":"Evan Powell\r","author_info":"Founding CEO of a few companies including StackStorm (BRCD) and Nexenta — and CEO & Chairman of OpenEBS/MayaData. ML and DevOps and Python, oh my!\r","date":"11-03-2017\r","tags":["DevOps"," Docker"],"excerpt":"In this blog, I’ll discuss what went wrong — why we didn’t achieve the promise of software-defined storage — and why software-defined storage is now, finally, possible.\r","content":"\r\nMany years ago there was a flowering of what we called software-defined infrastructure. Those of us at the forefront of the trend were no doubt encouraged by the success of Martin Casado and the Nicera team who quickly went from Ph.D. thesis to $1.26bn purchase by VMware thanks to the promise of software-defined *networking*. In hindsight we were misguided, but a handful of us built companies built on the premise — why not *storage*?\r\n\r\nToday we finally have the ingredients in and around the storage industry to achieve what we all were shooting for 5–7 years ago. I’m so encouraged by these enabling trends that I’ve gotten back into storage even as it has fallen out of investor favor. Cutting-edge users are now achieving the cost savings and boost to their agility we all promised — and truly believed — were around the corner years ago.\r\n\r\nIn this blog I’ll discuss what went wrong — why we didn’t achieve the promise of software-defined storage — and why software-defined storage is now, finally, possible.\r\n\r\nThere are at least a handful of reasons that storage failed to achieve the true promise of software-defined storage — that we did not live up to the radical flexibility of virtualized compute for example, where compute jobs were largely freed from their underlying hardware:\r\n\r\n1. The lack of portability of the controllers themselves\r\n2. The inherent stickiness of the underlying data\r\n3. Inability to deliver performance in a dynamic environment\r\n4. Immature common standards\r\n\r\n****Controller portability and data stickiness:****\r\n\r\nStorage controllers have to be able to deliver the policies you want — share these folders with these thousands of people for example — while keeping the underlying data safe irrespective of hardware failure, bit rot, user error, and more.\r\n\r\nFor a couple of reasons we in the industry at the time were unable to make our controllers truly software-like in the way that they were deployed in data centers: one, we didn’t sufficiently separate the policy engine or storage scheduler from the care and feeding of the underlying data on disk; two, in part because of this as well as the way that hardware drivers interact with operating systems, our storage controllers tended to need to be bare metal installs, and did not run well in a virtual machine. Perhaps more importantly, because our controllers needed to run on the same systems where the data was stored, they could only ever be as fluid and dynamic as the data itself. In other words, we were chained to our hardware in part by the physics of reading, transporting, and writing data.\r\n\r\n****Performance amidst dynamism:****\r\n\r\nInformation technology design is often a game of pass the bottleneck. For any given system there is one bottleneck or constraint that limits much of overall performance and hence that throttles the ability of the application to serve user needs. Historically the bottleneck has often been storage — and the rise of virtualization just tightened further this bottleneck thanks to the I/O scrambling that hypervisors perform on the read/ write patterns of the applications running on them.\r\n\r\nAnd yet if you are to treat storage — and storage controllers — as software that itself can be dynamically provisioned and moved about then you must be able to deliver performance from underlying systems irrespective of where the controller software is located. Perhaps more importantly, you need to be able to interpret the requirements of the applications themselves and deliver the combination of IOPS and latency they need to meet the requirements of their end-users.\r\n\r\nThis problem has aspects of the traveling salesman problem, which is to say, it is not entirely solvable. The way it has been solved in practice is that storage has remained bound to particular sets of typically hugely over provisioned hardware and the combination of applications and underlying storage has itself had to be controlled through affinity rules in the compute schedulers from VMware and OpenStack and others. In the container world, for the most part, we have dealt with the challenges of delivering storage performance to so-called stateful containers **by not having stateful containers**. The vast majority of containers that are deployed don’t actually rely upon data storage in the way that databases for example do. Those containers that are stateful typically tightly couple the underlying storage to containers, thereby removing much of the dynamism and ease of management that was a primary point in moving to containers in the first place.\r\n\r\n****Immature common standards****\r\n\r\nAs if the inherent difficulty of somehow addressing QoS for storage, while allowing controllers themselves to become more flexible, was not hard enough, the industry structure of IT 4–5 years ago itself made it more difficult to deliver software-defined storage. VMware tried hard to get everyone on the same page via their VASA APIs, which was a way to pass information about applications to the storage and for the storage to essentially sign-up for the performance needed, however, this effort ended up making less transparent and more proprietary the DNA, or operating instructions, of the software-defined data center. Perhaps because these operating instructions themselves were so opaque they never caught on in software-defined data centers.\r\n\r\nToday the Kubernetes community is probably our best shot for having a set of commonly accepted application definitions that flow into the infrastructure, to actually deliver software-defined infrastructure. In this case, the DNA is human readable YAML and is managed by a set of open source technologies.\r\n\r\nQuick note — pod and resource definitions are not fully fleshed out by Kubernetes for storage. So you can do some basic things, such as limiting the amount of storage by user or application or pod, however storage specific QoS is not yet supported in these definitions. This is a work in progress.\r\n\r\nNonetheless, what is possible today gives a good idea of what is coming. For example:\r\n\r\n![human readable code example](/images/blog/software-defined-storage-finally-example-code.png)\r\n\r\nAs you can see, very simple, human readable, and change controllable easily via GitHub or other systems, which is fundamental to achieving a high degree of automation and control.\r\n\r\n**The unevenly distributed future**\r\n\r\nWhile this blog and self-assessment of where we got to in software-defined storage may be a bit depressing, there are signs of hope.\r\n\r\nWithin the Kubernetes community, for example, hardy pioneers with deep technical expertise such as Pearson are using solutions like StackStorm and much else to build truly developer defined infrastructures that include the use of containers for stateful workloads.\r\n\r\nWhat I learned from Pearson and other StackStorm users led me to look for storage intellectual property — and the teams that built it — that could enable the storage freedom promised by software-defined Storage. Specifically, I went looking for technologies that could virtualize or containerize storage controllers while somehow ensuring the delivery of QoS.\r\n\r\nIn CloudByte I found a solution that today delivers fine grained control of QoS via an architecture that features virtualized storage controllers. What this means is that the controllers themselves can be live migrated, for example, while continuing to serve storage. This is how CloudByte delivers non-disruptive upgrades — and it also means that you can migrate pieces of your data center from on-premise to the cloud and back — with confidence. However, without QoS controls moving your controllers around would be madness — and so the deep understanding of QoS and the ability to set QoS SLAs by the user or by volume for example is crucially important.\r\n\r\n![Storage controller migrating from one site to another](/images/blog/storage-controller-migrating-from-one-site-to-another.png)\r\n\r\nIn the above image, I show a storage controller migrating from one site to another.\r\n\r\nAnd what CloudByte does for today’s primarily scale-up workloads — largely “pets” — our emerging open source project called OpenEBS will do for emerging scale-out workloads — so called cattle — through “containerized storage for containers.”\r\n\r\nIn short — as we plan to further illustrate through use case stories especially of hybrid cloud and backup use cases — in CloudByte / OpenEBS I’ve found not just the building blocks but the first instantiations of the future we all dreamed of several years ago.\r\n\r\nTime to reboot — and re-energize; storage now has the ingredients needed to unshackle users and enable them to achieve much more dynamic IT while keeping control of their data. Join me by taking a look at CloudByte and OpenEBS today. I look forward to your feedback.\r\n","slug":"software-defined-storage-finally"},{"id":103,"title":"Using OpenEBS to build a true on-premise container service\r","author":"Uma Mukkara\r","author_info":"Contributor at openebs.io, Co-founder & COO@MayaData. Uma led product development in the early days of MayaData (CloudByte).\r","date":"28-02-2017\r","tags":["AWS EBS"," Container as a Service"," OpenEBS"," Persistent Storage"," Kubernetes"],"excerpt":"The top questions that could be lingering on the enterprise architect mind in an enterprise are\r","content":"\r\nThe top questions that could be lingering on the enterprise architect mind in an enterprise are\r\n\r\n- How do I build a true container service in my enterprise?\r\n- Do I really have to depend on the popular clouds such as Google, AWS, DigitalOcean to start my container journey?\r\n\r\nBuilding container services on AWS or GCP is practical today. These cloud platforms provide the infrastructure to start building your container platform. You get VMs for hosting K8s minions and masters and persistent disks (EBS disks or GP disks) to persist the block storage of your applications. If you want to build a similar container service in your enterprise on-premise data center, what are the choices for container infrastructure?\r\n\r\nWell, the troubling infrastructure piece to build the true container service in your enterprise is the persistent storage for your applications. No surprise there. VMs or bare metal can be deployed using well-known tools such as OpenStack and KVM, but for deploying EBS or GPD equivalent, you would need something like OpenEBS.\r\n\r\nOpenEBS helps the enterprises to build an AWS EBS equivalent or GPD equivalent platforms on-premise. OpenEBS is architected to ease the provisioning and management of persistent volumes at scale. It will have most of the elements of the popular AWS EBS. I had discussed the comparison between AWS EBS and OpenEBS with few community members in our last meetup. The slides are posted at [https://www.slideshare.net/OpenEBS/openebs-containerized-storage-for-containers-meetup-2](https://www.slideshare.net/OpenEBS/openebs-containerized-storage-for-containers-meetup-2)\r\n\r\nContainerization of block storage volumes gives the benefit of flexible storage upgrade schedules, treating the storage volume as part of your K8s POD, etc. However, there is more to consider as benefits of OpenEBS. OpenEBS is “Open Source” EBS. A quick feature comparison is as follows\r\n\r\n![Comparing AWS EBS & OpenEBS](https://cdn-images-1.medium.com/max/800/1*uu_mIhdqobjf3ftNOtf8KQ.png)\r\n\r\nNext, provisioning and consuming persistent volumes through OpenEBS is very similar and simple to that of AWS EBS\r\n\r\nIn AWS EBS a user creates and attaches a disk to an EC2 instance. The nuances of underlying storage protocols are hidden underneath and not exposed to the consumer/user.\r\n\r\n![Connectivity in AWS EBS](https://cdn-images-1.medium.com/max/800/1*zShnxODcXjTNu-X-qsJa5g.png)\r\n\r\nFlow of provisioning and consuming persistent block volumes on AWS EBS\r\nIn OpenEBS, it is very similar. Once the OpenEBS volumes are expressed as intent in the application YAML config file, the volumes are automatically created on the OpenEBS platform, mounted on K8s minions, and the persistent storage is made available to the application.\r\n\r\nExample of OpenEBS volumes getting consumed through iSCSI:\r\n\r\n![Connectivity in OpenEBS](https://cdn-images-1.medium.com/max/800/1*Mh9MzX5a_YbV9K_LR8EynA.png)\r\n\r\nAn example of OpenEBS volumes getting dynamically provisioned and consumed using k8s-openebs provider is shown below\r\n\r\n[https://github.com/openebs/openebs/blob/master/k8s-demo/my-nginx-pod-on-openebs.yaml](https://github.com/openebs/openebs/blob/master/k8s-demo/my-nginx-pod-on-openebs.yaml)\r\n\r\nThe next comparison of OpenEBS to AWS EBS is how the volume snapshots are managed for data protection.\r\n\r\n![Snapshots on AWS EBS vs OpenEBS](https://cdn-images-1.medium.com/max/800/1*elAnAeYarCwxeCEyXv_Xow.png)\r\n(***Comparing snapshots management on OpenEBS to that of AWS EBS***)  \r\n\r\nAs shown above, using OpenEBS, you will have a standard S3 snapshot upload capability so that you can choose your S3 provider. With on-premise S3 technologies like Minio, you can have the container backup infrastructure also as on-prem.\r\n\r\nOn the advanced features comparison, OpenEBS steps up to match AWS EBS. Granular QoS control, advanced IOPs management features such as using burst and credit IOPS are some of the features that will be home at OpenEBS\r\n\r\n![Other features comparison of AWS EBS & OpenEBS](https://cdn-images-1.medium.com/max/800/1*1WGi8-GdTamykwgnJ0lqjw.png)\r\n\r\nBuilding reliable storage platforms in open source is a hard thing. With all the expertise in serving large enterprises, the team seems to be up for the challenge. We hope to see the increasing levels of community engagement in the months to come!\r\n","slug":"using-openebs-to-build-a-true-onpremise-container-service"},{"id":104,"title":"Torus (from CoreOS) steps aside as Cloud Native Storage Platform. What now?\r","author":"Kiran Mova\r","author_info":"Contributor and Maintainer OpenEBS projects. Chief Architect MayaData. Kiran leads overall architecture & is responsible for architecting, solution design & customer adoption of OpenEBS.\r","date":"20-02-2017\r","tags":["DevOps"," Docker"," Storage Containers"," Kubernetes"],"excerpt":"Torus (from CoreOS), that aimed at providing container-native distributed storage announced that it would discontinue development due to lack of traction.\r","content":"\r\n[Torus (from CoreOS)](https://github.com/coreos/torus), which aimed at providing container-native distributed storage announced that it would discontinue development due to lack of traction. It just goes to show the dynamics of the open source projects and how business needs could influence them.\r\n\r\nTorus attempted to solve one of the core infrastructure problems, and like any projects that aim to solve the infrastructure problems — compute, network or storage, are slightly harder problems to crack with only a handful of people really venturing into solving them. Maybe, this inertia is also due to the fact that, when infrastructure fails, hell breaks loose — we are all too familiar with those network outages and data loss situations where Database teams spend days recovering data.\r\n\r\nHarder problems require renewed focus, at least in the initial stages to get the product off the ground for the basic use case. The entry barrier must be minimal, if not totally absent. Once the core value is established, in terms of ease of use or scale and just solving a problem in an intuitive way, it graduates into the adoption phase.\r\n\r\nWith containers changing the landscape of applications, they pose an additional set of requirements on the storage platform, which are covered in my earlier post — [Emerging Storage Trends for Containers](https://blog.openebs.io/emerging-storage-trends-for-containers-4970e4c51de#.ep5wl2u0z). *Any container-native storage platform developed today should be distributed and natively integrated into container orchestration platforms like Kubernetes*. Torus got these aspects right.\r\n\r\nWhile suspending further Torus development, I find it interesting that the committers at CoreOS mentioned Rook.\r\n\r\n[Rook](https://github.com/rook/rook), like [GlusterFS-container](https://github.com/gluster/gluster-containers), are not container-native, they provide wrapper projects that make it easy to deploy alongside Kubernetes. In the short-term towards the journey of taking containers into production, this retro-fitting approach may be OK! If there is enough traction to refactor the existing projects (Ceph) as we move forward.\r\n\r\nBut as we saw with compute virtualization paving the way for software-defined storage, there is a need for container defined storage. PortWorx and OpenEBS alone currently come close to being container-native storage platforms, built ground-up using containers by teams that have built enterprise and cloud storage platforms.\r\n\r\nOpenEBS is a distributed block storage that supports both hyper-converged and dedicated deployment models. However, the implementation of the block storage with OpenEBS follows a different approach for block replication (forked out of [Rancher Longhorn](https://github.com/rancher/longhorn)), which optimizes the meta-data processing of the distributed blocks.\r\n\r\nOpenEBS also inherits the data protection capabilities, pushing backups onto Amazon S3. We are currently working on EBS like API for provisioning the storage from K8s. With its cloud integration capabilities, we envision the capabilities supported by OpenEBS to enable our customers to build On-prem container environments that are compatible to be moved into the Cloud and vice-versa.\r\n\r\nOpenEBS Storage is delivered through VSMs which are essentially containers — frontend and backend, that can be scheduled by Kubernetes along with the Application Pods. The storage specific parameters are fed into the scheduling algorithms through our OpenEBS storage orchestration layer — maya. This container mode of deployment also reduces the burden of managing a separate storage network. The building blocks of the OpenEBS were covered in this post — [OpenEBS building blocks](https://blog.openebs.io/openebs-building-blocks-rancher-longhorn-b8928b5921fa#.r7kzqlucd)\r\n\r\nIf you were planning to contribute to Torus or just interested in getting your hands dirty with container-native storage platform, please take a closer look at [OpenEBS](https://github.com/openebs/openebs), which is completely open source.","slug":"torus-from-coreos-steps-aside-as-cloud-native-storage-platform-what-now"},{"id":105,"title":"Deployment modes of OpenEBS\r","author":"Uma Mukkara\r","author_info":"Contributor at openebs.io, Co-founder & COO@MayaData. Uma led product development in the early days of MayaData (CloudByte).\r","date":"13-02-2017\r","tags":["Container"," Docker"," Kubernetes"," OpenEBS"," Storage For Containers"],"excerpt":"OpenEBS supports two modes — Hyper-converged and dedicated. The deployment mode really depends on where and how you want to use OpenEBS.\r","content":"\r\nOpenEBS supports two modes — Hyper-converged and dedicated. The deployment mode really depends on where and how you want to use OpenEBS. If you are adding block storage capability to existing Kubernetes minions, hyper-converged mode is most desired, so that you can use the existing hardware as is. If the desire is to get a full fledged EBS type functionality to your on-premise cloud or container needs, then dedicated storage servers for OpenEBS is a better choice.\r\n\r\nIn the hyper-converged mode, OpenEBS Maya hooks into the K8s master and minions, hooking into scheduling algorithms for creating OpenEBS VSMs. When used in dedicated mode, the provisioning API are exposed via the OpenEBS Maya master. Dynamic Provisioning of the storage can be enabled using the volume plugin drivers or use the EBS volume plugin as in the case with K8s.\r\n\r\n![OpenEBS — Hyper-converged mode](https://cdn-images-1.medium.com/max/800/1*MxM5MmWCB_5mmy7A5bor6Q.png)_(OpenEBS — Hyper-converged mode)_\r\n\r\n![OpenEBS — Dedicated mode](https://cdn-images-1.medium.com/max/800/1*MAbRf5rJfv8w_OvZz02q7g.png)_(OpenEBS — Dedicated mode)_\r\n\r\nIn both modes, Flannel plays an important role in OpenEBS deployment for storage networking. A lot of issues are yet to be discovered in this area.. yes, this is just a start.\r\n","slug":"deployment-modes-of-openebs"},{"id":106,"title":"Containerization meetup - Containers for storage too\r","author":"Uma Mukkara\r","author_info":"Contributor at openebs.io, Co-founder & COO@MayaData. Uma led product development in the early days of MayaData (CloudByte).\r","date":"15-01-2017\r","tags":["Containerized Storage"," Docker"," Kubernetes"," OpenEBS"," Storage Containerization"],"excerpt":"I had the opportunity to talk to a very good group of technologists, DevOPs users in the Digital Ocean Containerization Meetup . Docker 1.13 details and Kubernetes deployment tips were fantastics.\r","content":"\r\nI had the opportunity to talk to a very good group of technologists, DevOPs users in the [Digital Ocean Containerization Meetup](https://www.meetup.com/DigitalOceanBangalore/events/236353004/) . Docker 1.13 details and Kubernetes deployment tips were fantastics.\r\n\r\nI talked about the containerization for storage. The presentation slides are published [here](http://www.slideshare.net/UmasankarMukkara/openebs-containerized-storage-for-containers). Slide #6 talks about the advantages when the storage volumes are containerized, just like the advantages when the applications are containerized. In the storage containerization, the storage software becomes a micro service. Storage protocol (iSCSI in this case), replication, QoS, Encryption are micro services that are better managed and served when containerized. This form of containerization leads to a true non-disruptive storage upgrade possibility in production.\r\n\r\nImagine, there are thousands of storage volumes in production serving thousands of containerized applications. If a storage upgrade has to happen that actually is needed only few volumes, such as a special snapshot or encryption feature or bug fix, then only those containers need to be upgraded. The maintenance window scheduling will be the simplest in such scenarios. To make this possible, OpenEBS abstracts the storage functionality into the user space (slide #7) and each volume is dedicated with a separate storage process in the form of containers… Micro services architecture to the storage, delivered.\r\n\r\nI also talked about the building blocks of OpenEBS.\r\n\r\nOpenEBS uses or builds on:\r\n\r\n- Docker — for achieving containerization. [Jiva](https://hub.docker.com/r/openebs/jiva/) is the docker image\r\n- Longhorn Rancher — For basic storage replication and distributed scale-out needs. QoS, encryption comes from here.\r\n- Nomad — Clustering capability among storage hosts as well as storage pods or VSMs is served by Nomad\r\n- Consul — for the cluster db\r\n- Flannel — for the container networking needs. We use the flannel’s intelligence for picking up the IP addresses for VSMs automatically, VLANS and other networking stuff. The database portion of flannel is not needed as OpenEBS has the centralized config db for Maya (consul implementation)\r\n\r\n![OpenEBS Building Blocks and Integration](/images/blog/containerization-meetup-building-blocks.png)\r\nAs far as the integration points of OpenEBS are concerned, the provisioning in integrated into k8s. The provisioning of the OpenEBS can be done through the [K8s iSCSI volume interface](https://kubernetes.io/docs/user-guide/volumes/#iscsi) or through the [K8s AWS EBS interface](https://kubernetes.io/docs/user-guide/volumes/#awselasticblockstore). Yes, OpenEBS exposes AWS EBS API. Any orchestration layer or application that knows to connect to and use AWS EBS, will work with OpenEBS.\r\n\r\nAs we progress from this early stage, we look forward to work closely with the Docker and k8s user communities.\r\n","slug":"containerization-meetup-containers-for-storage-too"},{"id":107,"title":"Emerging Storage Trends for Containers\r","author":"Kiran Mova\r","author_info":"Contributor and Maintainer OpenEBS projects. Chief Architect MayaData. Kiran leads overall architecture & is responsible for architecting, solution design & customer adoption of OpenEBS.\r","date":"11-01-2017\r","tags":["DevOps"," Docker"," OpenEBS"," Startup"," Storage"],"excerpt":"The smiling docker whale is everywhere these days. You either have ridden on it or you want to know how to ride on it. As far as operations teams are concerned the docker whale is just teasing them.\r","content":"\r\nThe smiling docker whale is everywhere these days. You either have ridden on it or you want to know how to ride on it. As far as operations teams are concerned the docker whale is just teasing them. In the recent meetups and conferences I attended here, very few hands rise when asked if they have deployed containers in production.\r\n\r\nWell, it has taken over a decade and half at least for the shift from servers to virtual machines. And even now, I see a lot of caution in the enterprises to move completely into the public cloud. Though the technology around virtualization is well established, the real return$$ of moving onto public cloud aren’t as great as initially expected.\r\n\r\nA similar transitional trend, but at a much faster pace is being seen around the containers. Docker has done a phenomenal job in breaking the entry barrier for playing with containers, by addressing the Container Eco-System components for Developers to quickly build, test and package the applications via containers.\r\n\r\n![Interest over time](https://cdn-images-1.medium.com/max/800/1*c8cxwXMmU93xXAiK4Rs0BA.png)\r\n\r\nWhile it is very easy to setup and run containers, are dockers really ready for the production work load? The following diagram pretty much sums it up.\r\n\r\n(Credit: [http://bicarait.com/2016/11/01/running-your-docker-using-vsphere-integrated-container/](http://bicarait.com/2016/11/01/running-your-docker-using-vsphere-integrated-container/))\r\n\r\n![Containers in development & production](https://cdn-images-1.medium.com/max/800/0*nDL6ATRys2vPH8m9.png)\r\n\r\nLearning from the recent past, the cloud was led by the compute virtualization, but it wasn’t a true cloud until the network and storage also were fully virtualized, giving way to software-defined Storage and software-defined Networking. These days it is about SDDC, which involves significant improvement in the orchestration of infrastructure and the services running on them. For those of us that have contributed and implemented the cloud, and operated them in production — the journey was exciting and in some instances nail biting!!\r\n\r\nI keep hearing developers say, I don’t care about the infrastructure. That’s great, but it just means that someone else is taking care of it, usually the operations team! I wonder if the DevOps is bringing developers closer to operations or Operations closer to Developers? I bet it is the Operations Team getting closer to Developers and making the life of Developers much easier.\r\n\r\nThe Developers are excited about the stateless containers or server-less architectures or lambda services. All of these are great architectural patterns, but all these eventually depend in some form on some stateful containers or servers that are running over robust infrastructure with extremely low latency.\r\n\r\nThe Operations Teams are the one that need to define this robust infrastructure for running the containers. Unlike VMs that were provisioned (or self provisioned on designated infrastructure) for specific use-cases, the container infrastructure must come with a brain of its own, where the containers are provisioned and moved depending on the load and performance parameters.\r\n\r\nAn application or service in the container world, will be a set of interconnected containers (stateful or stateless — much like a K8s Pod), that will require compute, network and storage. And for these Application Pods to be portable, the infrastructure also needs to move along with them. It is time for programmable infrastructure to go mainstream. Just as virtualization paved way for software-defined networks and software-defined storage, we are now seeing the need for container defined network and container defined storage.\r\n\r\nFor a recent [Bangalore Docker meetup](http://neependra.net/?p=2141), I took a shot at looking through the various storage startups that are trying to build storage for the containers. The slides are available here : [Emerging Storage Trends for Containers](http://www.slideshare.net/kiranmova/emerging-storagetrendsforcontainers)\r\n\r\nThe storage trends can be summarized as follows:\r\n\r\n(1) (Slide#22) **Elastic Storage Infrastructure** — The storage can be horizontally scaled, much like the docker hosts in docker swarm. The technology to implement the Elastic Storage is already in production with many vendors supplying **_Software-Defined Scale-out/Distributed Storage_** in the cloud environments.\r\n\r\n(2) (Slide #23) **Ease of Accessing the Storage**— The volume of volumes required by the containerized applications will be manyfold compared to volumes used in the VM storage. And the volumes will be more portable. Operations team should be shielded from having to mount/unmount volumes or datastores. **_The integration into the orchestration layers for mounting the storage and providing access to the volumes, without requiring additional software changes will be paramount._** The TCMU/iSCSI, NBD/NFS interfaces are two different approaches with each coming with its own nuances w.r.t isolation vs ease.\r\n\r\n(3) (Slide #24) **Hyper Converged Storage** — For storage to be hardened, the developer setups need to be and **_avoid managing silos of infrastructure for compute, network, and storage._** The concept of lightweight storage software will emerge which will mount distributed external storage or cloud storage onto the local machines (with caching).\r\n\r\n(4) (Slide #25) **Hybrid Clouds / Storage** — Put the storage in the right place and move it around depending on the demands of the application and economics. A first in this place would be to move the snapshots into S3 when the persistent disks are used for stateful containers. The industry has established that to save money, a mix of clouds is going to be used with the apps moving into different container environments. The storage platform should be able to run alongside different clouds or have the ability to inter-operate. **_Seamless Storage Migration within and across clouds is a must._**\r\n\r\n(5) (Slide #26) **Containerized Storage** — One of the best innovations is the way the containers are defined and deployed. The storage software also will reap these benefits by containerizing the storage. **_Version of the storage being used will become another parameter to be defined in the intent specs along with capacity and performance (QoS)._** Containerization also helps with isolation and ease of upgrades in shared environments.\r\n\r\n(6) (Slide #27) **Keep up with the core storage innovations** — Flash is already mainstream, with CIOs questioning if they still really need the SAS Tiers. With NVMe, cache is becoming more accessible both in terms of $$ and the performance boost it can provide to the Storage Software. **_The low latency demands from the containerized applications will be guaranteed via the use of NVMe Flash for read/write caching of data that is possibly stored on disks or remote cloud storage._**\r\n\r\nIt is euphoric to see the new developments being made in the opensource for the storage, networking, and orchestration layers, apart from the container runtime itself!\r\n\r\n2017 may well be year where we will start seeing containers in production as the infrastructure pieces for Containers mature.\r\n","slug":"emerging-storage-trends-for-containers"},{"id":108,"title":"I’ve become a Chairman — of CloudByte / OpenEBS\r","author":"Evan Powell\r","author_info":"Founding CEO of a few companies including StackStorm (BRCD) and Nexenta — and CEO & Chairman of OpenEBS/MayaData. ML and DevOps and Python, oh my!\r","date":"04-01-2017\r","tags":["DevOps"," Docker"],"excerpt":"I’m excited to announce that I recently joined CloudByte, a developer of storage solutions for enterprises and service providers and the originator of the new OpenEBS project.\r","content":"\r\nI’m excited to announce that I recently joined CloudByte, a developer of storage solutions for enterprises and service providers and the originator of the new OpenEBS project. While my role is Chairman of the Board of Directors, I’ll be rolling up my sleeves and doing whatever I can to help.\r\n\r\nYou might ask — why? And so what?\r\n\r\n## 1. **YAML = truth**\r\n\r\nWhen I helped popularize the notion of software **defined** open storage years ago as founding CEO of Nexenta — one of the concerns was “who sets the definition?” At the time VMware was pushing themselves for that role. It was a bottoms up — infrastructure up — approach that never fully caught hold.\r\n\r\nIt was a pre DevOps approach of doing things that often ended in the old familiar:\r\n\r\nThese days the intent of the developer and the requirements of the application are being expressed via flavors of YAML that Kubernetes, Docker Swarm, Mesos, StackStorm, Rancher and others leverage.\r\n\r\nCloudByte, via the OpenEBS community that builds on many of the technologies that CloudByte has been building and selling for years, is well positioned to be the preferred solution for containerized storage for containers not just because of the underlying QoS isolation bits — though that heritage is important — but also because we and the OpenEBS community are 100% focused on manifesting the intent and latent requirements of the application.\r\n\r\nTake a look at OpenEBS here: [www.OpenEBS.io](http://www.openebs.io/). It is early however already gathering some great contributors and users. Please let us know what you think.\r\n\r\n## 2. **I like money**\r\n\r\nNo, it isn’t that I’m joining the board for the money. News flash — early stage start-ups don’t have money lying around to pay board members, actually the cash flows the other way :) Rather, CloudByte’s technologies have been proven by demanding enterprises and service providers.\r\n\r\nThis existing customer set — and their increasing commitments as confirmed by a far and away record quarter of sales last quarter — gives us a foundation to build upon. We intend to extend our success in the scale up storage space via our flexible business model and superior technology — especially for use cases where our per volume QoS management matters to users.\r\n\r\n## 3. **Team time!**\r\n\r\nMost importantly, as I’ve come to know the CloudByte team I’ve formed a commitment to them and their vision for the kind of company we can build. I feel honored to support our CEO and co-founder Uma — he’s brilliant, he is stubborn, and he is relentlessly making real a vision for what storage can be — as an **enabler** of the shift towards cloud native and DevOps as opposed to an **inhibitor**. It didn’t hurt that the new board hit it off immediately and that Raj from Fidelity / EightRoads and Sandeep from Nexus have great entrepreneur-friendly reputations as well as massive funds supporting them.\r\n\r\nThere will be much more to come as we share our thoughts about strategy and, maybe more importantly, as [OpenEBS](http://www.openebs.io/) community members lay out what they’d like to see in containerized storage.\r\n\r\nUntil then — please get in touch. Hang out with us on [the community](http://www.openebs.io/) or just ping me via twitter @epowell101 or otherwise. Let’s work together to make storage — finally — something that does what it is supposed to do despite all the challenges inherent to providing persistence to today’s ever more dynamic environments.\r\n","slug":"ive-become-a-chairman-of-cloudbyte-openebs"},{"id":109,"title":"OpenEBS — The containerized storage\r","author":"Uma Mukkara\r","author_info":"Contributor at openebs.io, Co-founder & COO@MayaData. Uma led product development in the early days of MayaData (CloudByte).\r","date":"01-01-2017\r","tags":["DevOps"," Docker"," Kubernetes"," Rancher"," Golang"," OpenEBS"],"excerpt":"In the infrastructure space, the compute environment is always the first to lead the change. Docker has brought in the new thinking into every DevOPs administrator and application developer.\r","content":"\r\nIn the infrastructure space, the compute environment is always the first to lead the change. Docker has brought in the new thinking into every DevOps administrator and application developer. CIOs across the spectrum are beginning to include Docker into their policies. As the IT environment begins to adopt containerization into mainstream, there are holes that still need to be plugged in, specifically in the storage space.\r\n\r\nI am excited to write the first details on OpenEBS ([www.openebs.io](http://www.openebs.io/)) project.\r\n\r\nAfter 4 amazing years of building commercial storage products, I recently took a giant leap into the open source model of building infrastructure software. We recently launched OpenEBS project with the goal of building the developer friendly storage using coolest available infrastructure pieces underneath .. be it Docker, k8s, Rancher LongHorn, Nomad, Terraform, etc.\r\n\r\n## So, what is OpenEBS, in short ?\r\n\r\nOpenEBS offers persistent block storage with the following features:\r\n\r\n- Containerized block storage using Docker containers. We call them VSMs or Virtual Storage Machines, a concept similar to k8s PODs.\r\n- A highly scalable storage orchestration platform that spins the storage volumes seamlessly and manages them effortlessly\r\n- A simple, yet high performing distributed block storage designed with best caching via the NVMe optimizations\r\n\r\n## Why containerized storage?\r\n\r\nSimple answer is that even the storage volumes have software associated with them for their regular functions and this software needs to be managed at volume level.\r\n\r\n![Monolithic vs Containerized Storage](https://cdn-images-1.medium.com/max/800/1*OoQnpEsGf_ovb5BFnGI8hA.jpeg)\r\n\r\nWhen software upgrades happen at storage host level, all volumes' behavior will change simultaneously, which may not be the desired result. Similarly, upgrade maintenance windows may not be the same for all applications or storage volumes. We often observe that it is very difficult to get a convenient window that satisfies all storage volumes or associated applications.\r\n\r\nWith containerized storage, storage upgrades becomes simple and easy, just like application upgrades with Docker containers.\r\n\r\n## Maya, our new storage orchestration platform\r\n\r\nKubernetes, Docker swarm, Rancher cattle, Nomad and other orchestration platforms do a good job of managing the lifecycle of compute containers and initial provisioning of network and storage. However, the storage infrastructure management, when scaled is a big beast in itself. Storage volumes need to be persistent to the application but they need to be volatile in the backend. Storage volumes need to be scheduled on various hosts based on the capacity and IOPS availability and these volumes may need to be moved on the fly as the usage goes up.\r\n\r\n_Maya in Sanskrit language means “\\***\\*Magic\\*\\***”. Maya will seamlessly integrate storage management functionality into existing container orchestration layers for provisioning, scheduling, reporting, rolling upgrades etc., and provide storage specific capabilities like data protection capabilities, migrating storage etc.,_\r\n\r\n## The building blocks of high performing, distributed block storage:\r\n\r\n**_Rancher longhorn:_** We chose to adopt and enhance Rancher longhorn as the basic building block of storage block intelligence in OpenEBS. I will write a separate blog about what is longhorn, it’s features and why we chose longhorn, but in short, longhorn employs a clever and simple approach to container data connectivity, data availability (replication), data protection (snapshot). And longhorn is written in GoLang.\r\n\r\n**_Gostor gotgt:_** One of the initial front ends for OpenEBS is of course the iSCSI. We chose gostor/gotgt as a good starting point. OpenEBS plans to add many new capabilities to gotgt like clustering support, performance optimizations etc.\r\n\r\n**_Bulk Caching layer through NVMe:_** The caching layer that we see in traditional storage systems is usually small in size. The recent advancements in flash technology made it possible to offer large capacities of flash at affordable prices. Now cost is not a deterrent to have terabytes of low latency flash storage. OpenEBS provides an intelligent caching technology which keeps the hot data in the large NVMe flash layer. Intel’s 3d XPoint is a good fit for this technology.\r\n\r\n## Community:\r\n\r\nCommunity is paramount. We hope to embrace a lot of friends, advisers, experts in this journey and successfully deliver the OpenEBS promise. Drop by at our [gitter channel](https://gitter.im/openebs/Lobby) and say Hi !\r\n","slug":"openebs-the-containerized-storage"},{"id":110,"title":"Running through the mud looking skywards\r","author":"Amit Kumar Das\r","author_info":"Engineer the DAO\r","date":"2017-02-11\r","tags":["Education"," Industry"," Storage"," OpenEBS"],"excerpt":"I always believe, bridging the minds of academia & industry has to go beyond the nuances of theory vs. practical.\r","content":"\r\nI knew we would be running through the mud looking skywards for those brightest stars. We were not at all disappointed with our first attempt at _Kuppam Engineering College_, India.\r\n\r\nI always believe, bridging the minds of academia & industry has to go beyond the nuances of theory vs. practical. We call ourselves the industry’s core and form the industry’s grey cells. What we need to do is make our problems open to the public. These problems becomes the new practice that needs to be picked up by our _alma mater_. Once selected, it will take no time for these problems to go viral among the students of these institutions. Let these young minds chart their own course; love, enjoy & live every moment when they traverse through this meandering amazon of practical problems. This becomes the fodder for the future theory allowing the current one to rest in peace.\r\n\r\nAbove sounds like a grand planning that resembles more like a trickle down effect. Well, the answer is a big ‘No’. Team at [**OpenEBS**](http://openebs.io/) believes there are many faster ways to achieve above in a time bound manner. Hence the formation of various internship programs where [**OpenEBS**](http://openebs.io/) approaches the Universities to get the latter on same plane that the former is passionate about.\r\n\r\n**At Kuppam, we could feel the freshness in the air, the disruptions that yearn to come out of the closet. We are all geared to lighten up this brilliance that is currently lying dishevelled.**\r\n\r\nOn a closing note, I challenge the myriad number of B.E projects & Ph.D. programs that are purposeless versus the likes of problems that the world wants us to solve. Join me in my effort to solve the problems that matter.\r\n","slug":"running-through-the-mud-looking-skywards"},{"id":111,"title":"OpenEBS Building blocks — Rancher Longhorn\r","author":"Uma Mukkara\r","author_info":"Contributor at openebs.io, Co-founder & COO@MayaData. Uma led product development in the early days of MayaData (CloudByte).\r","date":"2017-01-06\r","tags":["Container"," DevOps"," Longhorn"," OpenEBS"," Docker"],"excerpt":"In the previous blog post, I shared the initial details of OpenEBS. In this post, I will continue to discuss the OpenEBS technology building blocks and touch upon the details of Rancher longhorn and why we chose longhorn .\r","content":"\r\nIn the [previous ](https://blog.openebs.io/openebs-the-containerized-storage-f76e394a9543#.vaquo22zw)blog post, I shared the initial details of OpenEBS. In this post, I will continue to discuss the OpenEBS technology building blocks and touch upon the details of Rancher longhorn and why we chose [longhorn ](https://github.com/rancher/longhorn).\r\n\r\nOpenEBS platform contains three core building blocks:\r\n\r\n- An orchestration platform, Maya, that works with Kubernetes and manages thousands of volumes with ease.\r\n- Containerized storage volumes called Virtual Storage Machines or VSMs and\r\n- Maya managed backing stores or data stores residing either locally on OpenEBS hosts or remotely over network\r\n\r\n**_Just to recap, why storage containerization?_** With storage containerization, the storage upgrades are flexible, easy, and effective. The containerization of storage means that the core functionality of storage (like front end protocol ISCSI, snapshotting, replication, backup) is abstracted into a Docker container and managed outside the kernel. A software patch to correct or enhance the replication behavior of a volume does not affect the other volume in the same host. Each of these Docker containers do a specific job of either running [gotgt ](https://github.com/gostor/gotgt)iSCSI or running a [longhorn ](https://github.com/rancher/longhorn)replica. The storage software is built as [Docker image](https://hub.docker.com/r/openebs/jiva/) and is the core/essence of OpenEBS technology. Hence, we named it “Jiva” (meaning “life”, [Wikipedia](https://en.wikipedia.org/wiki/Jiva)).\r\n\r\n**_About VSM:_** Virtual Storage Machine is the logical set of storage pods that encapsulates the entire functionality of the life cycle of a volume. The components of an OpenEBS VSM is shown in the below picture.\r\n\r\n![Fig: OpenEBS VSM components](https://cdn-images-1.medium.com/max/800/1*-Bl0JyjyNdVe_bp6YI-n6w.png)\r\n\r\nA VSM contains as many storage pods as the number of data copies of the volume. Each storage pod has at least one container for replica and optionally has a container for exposing the storage access protocol (iSCSI, NBD etc). We are using a fork of rancher/longhorn software to manage the replication among the storage pods and a fork of gostor/gotgt software to provide iSCSI interface.\r\n\r\n## What is longhorn ?\r\n\r\nLonghorn is a simplified block storage software, implemented in golang, that stores the entire volume as a single linux sparse file. The sparse files provide thin provisioning behavior. Formatting with QCow2 adds the CoW feature to the data. It is lean and provides an AWS EBS style snapshot functionality. Longhorn has two subcomponents, longhorn controller (LHC) and longhorn replica (LHR). LHC takes care of storage connectivity, replication, rebuild, encryption, etc while LHR does snapshotting, backup, QoS, etc.\r\n\r\nLHC and LHR can be deployed in two modes.\r\n\r\n- _Hyper-converged container model,_ where LHC and LHR are on the same host as that of compute or Docker Host. TCMU is used for block storage volume drive emulation on Docker Host.\r\n- _Remote storage model,_ where LHC and LHR are on separate storage host. The compute Docker Host connects to LHC using iSCSI. iSCSI client is used for block storage volume drive emulation on Docker Host.\r\n\r\nThese two models are shown below\r\n\r\n#### LHC and LHR are on the Docker Host\r\n\r\n![Fig. Longhorn deployment mode : Hyper-converged](https://cdn-images-1.medium.com/max/800/1*nlswAfJqgqaWRJpKYLr_jA.png)\r\n\r\n_Note: Minimum linux kernel version required for hyper-converged mode is 4.4_\r\n\r\n## LHC and LHR are on the remote Storage\r\n\r\n![Fig: Longhorn deployment mode : Network storage](https://cdn-images-1.medium.com/max/800/1*wB_PG-Y_jZm8lMmSzKJAww.png)\r\n\r\nA third mode is also possible, where LHC runs on the Docker Host and LHR runs on the remote storage host, the discussion about this is for a later day.\r\n\r\nLonghorn replica uses 4K as the underlying block size and is a chain of differencing disks among the live data and snapshot data. The backup is done in a AWS-EBS style, where only the changed blocks are copied to the remote location (like S3) using 2M block size.\r\n\r\n## Why we chose longhorn for OpenEBS?\r\n\r\nWe wanted to implement a simple block storage engine, in user space, that can be containerized. Rancher had spent quite an amount of effort in just doing that. It is written in golang too. We found it to be thin, working, and fit. We integrated gotgt and longhorn for the basic use case of OpenEBS. We are thrilled to find great support from longhorn team in this journey. Thank you, Rancher. Though [openebs longhorn](https://github.com/openebs/longhorn) is forked at the moment from Rancher longhorn, we intend to push back the changes to the mainstream longhorn and contribute there. We plan to add the functionality of flash caching, S3 integration, RDMA support, cache tier-ing to remote storage, etc to longhorn in the days and months to come.\r\n\r\nThe next blog post will discuss the deployment modes of OpenEBS with containerized longhorn or jiva.\r\n","slug":"openebs-building-blocks-rancher-longhorn"}]